import{_ as o,c as r,o as t,ag as i}from"./chunks/framework.kafl1dx7.js";const u=JSON.parse('{"title":"Type Alias: ContiguityNeighborsFromBinaryGeometriesProps","description":"","frontmatter":{},"headers":[],"relativePath":"api/core/src/type-aliases/ContiguityNeighborsFromBinaryGeometriesProps.md","filePath":"api/core/src/type-aliases/ContiguityNeighborsFromBinaryGeometriesProps.md","lastUpdated":1752605343000}'),a={name:"api/core/src/type-aliases/ContiguityNeighborsFromBinaryGeometriesProps.md"};function n(s,e,c,l,d,h){return t(),r("div",null,e[0]||(e[0]=[i('<p><a href="./../../../modules.html">geodalib</a> / <a href="./../">core/src</a> / ContiguityNeighborsFromBinaryGeometriesProps</p><h1 id="type-alias-contiguityneighborsfrombinarygeometriesprops" tabindex="-1">Type Alias: ContiguityNeighborsFromBinaryGeometriesProps <a class="header-anchor" href="#type-alias-contiguityneighborsfrombinarygeometriesprops" aria-label="Permalink to &quot;Type Alias: ContiguityNeighborsFromBinaryGeometriesProps&quot;">​</a></h1><blockquote><p><strong>ContiguityNeighborsFromBinaryGeometriesProps</strong>: <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/GeoDaCenter/geoda-lib/blob/04471ecd75dbfe13a0a0fbff4b6e7d785ad0f8e7/js/packages/core/src/weights/contiguity-neighbors.ts#L54" target="_blank" rel="noreferrer">core/src/weights/contiguity-neighbors.ts:54</a></p><p>Interface for the arguments used in calculating contiguity neighbors from binary geometries.</p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><h3 id="binarygeometries" tabindex="-1">binaryGeometries <a class="header-anchor" href="#binarygeometries" aria-label="Permalink to &quot;binaryGeometries&quot;">​</a></h3><blockquote><p><strong>binaryGeometries</strong>: <code>BinaryFeatureCollection</code>[]</p></blockquote><p>The array of binary geometry features</p><h3 id="binarygeometrytype" tabindex="-1">binaryGeometryType <a class="header-anchor" href="#binarygeometrytype" aria-label="Permalink to &quot;binaryGeometryType&quot;">​</a></h3><blockquote><p><strong>binaryGeometryType</strong>: <a href="./BinaryGeometryType.html"><code>BinaryGeometryType</code></a></p></blockquote><p>The type of binary geometry</p><h3 id="includelowerorder" tabindex="-1">includeLowerOrder? <a class="header-anchor" href="#includelowerorder" aria-label="Permalink to &quot;includeLowerOrder?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>includeLowerOrder</strong>: <code>boolean</code></p></blockquote><p>Whether to include lower orders in the results</p><h3 id="isqueen" tabindex="-1">isQueen <a class="header-anchor" href="#isqueen" aria-label="Permalink to &quot;isQueen&quot;">​</a></h3><blockquote><p><strong>isQueen</strong>: <code>boolean</code></p></blockquote><p>Whether to use queen contiguity (true) or rook contiguity (false)</p><h3 id="orderofcontiguity" tabindex="-1">orderOfContiguity? <a class="header-anchor" href="#orderofcontiguity" aria-label="Permalink to &quot;orderOfContiguity?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>orderOfContiguity</strong>: <code>number</code></p></blockquote><p>The order of contiguity to calculate</p><h3 id="precisionthreshold" tabindex="-1">precisionThreshold? <a class="header-anchor" href="#precisionthreshold" aria-label="Permalink to &quot;precisionThreshold?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>precisionThreshold</strong>: <code>number</code></p></blockquote><p>Threshold for considering points as neighbors</p><h3 id="usecentroids" tabindex="-1">useCentroids? <a class="header-anchor" href="#usecentroids" aria-label="Permalink to &quot;useCentroids?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>useCentroids</strong>: <code>boolean</code></p></blockquote><p>Whether to use centroids for neighbor calculations</p>',27)]))}const b=o(a,[["render",n]]);export{u as __pageData,b as default};
