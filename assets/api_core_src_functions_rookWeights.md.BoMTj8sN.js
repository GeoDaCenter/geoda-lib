import{_ as i,c as e,o as a,ag as t}from"./chunks/framework.kafl1dx7.js";const c=JSON.parse('{"title":"Function: rookWeights()","description":"","frontmatter":{},"headers":[],"relativePath":"api/core/src/functions/rookWeights.md","filePath":"api/core/src/functions/rookWeights.md","lastUpdated":1752605343000}'),n={name:"api/core/src/functions/rookWeights.md"};function r(o,s,h,l,p,d){return a(),e("div",null,s[0]||(s[0]=[t(`<p><a href="./../../../modules.html">geodalib</a> / <a href="./../">core/src</a> / rookWeights</p><h1 id="function-rookweights" tabindex="-1">Function: rookWeights() <a class="header-anchor" href="#function-rookweights" aria-label="Permalink to &quot;Function: rookWeights()&quot;">​</a></h1><blockquote><p><strong>rookWeights</strong>(<code>geometries</code>, <code>useCentroids</code>?, <code>precisionThreshold</code>?, <code>orderOfContiguity</code>?, <code>includeLowerOrder</code>?): <code>Promise</code>&lt;<a href="./../type-aliases/WeightsMeta.html"><code>WeightsMeta</code></a>&gt;</p></blockquote><p>Defined in: <a href="https://github.com/GeoDaCenter/geoda-lib/blob/04471ecd75dbfe13a0a0fbff4b6e7d785ad0f8e7/js/packages/core/src/weights/contiguity-neighbors.ts#L286" target="_blank" rel="noreferrer">core/src/weights/contiguity-neighbors.ts:286</a></p><h2 id="description" tabindex="-1">Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;Description&quot;">​</a></h2><p>Create Rook contiguity weights for GeoJSON features.</p><p>Rook contiguity defines neighbors as spatial units that only share common edge (border)</p><p>This is in contrast to Queen contiguity, which considers shared edges and vertices.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { rookWeights } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@geoda/core&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> geometries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Feature&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geometry: { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Point&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, coordinates: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Feature&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geometry: { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Point&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, coordinates: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Feature&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geometry: { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Point&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, coordinates: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> weights</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rookWeights</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geometries);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(weights);</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="geometries" tabindex="-1">geometries <a class="header-anchor" href="#geometries" aria-label="Permalink to &quot;geometries&quot;">​</a></h3><p><a href="./../type-aliases/SpatialGeometry.html"><code>SpatialGeometry</code></a></p><p>The geometries used to create the rook contiguity weights. See <a href="./../type-aliases/SpatialGeometry.html">SpatialGeometry</a> for more information.</p><h3 id="usecentroids" tabindex="-1">useCentroids? <a class="header-anchor" href="#usecentroids" aria-label="Permalink to &quot;useCentroids?&quot;">​</a></h3><p><code>boolean</code> = <code>false</code></p><p>If true, uses geometry centroids for calculations</p><h3 id="precisionthreshold" tabindex="-1">precisionThreshold? <a class="header-anchor" href="#precisionthreshold" aria-label="Permalink to &quot;precisionThreshold?&quot;">​</a></h3><p><code>number</code> = <code>0.0</code></p><p>Distance threshold for determining neighbors. Useful when geometries don&#39;t perfectly align</p><h3 id="orderofcontiguity" tabindex="-1">orderOfContiguity? <a class="header-anchor" href="#orderofcontiguity" aria-label="Permalink to &quot;orderOfContiguity?&quot;">​</a></h3><p><code>number</code> = <code>1</code></p><p>Number of steps to consider for neighbor relationships. 1 means immediate neighbors only</p><h3 id="includelowerorder" tabindex="-1">includeLowerOrder? <a class="header-anchor" href="#includelowerorder" aria-label="Permalink to &quot;includeLowerOrder?&quot;">​</a></h3><p><code>boolean</code> = <code>false</code></p><p>If true, includes all neighbors from order 1 up to the specified order</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>Promise</code>&lt;<a href="./../type-aliases/WeightsMeta.html"><code>WeightsMeta</code></a>&gt;</p><p>Spatial weights metadata including neighbor relationships</p>`,29)]))}const g=i(n,[["render",r]]);export{c as __pageData,g as default};
