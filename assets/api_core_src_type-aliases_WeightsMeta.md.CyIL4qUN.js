import{_ as o,c as t,o as a,ag as r}from"./chunks/framework.kafl1dx7.js";const b=JSON.parse('{"title":"Type Alias: WeightsMeta","description":"","frontmatter":{},"headers":[],"relativePath":"api/core/src/type-aliases/WeightsMeta.md","filePath":"api/core/src/type-aliases/WeightsMeta.md","lastUpdated":1752605343000}'),i={name:"api/core/src/type-aliases/WeightsMeta.md"};function n(c,e,d,s,h,l){return a(),t("div",null,e[0]||(e[0]=[r('<p><a href="./../../../modules.html">geodalib</a> / <a href="./../">core/src</a> / WeightsMeta</p><h1 id="type-alias-weightsmeta" tabindex="-1">Type Alias: WeightsMeta <a class="header-anchor" href="#type-alias-weightsmeta" aria-label="Permalink to &quot;Type Alias: WeightsMeta&quot;">​</a></h1><blockquote><p><strong>WeightsMeta</strong>: <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/GeoDaCenter/geoda-lib/blob/04471ecd75dbfe13a0a0fbff4b6e7d785ad0f8e7/js/packages/core/src/weights/weights-stats.ts#L4" target="_blank" rel="noreferrer">core/src/weights/weights-stats.ts:4</a></p><p>The meta data for the weights</p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><h3 id="distancemetric" tabindex="-1">distanceMetric? <a class="header-anchor" href="#distancemetric" aria-label="Permalink to &quot;distanceMetric?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>distanceMetric</strong>: <code>&quot;euclidean&quot;</code> | <code>&quot;manhattan&quot;</code> | <code>&quot;arc&quot;</code> | <code>&quot;projected&quot;</code></p></blockquote><p>The distance metric for the weights</p><h3 id="distanceunit" tabindex="-1">distanceUnit? <a class="header-anchor" href="#distanceunit" aria-label="Permalink to &quot;distanceUnit?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>distanceUnit</strong>: <code>&quot;Foot_US&quot;</code> | <code>&quot;Yard_US&quot;</code> | <code>&quot;Meter&quot;</code> | <code>&quot;Kilometer&quot;</code> | <code>&quot;NauticalMile&quot;</code> | <code>&quot;Degree&quot;</code> | <code>&quot;Radian&quot;</code></p></blockquote><p>The unit of the distance metric</p><h3 id="id" tabindex="-1">id? <a class="header-anchor" href="#id" aria-label="Permalink to &quot;id?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>id</strong>: <code>string</code></p></blockquote><p>The id of the weights</p><h3 id="includelowerorder" tabindex="-1">includeLowerOrder? <a class="header-anchor" href="#includelowerorder" aria-label="Permalink to &quot;includeLowerOrder?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>includeLowerOrder</strong>: <code>boolean</code></p></blockquote><p>Whether to include lower order neighbors</p><h3 id="ismile" tabindex="-1">isMile? <a class="header-anchor" href="#ismile" aria-label="Permalink to &quot;isMile?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>isMile</strong>: <code>boolean</code></p></blockquote><p>Whether the distance is in miles</p><h3 id="k" tabindex="-1">k? <a class="header-anchor" href="#k" aria-label="Permalink to &quot;k?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>k</strong>: <code>number</code></p></blockquote><p>The k value for k-nearest neighbors</p><h3 id="maxneighbors" tabindex="-1">maxNeighbors <a class="header-anchor" href="#maxneighbors" aria-label="Permalink to &quot;maxNeighbors&quot;">​</a></h3><blockquote><p><strong>maxNeighbors</strong>: <code>number</code></p></blockquote><p>The maximum number of neighbors</p><h3 id="meanneighbors" tabindex="-1">meanNeighbors <a class="header-anchor" href="#meanneighbors" aria-label="Permalink to &quot;meanNeighbors&quot;">​</a></h3><blockquote><p><strong>meanNeighbors</strong>: <code>number</code></p></blockquote><p>The mean number of neighbors</p><h3 id="medianneighbors" tabindex="-1">medianNeighbors <a class="header-anchor" href="#medianneighbors" aria-label="Permalink to &quot;medianNeighbors&quot;">​</a></h3><blockquote><p><strong>medianNeighbors</strong>: <code>number</code></p></blockquote><p>The median number of neighbors</p><h3 id="minneighbors" tabindex="-1">minNeighbors <a class="header-anchor" href="#minneighbors" aria-label="Permalink to &quot;minNeighbors&quot;">​</a></h3><blockquote><p><strong>minNeighbors</strong>: <code>number</code></p></blockquote><p>The minimum number of neighbors</p><h3 id="numberofobservations" tabindex="-1">numberOfObservations <a class="header-anchor" href="#numberofobservations" aria-label="Permalink to &quot;numberOfObservations&quot;">​</a></h3><blockquote><p><strong>numberOfObservations</strong>: <code>number</code></p></blockquote><p>The number of observations</p><h3 id="order" tabindex="-1">order? <a class="header-anchor" href="#order" aria-label="Permalink to &quot;order?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>order</strong>: <code>number</code></p></blockquote><p>The order of the weights</p><h3 id="pctnonezero" tabindex="-1">pctNoneZero <a class="header-anchor" href="#pctnonezero" aria-label="Permalink to &quot;pctNoneZero&quot;">​</a></h3><blockquote><p><strong>pctNoneZero</strong>: <code>number</code></p></blockquote><p>The percentage of non-zero neighbors</p><h3 id="symmetry" tabindex="-1">symmetry? <a class="header-anchor" href="#symmetry" aria-label="Permalink to &quot;symmetry?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>symmetry</strong>: <code>&quot;symmetric&quot;</code> | <code>&quot;asymmetric&quot;</code></p></blockquote><p>The symmetry of the weights</p><h3 id="threshold" tabindex="-1">threshold? <a class="header-anchor" href="#threshold" aria-label="Permalink to &quot;threshold?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>threshold</strong>: <code>number</code></p></blockquote><p>The threshold for the weights</p><h3 id="type" tabindex="-1">type? <a class="header-anchor" href="#type" aria-label="Permalink to &quot;type?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>type</strong>: <code>&quot;knn&quot;</code> | <code>&quot;threshold&quot;</code> | <code>&quot;queen&quot;</code> | <code>&quot;rook&quot;</code></p></blockquote><p>The type of the weights</p>',54)]))}const p=o(i,[["render",n]]);export{b as __pageData,p as default};
