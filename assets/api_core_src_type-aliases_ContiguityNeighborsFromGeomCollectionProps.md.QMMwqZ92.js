import{_ as e,c as t,o as r,ag as i}from"./chunks/framework.kafl1dx7.js";const p=JSON.parse('{"title":"Type Alias: ContiguityNeighborsFromGeomCollectionProps","description":"","frontmatter":{},"headers":[],"relativePath":"api/core/src/type-aliases/ContiguityNeighborsFromGeomCollectionProps.md","filePath":"api/core/src/type-aliases/ContiguityNeighborsFromGeomCollectionProps.md","lastUpdated":1752605343000}'),a={name:"api/core/src/type-aliases/ContiguityNeighborsFromGeomCollectionProps.md"};function n(l,o,c,s,d,h){return r(),t("div",null,o[0]||(o[0]=[i('<p><a href="./../../../modules.html">geodalib</a> / <a href="./../">core/src</a> / ContiguityNeighborsFromGeomCollectionProps</p><h1 id="type-alias-contiguityneighborsfromgeomcollectionprops" tabindex="-1">Type Alias: ContiguityNeighborsFromGeomCollectionProps <a class="header-anchor" href="#type-alias-contiguityneighborsfromgeomcollectionprops" aria-label="Permalink to &quot;Type Alias: ContiguityNeighborsFromGeomCollectionProps&quot;">​</a></h1><blockquote><p><strong>ContiguityNeighborsFromGeomCollectionProps</strong>: <code>object</code></p></blockquote><p>Defined in: <a href="https://github.com/GeoDaCenter/geoda-lib/blob/04471ecd75dbfe13a0a0fbff4b6e7d785ad0f8e7/js/packages/core/src/weights/contiguity-neighbors.ts#L88" target="_blank" rel="noreferrer">core/src/weights/contiguity-neighbors.ts:88</a></p><p>Interface for the arguments used in calculating contiguity neighbors from a geometry collection.</p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><h3 id="geomcollection" tabindex="-1">geomCollection <a class="header-anchor" href="#geomcollection" aria-label="Permalink to &quot;geomCollection&quot;">​</a></h3><blockquote><p><strong>geomCollection</strong>: <a href="./../classes/GeometryCollection.html"><code>GeometryCollection</code></a></p></blockquote><p>The geometry collection to calculate the neighbors for</p><h3 id="includelowerorder" tabindex="-1">includeLowerOrder? <a class="header-anchor" href="#includelowerorder" aria-label="Permalink to &quot;includeLowerOrder?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>includeLowerOrder</strong>: <code>boolean</code></p></blockquote><p>Whether to include lower orders in the results</p><h3 id="isqueen" tabindex="-1">isQueen <a class="header-anchor" href="#isqueen" aria-label="Permalink to &quot;isQueen&quot;">​</a></h3><blockquote><p><strong>isQueen</strong>: <code>boolean</code></p></blockquote><p>Whether to use queen contiguity (true) or rook contiguity (false)</p><h3 id="orderofcontiguity" tabindex="-1">orderOfContiguity? <a class="header-anchor" href="#orderofcontiguity" aria-label="Permalink to &quot;orderOfContiguity?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>orderOfContiguity</strong>: <code>number</code></p></blockquote><p>The order of contiguity to calculate</p><h3 id="precisionthreshold" tabindex="-1">precisionThreshold? <a class="header-anchor" href="#precisionthreshold" aria-label="Permalink to &quot;precisionThreshold?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>precisionThreshold</strong>: <code>number</code></p></blockquote><p>Threshold for considering points as neighbors</p><h3 id="usecentroids" tabindex="-1">useCentroids? <a class="header-anchor" href="#usecentroids" aria-label="Permalink to &quot;useCentroids?&quot;">​</a></h3><blockquote><p><code>optional</code> <strong>useCentroids</strong>: <code>boolean</code></p></blockquote><p>Whether to use centroids for neighbor calculations</p>',24)]))}const g=e(a,[["render",n]]);export{p as __pageData,g as default};
