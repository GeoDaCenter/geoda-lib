import{_ as s,c as i,o as e,ag as t}from"./chunks/framework.kafl1dx7.js";const c=JSON.parse('{"title":"Function: equalIntervalBreaks()","description":"","frontmatter":{},"headers":[],"relativePath":"api/core/src/functions/equalIntervalBreaks.md","filePath":"api/core/src/functions/equalIntervalBreaks.md","lastUpdated":1752605343000}'),n={name:"api/core/src/functions/equalIntervalBreaks.md"};function l(r,a,h,k,p,d){return e(),i("div",null,a[0]||(a[0]=[t(`<p><a href="./../../../modules.html">geodalib</a> / <a href="./../">core/src</a> / equalIntervalBreaks</p><h1 id="function-equalintervalbreaks" tabindex="-1">Function: equalIntervalBreaks() <a class="header-anchor" href="#function-equalintervalbreaks" aria-label="Permalink to &quot;Function: equalIntervalBreaks()&quot;">​</a></h1><blockquote><p><strong>equalIntervalBreaks</strong>(<code>k</code>, <code>data</code>): <code>Promise</code>&lt;<code>number</code>[]&gt;</p></blockquote><p>Defined in: <a href="https://github.com/GeoDaCenter/geoda-lib/blob/04471ecd75dbfe13a0a0fbff4b6e7d785ad0f8e7/js/packages/core/src/mapping/equal-interval-breaks.ts#L29" target="_blank" rel="noreferrer">core/src/mapping/equal-interval-breaks.ts:29</a></p><h2 id="description" tabindex="-1">Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;Description&quot;">​</a></h2><p>Divides the range of values into equal-sized intervals.</p><h2 id="characteristics" tabindex="-1">Characteristics <a class="header-anchor" href="#characteristics" aria-label="Permalink to &quot;Characteristics&quot;">​</a></h2><ul><li>Simple to understand and interpret</li><li>Best for evenly distributed data</li><li>May not represent data well when distribution is skewed</li><li>Interval size = (maximum value - minimum value) / number of classes</li></ul><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="k" tabindex="-1">k <a class="header-anchor" href="#k" aria-label="Permalink to &quot;k&quot;">​</a></h3><p><code>number</code></p><p>The number of classes/categories</p><h3 id="data" tabindex="-1">data <a class="header-anchor" href="#data" aria-label="Permalink to &quot;data&quot;">​</a></h3><p>The numeric values to be classified</p><p><code>number</code>[] | <code>Float32Array</code>&lt;<code>ArrayBufferLike</code>&gt;</p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>Promise</code>&lt;<code>number</code>[]&gt;</p><p>The breaks values</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { equalIntervalBreaks } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@geoda/core&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> breaks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> equalIntervalBreaks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(k, data);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// breaks = [3.66666666666667, 6.33333333333333]</span></span></code></pre></div>`,20)]))}const u=s(n,[["render",l]]);export{c as __pageData,u as default};
