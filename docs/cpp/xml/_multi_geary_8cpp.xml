<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_multi_geary_8cpp" kind="file" language="C++">
    <compoundname>MultiGeary.cpp</compoundname>
    <includes refid="_multi_geary_8h" local="yes">MultiGeary.h</includes>
    <includes refid="geoda-weight_8h" local="yes">weights/geoda-weight.h</includes>
    <includes refid="data_8h" local="yes">utils/data.h</includes>
    <incdepgraph>
      <node id="5">
        <label>LISA.h</label>
        <link refid="_l_i_s_a_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/xun/github/geoda-lib/src/cpp/lisa/MultiGeary.cpp</label>
        <link refid="_multi_geary_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>MultiGeary.h</label>
        <link refid="_multi_geary_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>utils/data.h</label>
        <link refid="data_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>weights/geoda-weight.h</label>
        <link refid="geoda-weight_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>algorithm</label>
      </node>
      <node id="6">
        <label>cstdint</label>
      </node>
      <node id="12">
        <label>iostream</label>
      </node>
      <node id="7">
        <label>list</label>
      </node>
      <node id="8">
        <label>map</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>Xun<sp/>Li<sp/>on<sp/>2019-12-01.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_multi_geary_8h" kindref="compound">MultiGeary.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="geoda-weight_8h" kindref="compound">weights/geoda-weight.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="data_8h" kindref="compound">utils/data.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><ref refid="class_multi_geary_1a213a6ac5c0264995a0df55e317aeb44d" kindref="member">MultiGeary::MultiGeary</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_obs,<sp/><ref refid="class_geo_da_weight" kindref="compound">GeoDaWeight</ref>*<sp/>w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;double&gt;<sp/>&gt;&amp;<sp/>_data,</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;bool&gt;<sp/>&gt;&amp;<sp/>_undefs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>significance_cutoff,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_nCPUs,</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_perm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>_permutation_method,<sp/>uint64_t<sp/>_last_seed)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_l_i_s_a" kindref="compound">LISA</ref>(num_obs,<sp/>w,<sp/>_undefs,<sp/>significance_cutoff,<sp/>_nCPUs,<sp/>_perm,<sp/>_permutation_method,<sp/>_last_seed),</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CLUSTER_NOT_SIG(0),</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CLUSTER_POSITIVE(1),</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CLUSTER_NEGATIVE(2),</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CLUSTER_UNDEFINED(3),</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CLUSTER_NEIGHBORLESS(4),</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data(_data)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>labels.push_back(</highlight><highlight class="stringliteral">&quot;Not<sp/>significant&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>labels.push_back(</highlight><highlight class="stringliteral">&quot;Positive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>labels.push_back(</highlight><highlight class="stringliteral">&quot;Negative&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>labels.push_back(</highlight><highlight class="stringliteral">&quot;Undefined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>labels.push_back(</highlight><highlight class="stringliteral">&quot;Isolated&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>colors.push_back(</highlight><highlight class="stringliteral">&quot;#eeeeee&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>colors.push_back(</highlight><highlight class="stringliteral">&quot;#336ea1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>colors.push_back(</highlight><highlight class="stringliteral">&quot;#67adc7&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>colors.push_back(</highlight><highlight class="stringliteral">&quot;#464646&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>colors.push_back(</highlight><highlight class="stringliteral">&quot;#999999&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>std::vector&lt;bool&gt;<sp/>undef_merge(num_obs,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_undefs.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_obs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>_undefs.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_undefs[j].size()<sp/>&gt;=<sp/>num_obs)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>undef_merge[i]<sp/>=<sp/>undef_merge[i]<sp/>||<sp/>_undefs[j][i];</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>undefs<sp/>=<sp/>undef_merge;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>num_vars<sp/>=<sp/>data.size();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_vars;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>geoda::standardize_data(data[i],<sp/>undefs);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>data_square.resize(num_vars);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_vars;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>data_square[i].resize(num_obs);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num_obs;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_square[i][j]<sp/>=<sp/>data[i][j]<sp/>*<sp/>data[i][j];</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>Run();</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="class_multi_geary_1acbc14724e3c16e3844e289377be58421" kindref="member">MultiGeary::~MultiGeary</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_multi_geary_1add14ef4c8ad22369eb78de39e7ecaba3" kindref="member">MultiGeary::ComputeLoalSA</ref>()<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_l_i_s_a_1af36658ec6c5e572b2c131d897220a81e" kindref="member">undefs</ref>[i]<sp/>||<sp/><ref refid="class_l_i_s_a_1a3f6524f9d4aa8e8a5d92bccc5a10a46f" kindref="member">weights</ref>-&gt;IsMasked(i)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1a1842b85ffe20032c9fc14bb7734d946c" kindref="member">lag_vec</ref>[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1a6a3eb34950154b54aa38cdb06e035bd5" kindref="member">lisa_vec</ref>[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1aafcd78acbda90794728597a5262bf4f5" kindref="member">cluster_vec</ref>[i]<sp/>=<sp/>CLUSTER_UNDEFINED;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_l_i_s_a_1a3f6524f9d4aa8e8a5d92bccc5a10a46f" kindref="member">weights</ref>-&gt;GetNbrSize(i)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1aafcd78acbda90794728597a5262bf4f5" kindref="member">cluster_vec</ref>[i]<sp/>=<sp/>CLUSTER_NEIGHBORLESS;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>0;<sp/>v<sp/>&lt;<sp/><ref refid="class_multi_geary_1aa42deb4e42f690842d132f72ad34bf5e" kindref="member">num_vars</ref>;<sp/>v++)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>computer<sp/>spatial<sp/>lag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sp_lag<sp/>=<sp/>0,<sp/>sp_lag_square<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>int&gt;&amp;<sp/>nbrs<sp/>=<sp/><ref refid="class_l_i_s_a_1a3f6524f9d4aa8e8a5d92bccc5a10a46f" kindref="member">weights</ref>-&gt;GetNeighbors(i);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nbrs.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbrs[j]<sp/>!=<sp/>i<sp/>&amp;&amp;<sp/>!<ref refid="class_l_i_s_a_1af36658ec6c5e572b2c131d897220a81e" kindref="member">undefs</ref>[nbrs[j]])<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>including<sp/>the<sp/>value<sp/>at<sp/>the<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp_lag<sp/>+=<sp/><ref refid="class_multi_geary_1a5142955ff24e79f1fa82c6477ce0b41c" kindref="member">data</ref>[v][nbrs[j]];</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp_lag_square<sp/>+=<sp/><ref refid="class_multi_geary_1a4dbf29ab15074419a5b8c341b4a77da2" kindref="member">data_square</ref>[v][nbrs[j]];</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nn<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp_lag<sp/>=<sp/>sp_lag<sp/>/<sp/>nn;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp_lag_square<sp/>=<sp/>sp_lag_square<sp/>/<sp/>nn;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>geary&apos;s<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1a1842b85ffe20032c9fc14bb7734d946c" kindref="member">lag_vec</ref>[i]<sp/>=<sp/>sp_lag;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1a6a3eb34950154b54aa38cdb06e035bd5" kindref="member">lisa_vec</ref>[i]<sp/>+=<sp/><ref refid="class_multi_geary_1a4dbf29ab15074419a5b8c341b4a77da2" kindref="member">data_square</ref>[v][i]<sp/>-<sp/>2.0<sp/>*<sp/><ref refid="class_multi_geary_1a5142955ff24e79f1fa82c6477ce0b41c" kindref="member">data</ref>[v][i]<sp/>*<sp/>sp_lag<sp/>+<sp/>sp_lag_square;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1a1842b85ffe20032c9fc14bb7734d946c" kindref="member">lag_vec</ref>[i]<sp/>/=<sp/><ref refid="class_multi_geary_1aa42deb4e42f690842d132f72ad34bf5e" kindref="member">num_vars</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1a6a3eb34950154b54aa38cdb06e035bd5" kindref="member">lisa_vec</ref>[i]<sp/>/=<sp/><ref refid="class_multi_geary_1aa42deb4e42f690842d132f72ad34bf5e" kindref="member">num_vars</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assign<sp/>the<sp/>cluster<sp/>not<sp/>here<sp/>but<sp/>after<sp/>permutation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_multi_geary_1ae536ed401ab78643bbeb7649e5b771eb" kindref="member">MultiGeary::PermLocalSA</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>perm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numNeighbors,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>permNeighbors,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;&amp;<sp/>permutedSA)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>validNeighbors<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>permutation<sp/>to<sp/>compute<sp/>the<sp/>lag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>lag<sp/>for<sp/>binary<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>permutedLag(<ref refid="class_multi_geary_1aa42deb4e42f690842d132f72ad34bf5e" kindref="member">num_vars</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>permutedLagSquare(<ref refid="class_multi_geary_1aa42deb4e42f690842d132f72ad34bf5e" kindref="member">num_vars</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>numNeighbors;<sp/>cp++)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb<sp/>=<sp/>permNeighbors[cp];</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nb<sp/>&gt;=<sp/>cnt)<sp/>nb<sp/>=<sp/>nb<sp/>+<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>self<sp/>&quot;cnt&quot;<sp/>should<sp/>be<sp/>excluded,<sp/>index<sp/>should<sp/>be<sp/>adjusted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_l_i_s_a_1af36658ec6c5e572b2c131d897220a81e" kindref="member">undefs</ref>[nb])<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>validNeighbors++;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>0;<sp/>v<sp/>&lt;<sp/><ref refid="class_multi_geary_1aa42deb4e42f690842d132f72ad34bf5e" kindref="member">num_vars</ref>;<sp/>v++)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>permutedLag[v]<sp/>+=<sp/><ref refid="class_multi_geary_1a5142955ff24e79f1fa82c6477ce0b41c" kindref="member">data</ref>[v][nb];</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>permutedLagSquare[v]<sp/>+=<sp/><ref refid="class_multi_geary_1a4dbf29ab15074419a5b8c341b4a77da2" kindref="member">data_square</ref>[v][nb];</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>we<sp/>shouldn&apos;t<sp/>have<sp/>to<sp/>row-standardize<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>multiply<sp/>by<sp/>data1[cnt]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(validNeighbors<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/><ref refid="class_l_i_s_a_1ad0d3a85084f836c14ac292dd783cc617" kindref="member">row_standardize</ref>)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>0;<sp/>v<sp/>&lt;<sp/><ref refid="class_multi_geary_1aa42deb4e42f690842d132f72ad34bf5e" kindref="member">num_vars</ref>;<sp/>v++)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>permutedLag[v]<sp/>/=<sp/>validNeighbors;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>permutedLagSquare[v]<sp/>/=<sp/>validNeighbors;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>localGearyPermuted<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>0;<sp/>v<sp/>&lt;<sp/><ref refid="class_multi_geary_1aa42deb4e42f690842d132f72ad34bf5e" kindref="member">num_vars</ref>;<sp/>v++)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>localGearyPermuted<sp/>+=<sp/><ref refid="class_multi_geary_1a4dbf29ab15074419a5b8c341b4a77da2" kindref="member">data_square</ref>[v][cnt]<sp/>-<sp/>2.0<sp/>*<sp/><ref refid="class_multi_geary_1a5142955ff24e79f1fa82c6477ce0b41c" kindref="member">data</ref>[v][cnt]<sp/>*<sp/>permutedLag[v]<sp/>+<sp/>permutedLagSquare[v];</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>localGearyPermuted<sp/>/=<sp/><ref refid="class_multi_geary_1aa42deb4e42f690842d132f72ad34bf5e" kindref="member">num_vars</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>permutedSA[perm]<sp/>=<sp/>localGearyPermuted;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_multi_geary_1ae536ed401ab78643bbeb7649e5b771eb" kindref="member">MultiGeary::PermLocalSA</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>perm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/>permNeighbors,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;&amp;<sp/>permutedSA)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>validNeighbors<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numNeighbors<sp/>=<sp/>permNeighbors.size();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>permutation<sp/>to<sp/>compute<sp/>the<sp/>lag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>lag<sp/>for<sp/>binary<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>permutedLag(<ref refid="class_multi_geary_1aa42deb4e42f690842d132f72ad34bf5e" kindref="member">num_vars</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>permutedLagSquare(<ref refid="class_multi_geary_1aa42deb4e42f690842d132f72ad34bf5e" kindref="member">num_vars</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>numNeighbors;<sp/>cp++)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb<sp/>=<sp/>permNeighbors[cp];</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_l_i_s_a_1af36658ec6c5e572b2c131d897220a81e" kindref="member">undefs</ref>[nb])<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>validNeighbors++;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>0;<sp/>v<sp/>&lt;<sp/><ref refid="class_multi_geary_1aa42deb4e42f690842d132f72ad34bf5e" kindref="member">num_vars</ref>;<sp/>v++)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>permutedLag[v]<sp/>+=<sp/><ref refid="class_multi_geary_1a5142955ff24e79f1fa82c6477ce0b41c" kindref="member">data</ref>[v][nb];</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>permutedLagSquare[v]<sp/>+=<sp/><ref refid="class_multi_geary_1a4dbf29ab15074419a5b8c341b4a77da2" kindref="member">data_square</ref>[v][nb];</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>we<sp/>shouldn&apos;t<sp/>have<sp/>to<sp/>row-standardize<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>multiply<sp/>by<sp/>data1[cnt]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(validNeighbors<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/><ref refid="class_l_i_s_a_1ad0d3a85084f836c14ac292dd783cc617" kindref="member">row_standardize</ref>)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>0;<sp/>v<sp/>&lt;<sp/><ref refid="class_multi_geary_1aa42deb4e42f690842d132f72ad34bf5e" kindref="member">num_vars</ref>;<sp/>v++)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>permutedLag[v]<sp/>/=<sp/>validNeighbors;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>permutedLagSquare[v]<sp/>/=<sp/>validNeighbors;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>localGearyPermuted<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>0;<sp/>v<sp/>&lt;<sp/><ref refid="class_multi_geary_1aa42deb4e42f690842d132f72ad34bf5e" kindref="member">num_vars</ref>;<sp/>v++)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>localGearyPermuted<sp/>+=<sp/><ref refid="class_multi_geary_1a4dbf29ab15074419a5b8c341b4a77da2" kindref="member">data_square</ref>[v][cnt]<sp/>-<sp/>2.0<sp/>*<sp/><ref refid="class_multi_geary_1a5142955ff24e79f1fa82c6477ce0b41c" kindref="member">data</ref>[v][cnt]<sp/>*<sp/>permutedLag[v]<sp/>+<sp/>permutedLagSquare[v];</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>localGearyPermuted<sp/>/=<sp/><ref refid="class_multi_geary_1aa42deb4e42f690842d132f72ad34bf5e" kindref="member">num_vars</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>permutedSA[perm]<sp/>=<sp/>localGearyPermuted;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">uint64_t<sp/><ref refid="class_multi_geary_1ab0c5dbb73cc3fcf2664013ce869dfc60" kindref="member">MultiGeary::CountLargerSA</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>permutedSA)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>permGearySum<sp/>=<sp/>0,<sp/>permGearyMean<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>permGearySum<sp/>+=<sp/>permutedSA[i];</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>permGearyMean<sp/>=<sp/>permGearySum<sp/>/<sp/><ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>uint64_t<sp/>countLarger<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_l_i_s_a_1a6a3eb34950154b54aa38cdb06e035bd5" kindref="member">lisa_vec</ref>[cnt]<sp/>&lt;=<sp/>permGearyMean)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>positive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(permutedSA[i]<sp/>&lt;=<sp/><ref refid="class_l_i_s_a_1a6a3eb34950154b54aa38cdb06e035bd5" kindref="member">lisa_vec</ref>[cnt])<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>countLarger<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ignore<sp/>neighborless<sp/>&amp;<sp/>undefined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="class_l_i_s_a_1aafcd78acbda90794728597a5262bf4f5" kindref="member">cluster_vec</ref>[cnt]<sp/>&lt;<sp/>CLUSTER_UNDEFINED)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1aafcd78acbda90794728597a5262bf4f5" kindref="member">cluster_vec</ref>[cnt]<sp/>=<sp/>CLUSTER_POSITIVE;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>negative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(permutedSA[i]<sp/>&gt;<sp/><ref refid="class_l_i_s_a_1a6a3eb34950154b54aa38cdb06e035bd5" kindref="member">lisa_vec</ref>[cnt])<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>countLarger<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="class_l_i_s_a_1aafcd78acbda90794728597a5262bf4f5" kindref="member">cluster_vec</ref>[cnt]<sp/>&lt;<sp/>CLUSTER_UNDEFINED)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1aafcd78acbda90794728597a5262bf4f5" kindref="member">cluster_vec</ref>[cnt]<sp/>=<sp/>CLUSTER_NEGATIVE;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>countLarger;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="class_multi_geary_1a1c135d0f4603fde1f9275be1f11c0caf" kindref="member">MultiGeary::GetClusterIndicators</ref>()<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>clusters(<ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref>);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cuttoff<sp/>=<sp/><ref refid="class_l_i_s_a_1a4a4972b885f39d697d4c3b21c617bde6" kindref="member">GetSignificanceCutoff</ref>();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_l_i_s_a_1a4cebb360265b00834131007f766f8888" kindref="member">sig_local_vec</ref>[i]<sp/>&gt;<sp/>cuttoff<sp/>&amp;&amp;<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="class_l_i_s_a_1aafcd78acbda90794728597a5262bf4f5" kindref="member">cluster_vec</ref>[i]<sp/>!=<sp/>CLUSTER_UNDEFINED<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="class_l_i_s_a_1aafcd78acbda90794728597a5262bf4f5" kindref="member">cluster_vec</ref>[i]<sp/>!=<sp/>CLUSTER_NEIGHBORLESS)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusters[i]<sp/>=<sp/>CLUSTER_NOT_SIG;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clusters[i]<sp/>=<sp/><ref refid="class_l_i_s_a_1aafcd78acbda90794728597a5262bf4f5" kindref="member">cluster_vec</ref>[i];</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clusters;</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/xun/github/geoda-lib/src/cpp/lisa/MultiGeary.cpp"/>
  </compounddef>
</doxygen>
