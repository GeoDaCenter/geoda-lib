<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_m_l__im_8cpp" kind="file" language="C++">
    <compoundname>ML_im.cpp</compoundname>
    <includes refid="_m_l__im_8h" local="yes">regression/ML_im.h</includes>
    <includes local="no">blaswrap.h</includes>
    <includes local="no">f2c.h</includes>
    <includes local="no">time.h</includes>
    <includes refid="_power_lag_8h" local="yes">regression/PowerLag.h</includes>
    <includes refid="regression_2_weights_8h" local="yes">regression/Weights.h</includes>
    <includes refid="lite2_8h" local="yes">regression/lite2.h</includes>
    <includes refid="mix_8h" local="yes">regression/mix.h</includes>
    <includes refid="polym_8h" local="yes">regression/polym.h</includes>
    <includes refid="reg-utils_8h" local="yes">regression/reg-utils.h</includes>
    <incdepgraph>
      <node id="21">
        <label>geometry/geometry.h</label>
        <link refid="geometry_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>Link.h</label>
        <link refid="_link_8h"/>
      </node>
      <node id="1">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp</label>
        <link refid="_m_l__im_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>regression/ML_im.h</label>
        <link refid="_m_l__im_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>regression/PowerLag.h</label>
        <link refid="_power_lag_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>regression/PowerSymLag.h</label>
        <link refid="_power_sym_lag_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>regression/SparseMatrix.h</label>
        <link refid="_sparse_matrix_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>regression/SparseRow.h</label>
        <link refid="_sparse_row_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>SparseVector.h</label>
        <link refid="_sparse_vector_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>regression/Weights.h</label>
        <link refid="regression_2_weights_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>regression/dense-vector.h</label>
        <link refid="dense-vector_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>regression/diagnostic-report.h</label>
        <link refid="diagnostic-report_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>regression/lite2.h</label>
        <link refid="lite2_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>regression/mix.h</label>
        <link refid="mix_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>regression/polym.h</label>
        <link refid="polym_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>regression/reg-utils.h</label>
        <link refid="reg-utils_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>weights/gal.h</label>
        <link refid="gal_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>weights/weights.h</label>
        <link refid="weights_2_weights_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>algorithm</label>
      </node>
      <node id="27">
        <label>blaswrap.h</label>
      </node>
      <node id="22">
        <label>boost/geometry.hpp</label>
      </node>
      <node id="33">
        <label>cmath</label>
      </node>
      <node id="28">
        <label>f2c.h</label>
      </node>
      <node id="15">
        <label>fstream</label>
      </node>
      <node id="18">
        <label>functional</label>
      </node>
      <node id="16">
        <label>iostream</label>
      </node>
      <node id="23">
        <label>limits</label>
      </node>
      <node id="4">
        <label>list</label>
      </node>
      <node id="19">
        <label>map</label>
      </node>
      <node id="14">
        <label>math.h</label>
      </node>
      <node id="26">
        <label>ostream</label>
      </node>
      <node id="5">
        <label>set</label>
      </node>
      <node id="24">
        <label>string</label>
      </node>
      <node id="29">
        <label>time.h</label>
      </node>
      <node id="6">
        <label>utility</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_trace_proxy" prot="public">TraceProxy</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="_m_l__im_8cpp_1ab319cb41d2e6faf11ec8cfbc3e291967" prot="public" static="no">
        <name>tol</name>
        <initializer>1e-14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="34" column="9" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" prot="public" static="no">
        <name>geoda_sqr</name>
        <param><defname>x</defname></param>
        <initializer>((x) * (x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="36" column="9" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="_m_l__im_8cpp_1a032d14e2ba792af7b5338313223b20bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dgesvd_</definition>
        <argsstring>(char *jobu, char *jobvt, integer *m, integer *n, doublereal *a, integer *lda, doublereal *s, doublereal *u, integer *ldu, doublereal *vt, integer *ldvt, doublereal *work, integer *lwork, integer *info)</argsstring>
        <name>dgesvd_</name>
        <param>
          <type>char *</type>
          <declname>jobu</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>jobvt</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>u</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>ldu</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>vt</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>ldvt</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>lwork</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="23" column="16" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" declline="23" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1aa4fb43aa911fe694869514f2deb12656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dspev_</definition>
        <argsstring>(char *jobz, char *uplo, integer *n, doublereal *ap, doublereal *w, doublereal *z__, integer *ldz, doublereal *work, integer *info)</argsstring>
        <name>dspev_</name>
        <param>
          <type>char *</type>
          <declname>jobz</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>uplo</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>ap</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>z__</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>ldz</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="26" column="16" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" declline="26" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1adaf8fb43cda3487b6e45ec7db320acb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dgeev_</definition>
        <argsstring>(char *jobvl, char *jobvr, integer *n, doublereal *a, integer *lda, doublereal *wr, doublereal *wi, doublereal *vl, integer *ldvl, doublereal *vr, integer *ldvr, doublereal *work, integer *lwork, integer *info)</argsstring>
        <name>dgeev_</name>
        <param>
          <type>char *</type>
          <declname>jobvl</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>jobvr</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>wr</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>wi</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>vl</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>ldvl</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>vr</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>ldvr</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>lwork</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="28" column="16" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" declline="28" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1ab7664b32c8621ec1c9c667ef4d684e6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dgesv_</definition>
        <argsstring>(integer *n, integer *nrhs, doublereal *a, integer *lda, integer *ipiv, doublereal *b, integer *ldb, integer *info)</argsstring>
        <name>dgesv_</name>
        <param>
          <type>integer *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>nrhs</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>ipiv</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>ldb</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="31" column="16" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" declline="31" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a4448d994c19ae3fab55021875cfd8915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref></type>
        <definition>T PolyValue</definition>
        <argsstring>(Iterator&lt; T &gt; poly, const T at)</argsstring>
        <name>PolyValue</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> &gt;</type>
          <declname>poly</declname>
        </param>
        <param>
          <type>const <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref></type>
          <declname>at</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="46" column="3" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="46" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1aefad9eefc3351192c32381d621ad8df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IT</type>
          </param>
        </templateparamlist>
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE AddUp</definition>
        <argsstring>(Iterator&lt; IT &gt; it)</argsstring>
        <name>AddUp</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; IT &gt;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="61" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1aec803f52a1f99bca131465a6ac8a9496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RowStandardize</definition>
        <argsstring>(Iterator&lt; WMap &gt; mt)</argsstring>
        <name>RowStandardize</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="72" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="72" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a0ba1cbef0434acc1fc69b6771d326584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RowStandardize</definition>
        <argsstring>(Iterator&lt; WVector &gt; it)</argsstring>
        <name>RowStandardize</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="83" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="83" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1af2e06461ff02af9052e4729c5cd10e77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE OnePoly</definition>
        <argsstring>(Iterator&lt; V &gt; Poly, const VALUE Val, const INDEX Prec, INDEX Pr)</argsstring>
        <name>OnePoly</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; V &gt;</type>
          <declname>Poly</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>Val</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>Prec</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>Pr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="100" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="100" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1aaf101927b61866e6759f4edebf35eec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CrossConditioning</definition>
        <argsstring>(Iterator&lt; IT &gt; row, VALUE rowSqrtSum, Iterator&lt; VALUE &gt; sqrtSums)</argsstring>
        <name>CrossConditioning</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; IT &gt;</type>
          <declname>row</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>rowSqrtSum</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref> &gt;</type>
          <declname>sqrtSums</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="155" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="155" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1ab0735ed95691939f1aa598b336ed74ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MakeSym</definition>
        <argsstring>(Iterator&lt; WMap &gt; it)</argsstring>
        <name>MakeSym</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="164" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="164" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a928f120e05a59093852132b5168d27b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MakeSym</definition>
        <argsstring>(Iterator&lt; WVector &gt; it)</argsstring>
        <name>MakeSym</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="183" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="183" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1aa67f10a2ae8018cede54e0a81d628ec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Estimate</definition>
        <argsstring>(Iterator&lt; WVector &gt; Poly, const double val, const INDEX Prec, const INDEX np)</argsstring>
        <name>Estimate</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>Poly</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>Prec</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>np</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="227" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="227" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a5f913f502cd8cade20242714222bfb3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double PrimeEstimate</definition>
        <argsstring>(Iterator&lt; WVector &gt; Poly, const double val, const INDEX Prec, const INDEX np)</argsstring>
        <name>PrimeEstimate</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>Poly</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>Prec</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>np</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="248" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="248" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a73042642d12eec3b5299af5131c1ee83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double MakeEstimate</definition>
        <argsstring>(Iterator&lt; WVector &gt; Poly, const double val, const INDEX Prec)</argsstring>
        <name>MakeEstimate</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>Poly</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>Prec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="265" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="265" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a4b4a023935aa24903f8109c278f1ef82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double MakePrimeEstimate</definition>
        <argsstring>(Iterator&lt; WVector &gt; Poly, const double val, const INDEX Prec)</argsstring>
        <name>MakePrimeEstimate</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>Poly</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>Prec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="286" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="286" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1ac2d128434892366ce8c340419542bc77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EasyMatInverse</definition>
        <argsstring>(Iterator&lt; WVector &gt; mt)</argsstring>
        <name>EasyMatInverse</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="307" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="307" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1aa22efc9e441d13872b65fc00e62919b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ScalProd</definition>
        <argsstring>(const CNT stop, Iterator&lt; VALUE &gt; v1, Iterator&lt; VALUE &gt; v2, const VALUE t=1)</argsstring>
        <name>ScalProd</name>
        <param>
          <type>const <ref refid="lite2_8h_1a6a4288add566c8d9c96f7cb0dc661c66" kindref="member">CNT</ref></type>
          <declname>stop</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref> &gt;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref> &gt;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>t</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="337" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="337" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a42eec7d171cea5f83780ec10e12ba347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ScalProd1</definition>
        <argsstring>(const CNT start, const CNT stop, Iterator&lt; VALUE &gt; v1, Iterator&lt; VALUE &gt; v2)</argsstring>
        <name>ScalProd1</name>
        <param>
          <type>const <ref refid="lite2_8h_1a6a4288add566c8d9c96f7cb0dc661c66" kindref="member">CNT</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1a6a4288add566c8d9c96f7cb0dc661c66" kindref="member">CNT</ref></type>
          <declname>stop</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref> &gt;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref> &gt;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="346" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="346" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a701853400c30a775a29c855fec54a7d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ScalProd2</definition>
        <argsstring>(const CNT start, const CNT stop, Iterator&lt; VALUE &gt; v1, Iterator&lt; VALUE &gt; v2, Iterator&lt; VALUE &gt; diag, const CNT first)</argsstring>
        <name>ScalProd2</name>
        <param>
          <type>const <ref refid="lite2_8h_1a6a4288add566c8d9c96f7cb0dc661c66" kindref="member">CNT</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1a6a4288add566c8d9c96f7cb0dc661c66" kindref="member">CNT</ref></type>
          <declname>stop</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref> &gt;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref> &gt;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref> &gt;</type>
          <declname>diag</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1a6a4288add566c8d9c96f7cb0dc661c66" kindref="member">CNT</ref></type>
          <declname>first</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="355" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="355" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a8d6c7b80b63056009958afd0f1647aea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SymMatInverse</definition>
        <argsstring>(Iterator&lt; WVector &gt; mt)</argsstring>
        <name>SymMatInverse</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="368" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="368" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a0e6ba3407ce16d9ba5faf0562f4ea909" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void computeRotation</definition>
        <argsstring>(const double v, const double t, double &amp;c, double &amp;s, double &amp;rotation)</argsstring>
        <name>computeRotation</name>
        <param>
          <type>const double</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>t</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>rotation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="462" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="462" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1aa65a3c42e72b1d6b5080f8658ad71594" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Rotation</definition>
        <argsstring>(const double &amp;c, const double &amp;s, double &amp;t, double &amp;v)</argsstring>
        <name>Rotation</name>
        <param>
          <type>const double &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="481" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="481" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1ae8004456ab67da1f6b8794ac1f069d94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void QL_with_Shift</definition>
        <argsstring>(double *d, double *e, const int dim)</argsstring>
        <name>QL_with_Shift</name>
        <param>
          <type>double *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="497" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="497" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a8e62463b27e3f4681eb56667556cb338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double normalize</definition>
        <argsstring>(WIterator arow, double &amp;OD, const int row)</argsstring>
        <name>normalize</name>
        <param>
          <type><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref></type>
          <declname>arow</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>OD</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>row</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="534" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="534" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a5c41673ce68c5cc9b0a374ca8b1087d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void householder</definition>
        <argsstring>(Iterator&lt; WVector &gt; a, double *diag, double *off)</argsstring>
        <name>householder</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>diag</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>off</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="558" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="558" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpatialLag</definition>
        <argsstring>(Iterator&lt; WMap &gt; mt, const WIterator v, WVector &amp;lag, bool need_std=false)</argsstring>
        <name>SpatialLag</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>lag</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>need_std</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="594" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="594" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a6290b817d96a6c9e03cec771d164eab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpatialLag</definition>
        <argsstring>(Iterator&lt; WVector &gt; mt, const WIterator v, WVector &amp;lag, bool need_std=false)</argsstring>
        <name>SpatialLag</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>lag</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>need_std</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="608" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="608" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1ab39422ab319f03f4701d34ca93f120d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpatialLag</definition>
        <argsstring>(Iterator&lt; WMap &gt; mt, Iterator&lt; WVector &gt; var, WMatrix &amp;lag)</argsstring>
        <name>SpatialLag</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref> &amp;</type>
          <declname>lag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="620" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="620" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a3875458079774c1b3fbd9423c4aee7fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SpatialLag</definition>
        <argsstring>(Iterator&lt; WVector &gt; mt, Iterator&lt; WVector &gt; var, WMatrix &amp;lag)</argsstring>
        <name>SpatialLag</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref> &amp;</type>
          <declname>lag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="635" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="635" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a1d81280768a70e67bf08d193ca3e7ff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copy</definition>
        <argsstring>(GWT &amp;dst, Iterator&lt; WMap &gt; from)</argsstring>
        <name>copy</name>
        <param>
          <type><ref refid="lite2_8h_1a4c7688b643a08fd9b048deecbb9376b5" kindref="member">GWT</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="650" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="650" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a2f0de7b6fef79fe20ee936a639e8209b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copy</definition>
        <argsstring>(WMatrix &amp;dst, Iterator&lt; WVector &gt; src)</argsstring>
        <name>copy</name>
        <param>
          <type><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="662" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="662" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1ad47a3573d1fdbae618bb0f49823c1cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE norm</definition>
        <argsstring>(WIterator it)</argsstring>
        <name>norm</name>
        <param>
          <type><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref></type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="674" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="674" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a3228ba56da48a112a3bf6dd2de5010a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE CL</definition>
        <argsstring>(WVector &amp;resid, WVector &amp;residW, const VALUE rho)</argsstring>
        <name>CL</name>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>residW</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>rho</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="697" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="697" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1af3e9cb5124589d163810a05ee5f27f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _minus</definition>
        <argsstring>(WIterator a, WIterator b, WVector &amp;r, const VALUE s)</argsstring>
        <name>_minus</name>
        <param>
          <type><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="721" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="721" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a1583820052bf7f5a9877f40faf7af7f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _minus</definition>
        <argsstring>(Iterator&lt; WVector &gt; a, Iterator&lt; WVector &gt; b, WMatrix &amp;m, const VALUE s)</argsstring>
        <name>_minus</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="727" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="727" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SHFT</definition>
        <argsstring>(double &amp;a, double &amp;b, double &amp;c, const double d)</argsstring>
        <name>SHFT</name>
        <param>
          <type>double &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="742" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="742" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a4f27f4442588a617c6827221c58ba571" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE ErrorLogLikelihood</definition>
        <argsstring>(Iterator&lt; WVector &gt; X, Iterator&lt; WVector &gt; lagX, WIterator y, WIterator lagY, Iterator&lt; WMap &gt; W, const VALUE lambda, WVector &amp;egls)</argsstring>
        <name>ErrorLogLikelihood</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>X</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>lagX</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref></type>
          <declname>lagY</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>lambda</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>egls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="748" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="748" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a1ecfa9a8dcfa20b0d87a4af9b67d410e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double findQuadMax</definition>
        <argsstring>(double x0, double f0, double x1, double f1, double x2, double f2)</argsstring>
        <name>findQuadMax</name>
        <param>
          <type>double</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>f0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="794" column="15" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="794" bodyend="807"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a989906d9e9a98c70247eca51ae349802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE GoldenSectionError</definition>
        <argsstring>(const VALUE left, const VALUE middle, const VALUE right, const WMatrix &amp;X, const WVector &amp;y, Iterator&lt; WMap &gt; W, double *&amp;beta, double *LogLik)</argsstring>
        <name>GoldenSectionError</name>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>middle</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>right</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref> &amp;</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>LogLik</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="809" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="809" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a7d6e56be049abb29215a95db79361e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE GoldenSectionLag</definition>
        <argsstring>(const VALUE left, const VALUE middle, const VALUE right, WVector &amp;resid, WVector &amp;residW, double *LogLik)</argsstring>
        <name>GoldenSectionLag</name>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>middle</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>residW</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>LogLik</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="856" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="856" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a66634999cde8c7661b2290d2b21781b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE GoldenSection</definition>
        <argsstring>(const VALUE left, const VALUE middle, const VALUE right, WVector &amp;resid, WVector &amp;residW)</argsstring>
        <name>GoldenSection</name>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>middle</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>residW</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="891" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="891" bodyend="920"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a42ed51b282a7dc2debb70ac06ff49d4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double ComputeExtreme</definition>
        <argsstring>(const double d10, const double d12, const double f10, const double f12, const double x1)</argsstring>
        <name>ComputeExtreme</name>
        <param>
          <type>const double</type>
          <declname>d10</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>d12</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>f10</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>f12</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="922" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="922" bodyend="927"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1acbf6a14e6905563b12a6dc97c25781da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE Converge</definition>
        <argsstring>(const VALUE left, const VALUE middle, const VALUE right, WVector &amp;resid, WVector &amp;residW)</argsstring>
        <name>Converge</name>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>middle</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>residW</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="929" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="929" bodyend="956"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a2346a4b9eb9d0b67dc0ea3b55a5f4ff2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void skipTillNumber</definition>
        <argsstring>(std::ifstream &amp;f)</argsstring>
        <name>skipTillNumber</name>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="958" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="958" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1af02288015755b1e979a4f3bb8d229152" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int readInt</definition>
        <argsstring>(std::ifstream &amp;f)</argsstring>
        <name>readInt</name>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="965" column="5" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="965" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a5251df0586ef200d95eb1077961cfdae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double readDouble</definition>
        <argsstring>(std::ifstream &amp;f)</argsstring>
        <name>readDouble</name>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="972" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="972" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a608d31c4adfc5d8fe77dd197c5425a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void extract</definition>
        <argsstring>(const SparseVector &amp;v, const double *scale, const int row, double &amp;trace, double &amp;trace2, double &amp;frobenius)</argsstring>
        <name>extract</name>
        <param>
          <type>const <ref refid="class_sparse_vector" kindref="compound">SparseVector</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>trace</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>trace2</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>frobenius</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="979" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="979" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a7651afb1030bf91c7cc23611f242f3aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void extract</definition>
        <argsstring>(const DenseVector &amp;v, const double *scale, const int row, double &amp;trace, double &amp;trace2, double &amp;frobenius)</argsstring>
        <name>extract</name>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>trace</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>trace2</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>frobenius</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1014" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1014" bodyend="1024"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a38f0ff3f5dfcad26fe7d7e299c3577bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool EasyMatInverse</definition>
        <argsstring>(double **mt, const int dim)</argsstring>
        <name>EasyMatInverse</name>
        <param>
          <type>double **</type>
          <declname>mt</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1031" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1031" bodyend="1052"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a860cad05c9b433f4737a337ee7520786" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ScalProd</definition>
        <argsstring>(const int stop1, double *v1, double *v2, const double t=1)</argsstring>
        <name>ScalProd</name>
        <param>
          <type>const int</type>
          <declname>stop1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>t</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1054" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1054" bodyend="1059"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a67bbf7a6bac7fa44db21691b9e31ddbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ScalProd</definition>
        <argsstring>(const int stop1, double **v1, double *v2, const double t=1)</argsstring>
        <name>ScalProd</name>
        <param>
          <type>const int</type>
          <declname>stop1</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>t</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1061" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1061" bodyend="1066"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1acfaf0d4dd35a12e0ffe8ff4c5661addb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ScalProd1</definition>
        <argsstring>(const int start1, const int stop1, double *v1, double *v2)</argsstring>
        <name>ScalProd1</name>
        <param>
          <type>const int</type>
          <declname>start1</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>stop1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1068" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1068" bodyend="1073"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a824bcf72e037a232feefb1eafda4cf86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ScalProd2</definition>
        <argsstring>(const int start1, const int stop1, double *v1, double *v2, double *diag, const int first)</argsstring>
        <name>ScalProd2</name>
        <param>
          <type>const int</type>
          <declname>start1</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>stop1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>diag</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>first</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1075" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1075" bodyend="1083"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1aa446dfcfd6e04db8d3e63d8dcfa533c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CopyMatrix</definition>
        <argsstring>(double **m, double **&amp;a, int dim1, int dim2)</argsstring>
        <name>CopyMatrix</name>
        <param>
          <type>double **</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double **&amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1085" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1085" bodyend="1092"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a76b473e0366302665b03e4e01bade1b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CopyVector</definition>
        <argsstring>(double *&amp;a, double *b, long n)</argsstring>
        <name>CopyVector</name>
        <param>
          <type>double *&amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1094" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1094" bodyend="1097"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double sum</definition>
        <argsstring>(int stop, double v1[], double diag[])</argsstring>
        <name>sum</name>
        <param>
          <type>int</type>
          <declname>stop</declname>
        </param>
        <param>
          <type>double</type>
          <declname>v1</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>diag</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1099" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1099" bodyend="1103"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a7d8ae6baa031ab8e1679099711b30a52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void makeSum2</definition>
        <argsstring>(int stop, double v1[], double v2[], double diag[])</argsstring>
        <name>makeSum2</name>
        <param>
          <type>int</type>
          <declname>stop</declname>
        </param>
        <param>
          <type>double</type>
          <declname>v1</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>v2</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>diag</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1105" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1105" bodyend="1109"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a7e9ec726d6467bc73786883b4a6bb895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void product1</definition>
        <argsstring>(int start, int stop, double v1[], double v2[])</argsstring>
        <name>product1</name>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stop</declname>
        </param>
        <param>
          <type>double</type>
          <declname>v1</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>v2</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1111" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1111" bodyend="1115"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a8c334e2991e0c256106950e2a870ddff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void product2</definition>
        <argsstring>(int start, double v1[], double v2[], int first, double diag[], int dim)</argsstring>
        <name>product2</name>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>double</type>
          <declname>v1</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>v2</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>first</declname>
        </param>
        <param>
          <type>double</type>
          <declname>diag</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1117" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1117" bodyend="1122"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1aa32897d547b28fc5eeb64cca5ec114db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SymMatInverse</definition>
        <argsstring>(double **mt, const int dim)</argsstring>
        <name>SymMatInverse</name>
        <param>
          <type>double **</type>
          <declname>mt</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1128" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1128" bodyend="1162"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1ae2946e712283c04033621939490361d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SymMatInverse</definition>
        <argsstring>(double **mt, const int dim, double **&amp;cov)</argsstring>
        <name>SymMatInverse</name>
        <param>
          <type>double **</type>
          <declname>mt</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>double **&amp;</type>
          <declname>cov</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1164" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1164" bodyend="1199"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a34beccf854252b640ecf4ce44858a2b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void residual</definition>
        <argsstring>(const DenseVector &amp;rhs, const DenseVector *X, const DenseVector &amp;ols, DenseVector &amp;resid)</argsstring>
        <name>residual</name>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>ols</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1201" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1201" bodyend="1206"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a247512a5a9049afd6687fb9345caa411" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PrintCovariance</definition>
        <argsstring>(double **, int)</argsstring>
        <name>PrintCovariance</name>
        <param>
          <type>double **</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1207" column="13" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" declline="1207" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1abffb96af09f2ae3ec91960165c007bfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ordinaryLS</definition>
        <argsstring>(DenseVector &amp;y, DenseVector *X, double **&amp;cov, double *resid, DenseVector &amp;ols)</argsstring>
        <name>ordinaryLS</name>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>double **&amp;</type>
          <declname>cov</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>ols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1279" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1279" bodyend="1355"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a10f53eac8da8e4374949379bf09e8db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cg</definition>
        <argsstring>(const SparseMatrix &amp;m, const double rho, const DenseVector &amp;rhs, DenseVector &amp;sol)</argsstring>
        <name>cg</name>
        <param>
          <type>const <ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1357" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1357" bodyend="1383"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a16a2871850579c50c59f9c8e175c2a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double log_likelihood</definition>
        <argsstring>(double ss, int n)</argsstring>
        <name>log_likelihood</name>
        <param>
          <type>double</type>
          <declname>ss</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1385" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1385" bodyend="1390"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a0733077df54dcde8df563ac2f8ef45bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Lc</definition>
        <argsstring>(const double *resid, const double *residW, const SparseMatrix &amp;w, const double rho, DenseVector &amp;sol, const DenseVector &amp;y, const DenseVector &amp;lag)</argsstring>
        <name>Lc</name>
        <param>
          <type>const double *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>residW</declname>
        </param>
        <param>
          <type>const <ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>lag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1392" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1392" bodyend="1428"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a46dcc3982b60ae746550609436706c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double LcPrime</definition>
        <argsstring>(const DenseVector &amp;v, const double *residW, const SparseMatrix &amp;w, const double rho)</argsstring>
        <name>LcPrime</name>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>residW</declname>
        </param>
        <param>
          <type>const <ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1430" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1430" bodyend="1439"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a8d7ecde547bbec9b4b6feceb8aa839b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void run1</definition>
        <argsstring>(SparseMatrix &amp;w, const double rr, double &amp;trace, double &amp;trace2, double &amp;frobenius, double p_bar_min_fraction, double p_bar_max_fraction)</argsstring>
        <name>run1</name>
        <param>
          <type><ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rr</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>trace</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>trace2</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>frobenius</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p_bar_min_fraction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p_bar_max_fraction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1441" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1441" bodyend="1513"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a849c08919ceff3ca162266cb1e058e5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE ECL</definition>
        <argsstring>(WVector &amp;resid, WVector &amp;residW, const VALUE rho, const double *d)</argsstring>
        <name>ECL</name>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>residW</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>rho</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1522" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1522" bodyend="1541"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1afaf2adc98949bfedaaf8ee9473ec1529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE ECL</definition>
        <argsstring>(WVector &amp;resid, WVector &amp;residW, const VALUE rho, const double *wr, const double *wi)</argsstring>
        <name>ECL</name>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>residW</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>rho</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>wr</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>wi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1550" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1550" bodyend="1573"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1aec3ac0d6cfcde3fd06b03a52df7de98d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE SmallGoldenSectionLag</definition>
        <argsstring>(const VALUE left, const VALUE middle, const VALUE right, WVector &amp;resid, WVector &amp;residW, const double *d, double *LogLik)</argsstring>
        <name>SmallGoldenSectionLag</name>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>middle</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>residW</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>LogLik</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1575" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1575" bodyend="1607"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a3fe4a7261c4a3233af2592b8e676aecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE SmallGoldenSectionLag</definition>
        <argsstring>(const VALUE left, const VALUE middle, const VALUE right, WVector &amp;resid, WVector &amp;residW, const double *wr, const double *wi, double *LogLik)</argsstring>
        <name>SmallGoldenSectionLag</name>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>middle</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>right</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>residW</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>wr</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>wi</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>LogLik</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1609" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1609" bodyend="1641"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a8d829009535a12b74fe847bd4a5589aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double SmallSimulationLag</definition>
        <argsstring>(Weights &amp;W, int num_obs, const double rho, double *my_Y, double **my_X, const int deps, bool InclConstant, double *LogLik, bool asym, double p_bar_min_fraction, double p_bar_max_fraction)</argsstring>
        <name>SmallSimulationLag</name>
        <param>
          <type><ref refid="class_weights" kindref="compound">Weights</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_obs</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>my_Y</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>my_X</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>deps</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>InclConstant</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>LogLik</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>asym</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p_bar_min_fraction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p_bar_max_fraction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1643" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1643" bodyend="1766"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1ad963ff06d974576297ba8f5940e7275b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double SimulationLag</definition>
        <argsstring>(const geoda::GalElement *weight, int num_obs, int Precision, const double rho, double *my_Y, double **my_X, const int deps, bool InclConstant, double *LogLik, double p_bar_min_fraction, double p_bar_max_fraction)</argsstring>
        <name>SimulationLag</name>
        <param>
          <type>const <ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref> *</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_obs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Precision</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>my_Y</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>my_X</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>deps</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>InclConstant</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>LogLik</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p_bar_min_fraction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p_bar_max_fraction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1768" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1768" bodyend="1831"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1afb93d1727c0dca96d847f61c0ac503da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE SmallErrorLogLikelihood</definition>
        <argsstring>(Iterator&lt; WVector &gt; X, Iterator&lt; WVector &gt; lagX, WIterator y, WIterator lagY, Iterator&lt; WVector &gt; W, const VALUE lambda, WVector &amp;egls, double *d, bool InclConstant)</argsstring>
        <name>SmallErrorLogLikelihood</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>X</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>lagX</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref></type>
          <declname>lagY</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>lambda</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>egls</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>InclConstant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1833" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1833" bodyend="1875"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a7e18c6b0a9e680ce41a37599af634880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE SmallErrorLogLikelihood</definition>
        <argsstring>(Iterator&lt; WVector &gt; X, Iterator&lt; WVector &gt; lagX, WIterator y, WIterator lagY, Iterator&lt; WVector &gt; W, const VALUE lambda, WVector &amp;egls, double *wr, double *wi, bool InclConstant)</argsstring>
        <name>SmallErrorLogLikelihood</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>X</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>lagX</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref></type>
          <declname>lagY</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>lambda</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>egls</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>wr</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>wi</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>InclConstant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1877" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1877" bodyend="1923"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1ade62be767d28d6451ec6cdf28d123db8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE SmallGoldenSectionError</definition>
        <argsstring>(const VALUE left, const VALUE middle, const VALUE right, const WMatrix &amp;X, const WVector &amp;y, Iterator&lt; WVector &gt; W, double *&amp;beta, double *d, bool InclConstant, double *LogLik)</argsstring>
        <name>SmallGoldenSectionError</name>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>middle</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>right</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref> &amp;</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>InclConstant</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>LogLik</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1925" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1925" bodyend="1967"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1ad01215a2095bdbda1b845ae3789949ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE SmallGoldenSectionError</definition>
        <argsstring>(const VALUE left, const VALUE middle, const VALUE right, const WMatrix &amp;X, const WVector &amp;y, Iterator&lt; WVector &gt; W, double *&amp;beta, double *wr, double *wi, bool InclConstant, double *LogLik)</argsstring>
        <name>SmallGoldenSectionError</name>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>middle</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>right</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref> &amp;</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>wr</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>wi</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>InclConstant</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>LogLik</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="1969" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1969" bodyend="2011"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a25ffac5a5b3df1d5bc5007404d2c3215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double SmallSimulationError</definition>
        <argsstring>(Weights &amp;W, const double rho, const double *my_Y, double **my_X, const int deps, double *&amp;beta, bool InclConstant, double *LogLik, bool asym, double p_bar_min_fraction, double p_bar_max_fraction)</argsstring>
        <name>SmallSimulationError</name>
        <param>
          <type><ref refid="class_weights" kindref="compound">Weights</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>my_Y</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>my_X</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>deps</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>InclConstant</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>LogLik</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>asym</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p_bar_min_fraction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p_bar_max_fraction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="2013" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="2013" bodyend="2148"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a90f6c29107697753d666114cd5c734b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double SimulationError</definition>
        <argsstring>(const geoda::GalElement *my_gal, int num_obs, int Precision, const double rho, const double *my_Y, double **my_X, const int deps, double *&amp;beta, bool InclConstant, double *LogLik, double p_bar_min_fraction, double p_bar_max_fraction)</argsstring>
        <name>SimulationError</name>
        <param>
          <type>const <ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref> *</type>
          <declname>my_gal</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_obs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Precision</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>my_Y</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>my_X</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>deps</declname>
        </param>
        <param>
          <type>double *&amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>InclConstant</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>LogLik</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p_bar_min_fraction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p_bar_max_fraction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="2150" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="2150" bodyend="2184"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1ac0daa059f06c0c26440aa639e0630092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sdiff</definition>
        <argsstring>(const SparseMatrix &amp;w, const double rho, const DenseVector &amp;v, DenseVector &amp;d)</argsstring>
        <name>sdiff</name>
        <param>
          <type>const <ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="2186" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="2186" bodyend="2195"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1ab0cf864c7478be449a6ceaa6e544474e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Lco</definition>
        <argsstring>(const DenseVector &amp;y, const DenseVector &amp;lag, const DenseVector *X, const SparseMatrix &amp;w, const double rho, DenseVector &amp;sol)</argsstring>
        <name>Lco</name>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>lag</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="2197" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="2197" bodyend="2226"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a32b617ec7f698fabca4192908289c4b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double goldeno</definition>
        <argsstring>(const double left, const double right, const SparseMatrix &amp;w, const DenseVector &amp;y, const DenseVector &amp;lag, const DenseVector *X)</argsstring>
        <name>goldeno</name>
        <param>
          <type>const double</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>right</declname>
        </param>
        <param>
          <type>const <ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>lag</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> *</type>
          <declname>X</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="2229" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="2229" bodyend="2287"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1ac6c37566673c5282048de746dcbc30ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double lcdfPlus</definition>
        <argsstring>(const DenseVector &amp;x, const DenseVector &amp;df)</argsstring>
        <name>lcdfPlus</name>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>df</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="2289" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="2289" bodyend="2293"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a35b3103e202dc06a2a2c6b4b7377be52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double estLj</definition>
        <argsstring>(DenseVector &amp;y, DenseVector &amp;lag, const double rho, const SparseMatrix &amp;w)</argsstring>
        <name>estLj</name>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>lag</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>const <ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="2295" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="2295" bodyend="2311"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a1612b4bbc58107e9c70049e8ef27292e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getLj</definition>
        <argsstring>(const SparseMatrix &amp;w, const double rho, const DenseVector &amp;y, const DenseVector &amp;lag)</argsstring>
        <name>getLj</name>
        <param>
          <type>const <ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>lag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="2313" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="2313" bodyend="2329"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1a6cea067ff3be811e0c2d24b21c688010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EGLS</definition>
        <argsstring>(const double lambda, const DenseVector &amp;y, const DenseVector *X, const SparseMatrix &amp;w, DenseVector &amp;egls)</argsstring>
        <name>EGLS</name>
        <param>
          <type>const double</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>egls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="2331" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="2331" bodyend="2355"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1accaab526c2f67bc4076786b8f1477c13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double mic</definition>
        <argsstring>(const DenseVector &amp;resid, const DenseVector &amp;residW, const double rho, const double trace, const double trace2)</argsstring>
        <name>mic</name>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>residW</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>trace</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>trace2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="2357" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="2357" bodyend="2368"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1af97f999fb2af653bd906e768d5e3b100" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double mie</definition>
        <argsstring>(const DenseVector &amp;rsd, const DenseVector &amp;lag_resid, const double trace, const double trace2, const DenseVector &amp;y, const DenseVector *X, const SparseMatrix &amp;w, const int vars, const double lambda)</argsstring>
        <name>mie</name>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>rsd</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>lag_resid</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>trace</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>trace2</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>vars</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="2370" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="2370" bodyend="2462"/>
      </memberdef>
      <memberdef kind="function" id="_m_l__im_8cpp_1aa080882f1a6cd79504eeb331dfdd692f" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float betai</definition>
        <argsstring>(float a, float b, float x)</argsstring>
        <name>betai</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" line="2464" column="14" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="208" bodyend="227" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" declline="2464" declcolumn="14"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">Main<sp/>module<sp/>to<sp/>solve<sp/>a<sp/>ML<sp/>estimation<sp/>problem<sp/>with<sp/>the<sp/>characteristic<sp/>polynomial<sp/>method.</highlight></codeline>
<codeline lineno="3"><highlight class="comment">test<sp/>functionality<sp/>for<sp/>solving<sp/>sparse<sp/>polynomial<sp/>problem</highlight></codeline>
<codeline lineno="4"><highlight class="comment">The<sp/>IDE<sp/>project<sp/>should<sp/>also<sp/>include<sp/>SLStream.cpp</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_m_l__im_8h" kindref="compound">regression/ML_im.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;blaswrap.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;f2c.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_power_lag_8h" kindref="compound">regression/PowerLag.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="regression_2_weights_8h" kindref="compound">regression/Weights.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lite2_8h" kindref="compound">regression/lite2.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mix_8h" kindref="compound">regression/mix.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="polym_8h" kindref="compound">regression/polym.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="reg-utils_8h" kindref="compound">regression/reg-utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>extern<sp/>&quot;C&quot;<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>#include<sp/>&lt;clapack.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a032d14e2ba792af7b5338313223b20bb" kindref="member">dgesvd_</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*jobu,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*jobvt,<sp/>integer<sp/>*m,<sp/>integer<sp/>*n,<sp/>doublereal<sp/>*a,<sp/>integer<sp/>*lda,<sp/>doublereal<sp/>*s,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doublereal<sp/>*u,<sp/>integer<sp/>*ldu,<sp/>doublereal<sp/>*vt,<sp/>integer<sp/>*ldvt,<sp/>doublereal<sp/>*work,<sp/>integer<sp/>*lwork,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integer<sp/>*info);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1aa4fb43aa911fe694869514f2deb12656" kindref="member">dspev_</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*jobz,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*uplo,<sp/>integer<sp/>*n,<sp/>doublereal<sp/>*ap,<sp/>doublereal<sp/>*w,<sp/>doublereal<sp/>*z__,<sp/>integer<sp/>*ldz,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doublereal<sp/>*work,<sp/>integer<sp/>*info);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1adaf8fb43cda3487b6e45ec7db320acb6" kindref="member">dgeev_</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*jobvl,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*jobvr,<sp/>integer<sp/>*n,<sp/>doublereal<sp/>*a,<sp/>integer<sp/>*lda,<sp/>doublereal<sp/>*wr,<sp/>doublereal<sp/>*wi,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doublereal<sp/>*vl,<sp/>integer<sp/>*ldvl,<sp/>doublereal<sp/>*vr,<sp/>integer<sp/>*ldvr,<sp/>doublereal<sp/>*work,<sp/>integer<sp/>*lwork,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integer<sp/>*info);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ab7664b32c8621ec1c9c667ef4d684e6b" kindref="member">dgesv_</ref>(integer<sp/>*n,<sp/>integer<sp/>*nrhs,<sp/>doublereal<sp/>*a,<sp/>integer<sp/>*lda,<sp/>integer<sp/>*ipiv,<sp/>doublereal<sp/>*b,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integer<sp/>*ldb,<sp/>integer<sp/>*info);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tol<sp/>1e-14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>geoda_sqr(x)<sp/>((x)<sp/>*<sp/>(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Template<sp/>to<sp/>compute<sp/>value<sp/>of<sp/>the<sp/>poynomial<sp/>for<sp/>any<sp/>value.</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>P(x)<sp/>=<sp/>a0<sp/>+<sp/>a1*x<sp/>+<sp/>a2*x^2<sp/>+<sp/>a3*x^3<sp/>+<sp/>...<sp/>+<sp/>aN*x^N</highlight></codeline>
<codeline lineno="40"><highlight class="comment">T<sp/>is<sp/>class<sp/>of<sp/>the<sp/>polynomial<sp/>and<sp/>also<sp/>is<sp/>the<sp/>class<sp/>of<sp/>the<sp/>value.</highlight></codeline>
<codeline lineno="41"><highlight class="comment">Normally,<sp/>T<sp/>=<sp/>double.</highlight></codeline>
<codeline lineno="42"><highlight class="comment">poly<sp/>--<sp/>polynomial<sp/>iterator<sp/>(iterator<sp/>over<sp/>a0,<sp/>a1,<sp/>a2,<sp/>...,<sp/>aN);</highlight></codeline>
<codeline lineno="43"><highlight class="comment">at<sp/><sp/><sp/>--<sp/>value<sp/>at<sp/>which<sp/>the<sp/>polynomial<sp/>is<sp/>being<sp/>evaluated;</highlight></codeline>
<codeline lineno="44"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/><ref refid="_m_l__im_8cpp_1a4448d994c19ae3fab55021875cfd8915" kindref="member">PolyValue</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/>poly,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>at)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>acc(0),<sp/>power(1);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>poly;<sp/>++poly)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>+=<sp/>*poly<sp/>*<sp/>power;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>power<sp/>*=<sp/>at;<sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>and<sp/>store<sp/>powers<sp/>of<sp/>the<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>AddUp</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>compute<sp/>the<sp/>sum<sp/>of<sp/>all<sp/>elements<sp/>in<sp/>the<sp/>Vector.<sp/>Vector<sp/>must<sp/>be<sp/>a<sp/>vector<sp/>of<sp/>Pairs.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>it<sp/>--<sp/>Iterator<sp/>that<sp/>provides<sp/>access<sp/>to<sp/>elements<sp/>of<sp/>the<sp/>Vector.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>Note:<sp/>it<sp/>could<sp/>specify<sp/>only<sp/>a<sp/>portion<sp/>of<sp/>an<sp/>actual<sp/>Vector.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IT&gt;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1aefad9eefc3351192c32381d621ad8df7" kindref="member">AddUp</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;IT&gt;</ref><sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it;<sp/>++it)<sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref><sp/>+=<sp/>(*it).second;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>RowStandardize</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>a<sp/>function<sp/>to<sp/>compute<sp/>the<sp/>sum<sp/>of<sp/>the<sp/>elements<sp/>in<sp/>each<sp/>row<sp/>of<sp/>the<sp/>matrix<sp/>and</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>divide<sp/>them<sp/>by<sp/>that<sp/>sum<sp/>(row-standardization).<sp/>at<sp/>the<sp/>end,<sp/>the<sp/>sum<sp/>of<sp/>the<sp/>elements</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>in<sp/>all<sp/>non-empty<sp/>rows<sp/>is<sp/>supposed<sp/>to<sp/>yield<sp/>one.<sp/>empty<sp/>rows<sp/>have<sp/>no<sp/>neigbors.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1aec803f52a1f99bca131465a6ac8a9496" kindref="member">RowStandardize</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>mt;<sp/>++mt)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>rowsum<sp/>=<sp/><ref refid="_m_l__im_8cpp_1aefad9eefc3351192c32381d621ad8df7" kindref="member">AddUp</ref>((*mt)());</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rowsum<sp/>!=<sp/>0)<sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>standardizing<sp/>empty<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WPair&gt;</ref><sp/>it<sp/>=<sp/>(*mt)();<sp/>it;<sp/>++it)<sp/>(*it).second<sp/>/=<sp/>rowsum;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>RowStandardize</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>dense<sp/>matrix<sp/>version</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1aec803f52a1f99bca131465a6ac8a9496" kindref="member">RowStandardize</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>it.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>dim;<sp/>++row)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rowSum<sp/>=<sp/><ref refid="lite2_8h_1aa1370876f2c781f443356f2a7b4d4b9c" kindref="member">Sum</ref>(it[row]());</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rowSum<sp/>!=<sp/>0)<sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>empty<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>dim;<sp/>++col)<sp/>it[row][col]<sp/>/=<sp/>rowSum;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>OnePoly</highlight></codeline>
<codeline lineno="93"><highlight class="comment">templated<sp/>function<sp/>to<sp/>compute<sp/>the<sp/>logarithm<sp/>of<sp/>the<sp/>polynomial<sp/>Poly<sp/>that<sp/>is<sp/>stored<sp/>as</highlight></codeline>
<codeline lineno="94"><highlight class="comment">a<sp/>product<sp/>of<sp/>series<sp/>of<sp/>polynomials;<sp/>each<sp/>polynomial<sp/>in<sp/>the<sp/>series<sp/>is<sp/>computed<sp/>with<sp/>up</highlight></codeline>
<codeline lineno="95"><highlight class="comment">to<sp/>Pr<sp/>terms:<sp/>S<sp/>=<sp/>a0<sp/>+<sp/>a1*val<sp/>+<sp/>a2*val^2<sp/>+<sp/>...<sp/>+aN*val^N,<sp/>where<sp/>N=Pr-1.</highlight></codeline>
<codeline lineno="96"><highlight class="comment">Poly<sp/>--<sp/>iterator<sp/>over<sp/>the<sp/>polynomial;<sp/>Val<sp/>--<sp/>value<sp/>at<sp/>which<sp/>the<sp/>polynomila<sp/>to<sp/>be<sp/>evaluated;</highlight></codeline>
<codeline lineno="97"><highlight class="comment">Prec<sp/>--<sp/>max<sp/>precision<sp/>in<sp/>Poly;<sp/>Pr<sp/>--<sp/>desired<sp/>precision<sp/>(number<sp/>of<sp/>terms)<sp/>of<sp/>the<sp/>result.</highlight></codeline>
<codeline lineno="98"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1af2e06461ff02af9052e4729c5cd10e77" kindref="member">OnePoly</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;V&gt;</ref><sp/><ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>Val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Prec,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Pr)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;V&gt;</ref><sp/>it,<sp/>itr;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><ref refid="class_vector" kindref="compound">Vector&lt;VALUE&gt;</ref><sp/>Power(Prec);<sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>it<sp/>to<sp/>store<sp/>powers<sp/>of<sp/>val:<sp/>1,<sp/>val,<sp/>val^2,<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>S<sp/>=<sp/>1,<sp/>LogJ<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Power)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>Power<sp/>&lt;&lt;<sp/>S;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>S<sp/>*=<sp/>Val;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>Pr<sp/>&lt;<sp/>Prec;<sp/>++Pr)<sp/>Power[Pr]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/><ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>;<sp/>it;<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;VALUE&gt;</ref><sp/>Po<sp/>=<sp/>Power();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>S<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itr<sp/>=<sp/>(*it)();<sp/>itr;<sp/>++itr,<sp/>++Po)<sp/>S<sp/>+=<sp/>*itr<sp/>*<sp/>*Po;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(S<sp/>&lt;<sp/>1.0e-16)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>=<sp/>1.0e-16;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>LogJ<sp/>+=<sp/>log(S);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LogJ;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>TraceProxy</highlight></codeline>
<codeline lineno="128"><highlight class="comment">used<sp/>to<sp/>estimate<sp/>the<sp/>residual<sp/>resulted<sp/>from<sp/>truncating<sp/>polynomial</highlight></codeline>
<codeline lineno="129"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="struct_trace_proxy" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_trace_proxy_1a6640ec3fcb4748fccd400e529b1d8ce9" kindref="member">TraceProxy</ref><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="struct_trace_proxy_1a1cfd9fc8eea41ab75b799de0a3da201b" kindref="member">S0</ref>,<sp/><ref refid="struct_trace_proxy_1a219442a7cb62787526fd95bd9d146b6f" kindref="member">S1</ref>,<sp/><ref refid="struct_trace_proxy_1a33eab05148d27706bf6d7816edccf7f6" kindref="member">Gamma0</ref>,<sp/><ref refid="struct_trace_proxy_1aa3aa3310c88ce7efe6b155e722ac1e00" kindref="member">Gamma1</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><ref refid="struct_trace_proxy_1a6640ec3fcb4748fccd400e529b1d8ce9" kindref="member">TraceProxy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>*Trace,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Prec);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><ref refid="struct_trace_proxy_1a6640ec3fcb4748fccd400e529b1d8ce9" kindref="member">TraceProxy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>a0<sp/>=<sp/>0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>a1<sp/>=<sp/>0)<sp/>:<sp/><ref refid="struct_trace_proxy_1a1cfd9fc8eea41ab75b799de0a3da201b" kindref="member">S0</ref>(a0),<sp/><ref refid="struct_trace_proxy_1a219442a7cb62787526fd95bd9d146b6f" kindref="member">S1</ref>(a1),<sp/><ref refid="struct_trace_proxy_1a33eab05148d27706bf6d7816edccf7f6" kindref="member">Gamma0</ref>(0),<sp/><ref refid="struct_trace_proxy_1aa3aa3310c88ce7efe6b155e722ac1e00" kindref="member">Gamma1</ref>(0){};</highlight></codeline>
<codeline lineno="134"><highlight class="normal">};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><ref refid="struct_trace_proxy_1a6640ec3fcb4748fccd400e529b1d8ce9" kindref="member">TraceProxy::TraceProxy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>*Trace,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Prec)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="struct_trace_proxy_1a1cfd9fc8eea41ab75b799de0a3da201b" kindref="member">S0</ref><sp/>=<sp/>-Trace[0];</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Trace[0]<sp/>*<sp/>Trace[2]<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_trace_proxy_1a1cfd9fc8eea41ab75b799de0a3da201b" kindref="member">S0</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_trace_proxy_1a33eab05148d27706bf6d7816edccf7f6" kindref="member">Gamma0</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_trace_proxy_1a33eab05148d27706bf6d7816edccf7f6" kindref="member">Gamma0</ref><sp/>=<sp/>sqrt(fabs(Trace[0]<sp/>/<sp/>Trace[2]))<sp/>+<sp/>0.5<sp/>/<sp/>Prec;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_trace_proxy_1a33eab05148d27706bf6d7816edccf7f6" kindref="member">Gamma0</ref><sp/>&gt;<sp/>1)<sp/><ref refid="struct_trace_proxy_1a33eab05148d27706bf6d7816edccf7f6" kindref="member">Gamma0</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><ref refid="struct_trace_proxy_1a219442a7cb62787526fd95bd9d146b6f" kindref="member">S1</ref><sp/>=<sp/>-Trace[1];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Trace[1]<sp/>*<sp/>Trace[3]<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_trace_proxy_1a219442a7cb62787526fd95bd9d146b6f" kindref="member">S1</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_trace_proxy_1aa3aa3310c88ce7efe6b155e722ac1e00" kindref="member">Gamma1</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_trace_proxy_1aa3aa3310c88ce7efe6b155e722ac1e00" kindref="member">Gamma1</ref><sp/>=<sp/>sqrt(fabs(Trace[1]<sp/>/<sp/>Trace[3]))<sp/>+<sp/>0.01<sp/>/<sp/>Prec;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_trace_proxy_1aa3aa3310c88ce7efe6b155e722ac1e00" kindref="member">Gamma1</ref><sp/>&gt;<sp/><ref refid="struct_trace_proxy_1a33eab05148d27706bf6d7816edccf7f6" kindref="member">Gamma0</ref>)<sp/><ref refid="struct_trace_proxy_1aa3aa3310c88ce7efe6b155e722ac1e00" kindref="member">Gamma1</ref><sp/>=<sp/><ref refid="struct_trace_proxy_1a33eab05148d27706bf6d7816edccf7f6" kindref="member">Gamma0</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IT&gt;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1aaf101927b61866e6759f4edebf35eec6" kindref="member">CrossConditioning</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;IT&gt;</ref><sp/>row,<sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>rowSqrtSum,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;VALUE&gt;</ref><sp/>sqrtSums)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>row;<sp/>++row)<sp/>(*row).second<sp/>/=<sp/>(rowSqrtSum<sp/>*<sp/>sqrtSums[(*row).first]);</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>MakeSym</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>templated<sp/>function<sp/>that<sp/>computes<sp/>row-standardization<sp/>of<sp/>a<sp/>symmetric<sp/>matrix<sp/>and<sp/>computes</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>a<sp/>symmetric<sp/>matrix<sp/>that<sp/>has<sp/>the<sp/>same<sp/>spectral<sp/>properties<sp/>as<sp/>row-standardized<sp/>matrix.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>&lt;class<sp/>T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ab0735ed95691939f1aa598b336ed74ee" kindref="member">MakeSym</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>dim<sp/>=<sp/>it.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><ref refid="class_vector" kindref="compound">Vector&lt;VALUE&gt;</ref><sp/>Sums(dim);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>it2<sp/>=<sp/>it;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xx;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it2;<sp/>++it2)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref><sp/>=<sp/><ref refid="_m_l__im_8cpp_1aefad9eefc3351192c32381d621ad8df7" kindref="member">AddUp</ref>((*it2)());</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>sqrt(<ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>Sums<sp/>&lt;&lt;<sp/>xx;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;VALUE&gt;</ref><sp/>is<sp/>=<sp/>Sums();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it2<sp/>=<sp/>it;<sp/>it2;<sp/>++it2,<sp/>++is)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1aaf101927b61866e6759f4edebf35eec6" kindref="member">CrossConditioning</ref>((*it2)(),<sp/>*is,<sp/>Sums());</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ab0735ed95691939f1aa598b336ed74ee" kindref="member">MakeSym</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>it.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="class_vector" kindref="compound">Vector&lt;double&gt;</ref><sp/>sums(dim);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>dim;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>sums[row]<sp/>=<sp/>sqrt(<ref refid="lite2_8h_1aa1370876f2c781f443356f2a7b4d4b9c" kindref="member">Sum</ref>(it[row]()));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>dim;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sr<sp/>=<sp/>sums[row];</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>col<sp/>=<sp/>0;<sp/>col<sp/>&lt;<sp/>row;<sp/>col++)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nw<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sc<sp/>=<sp/>sums[col];</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sr<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>sc<sp/>!=<sp/>0)<sp/>nw<sp/>=<sp/>it[row][col]<sp/>/<sp/>(sr<sp/>*<sp/>sc);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it[row][col]<sp/>=<sp/>nw;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it[col][row]<sp/>=<sp/>nw;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>determines<sp/>if<sp/>a<sp/>gwt<sp/>structure<sp/>is<sp/>symmetric</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bool<sp/>isSym(const<sp/>GwtElement<sp/>*g,<sp/>int<sp/>obs)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>int<sp/>cnt<sp/>=<sp/>0,<sp/>cp<sp/>=<sp/>0,<sp/>ct<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>bool<sp/>flag<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>for<sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>obs;<sp/>cnt++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>g[cnt].Size();<sp/>cp++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(ct<sp/>=<sp/>0;<sp/>ct<sp/>&lt;<sp/>g[g[cnt].elt(cp).nbx].Size();<sp/>ct++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(g[g[cnt].elt(cp).nbx].elt(ct).nbx<sp/>==<sp/>cnt)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(g[g[cnt].elt(cp).nbx].elt(ct).weight<sp/>==<sp/>g[cnt].elt(cp).weight)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!flag)<sp/>return<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>Estimate</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/>compute<sp/>the<sp/>value<sp/>of<sp/>the<sp/>logarithm<sp/>of<sp/>the<sp/>characteristic<sp/>polynomial.</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>Uses<sp/>Aitken&apos;s<sp/>delta-square<sp/>process</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/>--takes<sp/>three<sp/>elements<sp/>in<sp/>the<sp/>series<sp/>to<sp/>accelerate<sp/>convergence--if<sp/>appropriate.</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1aa67f10a2ae8018cede54e0a81d628ec0" kindref="member">Estimate</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/><ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Prec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>np)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s0,<sp/>s1,<sp/>s2,<sp/>ds;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>all<sp/>polynomials<sp/>should<sp/>be<sp/>either<sp/>odd<sp/>degree<sp/>or<sp/>all<sp/>polys<sp/>should<sp/>be<sp/>of<sp/>even<sp/>degree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>s0<sp/>=<sp/><ref refid="_m_l__im_8cpp_1af2e06461ff02af9052e4729c5cd10e77" kindref="member">OnePoly</ref>(<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>,<sp/>val,<sp/>Prec,<sp/>np<sp/>-<sp/>4);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>s1<sp/>=<sp/><ref refid="_m_l__im_8cpp_1af2e06461ff02af9052e4729c5cd10e77" kindref="member">OnePoly</ref>(<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>,<sp/>val,<sp/>Prec,<sp/>np<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>s2<sp/>=<sp/><ref refid="_m_l__im_8cpp_1af2e06461ff02af9052e4729c5cd10e77" kindref="member">OnePoly</ref>(<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>,<sp/>val,<sp/>Prec,<sp/>np);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ds21<sp/>=<sp/>s2<sp/>-<sp/>s1,<sp/>ds10<sp/>=<sp/>s1<sp/>-<sp/>s0;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(ds21<sp/>-<sp/>ds10)<sp/>&lt;<sp/>1e-14)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>ds<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>differences<sp/>are<sp/>too<sp/>small,<sp/>Aitken<sp/>is<sp/>meaningless</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>ds<sp/>=<sp/>ds21<sp/>*<sp/>ds21<sp/>/<sp/>(ds21<sp/>-<sp/>ds10);<sp/><sp/></highlight><highlight class="comment">//<sp/>Aitken&apos;s<sp/>formula<sp/>to<sp/>compute<sp/>the<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(s2<sp/>-<sp/>ds);<sp/><sp/></highlight><highlight class="comment">//<sp/>result<sp/>=<sp/>(prelim<sp/>value)<sp/>-<sp/>(correction)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>PrimeEstimate</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/>a<sp/>function<sp/>to<sp/>compute<sp/>the<sp/>value<sp/>of<sp/>the<sp/>derivative<sp/>of<sp/>the<sp/>logarithm<sp/>of<sp/>the<sp/>characteristic<sp/>polynomial.</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/>Uses<sp/>Aitken&apos;s<sp/>delta-square<sp/>process<sp/>if<sp/>appropriate.</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a5f913f502cd8cade20242714222bfb3a" kindref="member">PrimeEstimate</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/><ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Prec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>np)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s0,<sp/>s1,<sp/>s2,<sp/>ds;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>s0<sp/>=<sp/><ref refid="polym_8h_1a303bc3e7da1c5ac7b10ff52915ba50b3" kindref="member">OnePrime</ref>(<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>,<sp/>val,<sp/>Prec,<sp/>np<sp/>-<sp/>4);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>s1<sp/>=<sp/><ref refid="polym_8h_1a303bc3e7da1c5ac7b10ff52915ba50b3" kindref="member">OnePrime</ref>(<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>,<sp/>val,<sp/>Prec,<sp/>np<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>s2<sp/>=<sp/><ref refid="polym_8h_1a303bc3e7da1c5ac7b10ff52915ba50b3" kindref="member">OnePrime</ref>(<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>,<sp/>val,<sp/>Prec,<sp/>np);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ds21<sp/>=<sp/>s2<sp/>-<sp/>s1,<sp/>ds10<sp/>=<sp/>s1<sp/>-<sp/>s0;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(ds21<sp/>-<sp/>ds10)<sp/>&lt;<sp/>1e-14)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>ds<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>bypass<sp/>Aitken,<sp/>if<sp/>differnce<sp/>is<sp/>too<sp/>small</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>ds<sp/>=<sp/>ds21<sp/>*<sp/>ds21<sp/>/<sp/>(ds21<sp/>-<sp/>ds10);<sp/><sp/></highlight><highlight class="comment">//<sp/>Aitken&apos;s<sp/>formula</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(s2<sp/>-<sp/>ds);</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>MakeEstimate</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>computes<sp/>log-Jacobian<sp/>by<sp/>applying<sp/>Aitken&apos;s<sp/>formula</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>and<sp/>approximation<sp/>of<sp/>the<sp/>truncated<sp/>terms<sp/>for<sp/>row-standardized<sp/>matrices.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a73042642d12eec3b5299af5131c1ee83" kindref="member">MakeEstimate</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/><ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Prec)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s0,<sp/>s1,<sp/>s2,<sp/>ds,<sp/>ns;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>s0<sp/>=<sp/><ref refid="_m_l__im_8cpp_1aa67f10a2ae8018cede54e0a81d628ec0" kindref="member">Estimate</ref>(<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>,<sp/>val,<sp/>Prec,<sp/>Prec<sp/>-<sp/>4);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>s1<sp/>=<sp/><ref refid="_m_l__im_8cpp_1aa67f10a2ae8018cede54e0a81d628ec0" kindref="member">Estimate</ref>(<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>,<sp/>val,<sp/>Prec,<sp/>Prec<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>s2<sp/>=<sp/><ref refid="_m_l__im_8cpp_1aa67f10a2ae8018cede54e0a81d628ec0" kindref="member">Estimate</ref>(<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>,<sp/>val,<sp/>Prec,<sp/>Prec);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v2<sp/>=<sp/>val<sp/>*<sp/>val;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ds21<sp/>=<sp/>(s2<sp/>-<sp/>s1)<sp/>*<sp/>(1<sp/>+<sp/>v2<sp/>*<sp/>v2<sp/>/<sp/>Prec),<sp/>ds10<sp/>=<sp/>s1<sp/>-<sp/>s0;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(ds21<sp/>-<sp/>ds10)<sp/>&lt;<sp/>1e-14)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>ds<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>ds<sp/>=<sp/>ds21<sp/>*<sp/>ds21<sp/>/<sp/>(ds21<sp/>-<sp/>ds10);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(s2)<sp/>&gt;<sp/>1e-14)<sp/>ds<sp/>*=<sp/>1.0<sp/>+<sp/>25.0<sp/>*<sp/>pow(val,<sp/>40)<sp/>*<sp/>(fabs(ds<sp/>/<sp/>s2));<sp/><sp/></highlight><highlight class="comment">//<sp/>last-term<sp/>correction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>ns<sp/>=<sp/>s2<sp/>-<sp/>ds;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ns;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>MakePrimeEstimate</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/>computes<sp/>derivative<sp/>of<sp/>log-Jacobian<sp/>by<sp/>applying<sp/>Aitken&apos;s<sp/>formula<sp/>and<sp/>approximation<sp/>of<sp/>the<sp/>truncated<sp/>terms<sp/>for</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>row-standardized<sp/>matrices.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a4b4a023935aa24903f8109c278f1ef82" kindref="member">MakePrimeEstimate</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/><ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Prec)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s0,<sp/>s1,<sp/>s2,<sp/>ds,<sp/>ns;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>s0<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a5f913f502cd8cade20242714222bfb3a" kindref="member">PrimeEstimate</ref>(<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>,<sp/>val,<sp/>Prec,<sp/>Prec<sp/>-<sp/>4);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>s1<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a5f913f502cd8cade20242714222bfb3a" kindref="member">PrimeEstimate</ref>(<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>,<sp/>val,<sp/>Prec,<sp/>Prec<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>s2<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a5f913f502cd8cade20242714222bfb3a" kindref="member">PrimeEstimate</ref>(<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>,<sp/>val,<sp/>Prec,<sp/>Prec);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v2<sp/>=<sp/>val<sp/>*<sp/>val;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ds21<sp/>=<sp/>(s2<sp/>-<sp/>s1)<sp/>*<sp/>(1<sp/>+<sp/>0.75<sp/>*<sp/>v2<sp/>*<sp/>v2<sp/>/<sp/>Prec),<sp/>ds10<sp/>=<sp/>s1<sp/>-<sp/>s0;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(ds21<sp/>-<sp/>ds10)<sp/>&lt;<sp/>1e-14)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>ds<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>ds<sp/>=<sp/>ds21<sp/>*<sp/>ds21<sp/>/<sp/>(ds21<sp/>-<sp/>ds10);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>if<sp/>(fabs(s2)<sp/>&gt;<sp/>1e-14)<sp/>ds<sp/>*=<sp/>1+<sp/>25*pow(val,<sp/>40)<sp/>*(fabs(ds/s2));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>ns<sp/>=<sp/>s2<sp/>-<sp/>ds;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1a73042642d12eec3b5299af5131c1ee83" kindref="member">MakeEstimate</ref>(<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>,<sp/>val,<sp/>Prec);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ns;</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EasyMatInverse<sp/><sp/>--</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inverts<sp/>any<sp/>matrix<sp/>of<sp/>size<sp/>2<sp/>by<sp/>2<sp/>or<sp/>less.<sp/>The<sp/>matrix<sp/>does<sp/>not<sp/>have<sp/>to<sp/>be<sp/>symmetric.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>false<sp/>if<sp/>fails<sp/>(matrix<sp/>is<sp/>not<sp/>a<sp/>full<sp/>rank<sp/>matrix<sp/>and<sp/>true<sp/>if<sp/>success.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ac2d128434892366ce8c340419542bc77" kindref="member">EasyMatInverse</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>mt)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1a6a4288add566c8d9c96f7cb0dc661c66" kindref="member">CNT</ref><sp/>dim;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>dim<sp/>=<sp/>mt.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();<sp/><sp/></highlight><highlight class="comment">//<sp/>dimension<sp/>of<sp/>the<sp/>problem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(mt[0][0])<sp/>&lt;<sp/><ref refid="polym_8h_1aa691a57b0fb8374b072a02825d89a31e" kindref="member">SL_SMALL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mt[0][0]<sp/>=<sp/>1<sp/>/<sp/>mt[0][0];<sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>inverse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>dim<sp/>==<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>det<sp/>=<sp/>mt[0][0]<sp/>*<sp/>mt[1][1]<sp/>-<sp/>mt[1][0]<sp/>*<sp/>mt[0][1];</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(det)<sp/>&lt;<sp/><ref refid="polym_8h_1aa691a57b0fb8374b072a02825d89a31e" kindref="member">SL_SMALL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mt[1][0]<sp/>/=<sp/>-det;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mt[0][1]<sp/>/=<sp/>-det;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(mt[0][0],<sp/>mt[1][1]);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mt[1][1]<sp/>/=<sp/>det;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mt[0][0]<sp/>/=<sp/>det;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>ScalProd</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>a<sp/>function<sp/>used<sp/>to<sp/>compute</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/>v1[stop]<sp/>=<sp/>v1[stop]*t<sp/>-<sp/>sum(i=0,<sp/>stop-1;<sp/>v1[i]*v2[i])<sp/>*<sp/>t</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>context<sp/>of<sp/>LDL<sp/>decomposition</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1aa22efc9e441d13872b65fc00e62919b4" kindref="member">ScalProd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a6a4288add566c8d9c96f7cb0dc661c66" kindref="member">CNT</ref><sp/>stop,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;VALUE&gt;</ref><sp/>v1,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;VALUE&gt;</ref><sp/>v2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>t<sp/>=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>ValueAtStop<sp/>=<sp/>v1[stop];</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lite2_8h_1a6a4288add566c8d9c96f7cb0dc661c66" kindref="member">CNT</ref><sp/>elt<sp/>=<sp/>0;<sp/>elt<sp/>&lt;<sp/>stop;<sp/>++elt)<sp/>ValueAtStop<sp/>-=<sp/>v1[elt]<sp/>*<sp/>v2[elt];</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>v1[stop]<sp/>=<sp/>ValueAtStop<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>ScalProd1</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*<sp/>one<sp/>of<sp/>the<sp/>functions<sp/>for<sp/>computing<sp/>LDL<sp/>decomposition</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a42eec7d171cea5f83780ec10e12ba347" kindref="member">ScalProd1</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a6a4288add566c8d9c96f7cb0dc661c66" kindref="member">CNT</ref><sp/>start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a6a4288add566c8d9c96f7cb0dc661c66" kindref="member">CNT</ref><sp/>stop,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;VALUE&gt;</ref><sp/>v1,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;VALUE&gt;</ref><sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>ValueAtStart<sp/>=<sp/>v1[start];</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lite2_8h_1a6a4288add566c8d9c96f7cb0dc661c66" kindref="member">CNT</ref><sp/>elt<sp/>=<sp/>start<sp/>+<sp/>1;<sp/>elt<sp/>&lt;<sp/>stop;<sp/>++elt)<sp/>ValueAtStart<sp/>+=<sp/>v1[elt]<sp/>*<sp/>v2[elt];</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>v2[stop]<sp/>=<sp/>-ValueAtStart;</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>ScalProd2</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*<sp/>one<sp/>of<sp/>the<sp/>functions<sp/>for<sp/>computing<sp/>LDL<sp/>decomposition</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a701853400c30a775a29c855fec54a7d8" kindref="member">ScalProd2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a6a4288add566c8d9c96f7cb0dc661c66" kindref="member">CNT</ref><sp/>start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a6a4288add566c8d9c96f7cb0dc661c66" kindref="member">CNT</ref><sp/>stop,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;VALUE&gt;</ref><sp/>v1,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;VALUE&gt;</ref><sp/>v2,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;VALUE&gt;</ref><sp/>diag,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a6a4288add566c8d9c96f7cb0dc661c66" kindref="member">CNT</ref><sp/>first)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>ValueAtStart<sp/>=<sp/>diag[start];</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>!=<sp/>first)<sp/>ValueAtStart<sp/>*=<sp/>v2[start];</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lite2_8h_1a6a4288add566c8d9c96f7cb0dc661c66" kindref="member">CNT</ref><sp/>elt<sp/>=<sp/>start<sp/>+<sp/>1;<sp/>elt<sp/>&lt;<sp/>stop;<sp/>++elt)<sp/>ValueAtStart<sp/>+=<sp/>diag[elt]<sp/>*<sp/>v1[elt]<sp/>*<sp/>v2[elt];</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(ValueAtStart)<sp/>&lt;<sp/><ref refid="polym_8h_1aa691a57b0fb8374b072a02825d89a31e" kindref="member">SL_SMALL</ref>)<sp/>ValueAtStart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>v1[first]<sp/>=<sp/>ValueAtStart;</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SymMatInverse<sp/>--</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inverts<sp/>a<sp/>symmetric<sp/>positive<sp/>or<sp/>negative<sp/>definite<sp/>matrix<sp/>of<sp/>any<sp/>size<sp/>in<sp/>situ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>false<sp/>if<sp/>fails<sp/>(matrix<sp/>is<sp/>not<sp/>a<sp/>full<sp/>rank<sp/>matrix<sp/>and<sp/>true<sp/>if<sp/>success.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Uses<sp/>analog<sp/>of<sp/>Choleski<sp/>decomposition:<sp/>L-D-L&apos;<sp/>decomposition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a8d6c7b80b63056009958afd0f1647aea" kindref="member">SymMatInverse</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>mt)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1a6a4288add566c8d9c96f7cb0dc661c66" kindref="member">CNT</ref><sp/>row,<sp/>column,<sp/>dim<sp/>=<sp/>mt.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>&lt;=<sp/>2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ac2d128434892366ce8c340419542bc77" kindref="member">EasyMatInverse</ref>(mt);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>diag(dim,<sp/>0.0);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>current;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>compute<sp/>L<sp/>,<sp/>D<sp/>.<sp/>NOTE:<sp/>L<sp/>has<sp/>ones<sp/>on<sp/>the<sp/>main<sp/>diagonal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>dim;<sp/>++row)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>0;<sp/>column<sp/>&lt;<sp/>row;<sp/>++column)<sp/>diag[column]<sp/>=<sp/>mt[column][column]<sp/>*<sp/>mt[row][column];</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1aa22efc9e441d13872b65fc00e62919b4" kindref="member">ScalProd</ref>(row,<sp/>mt[row](),<sp/>diag());</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>mt[row][row];</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(current)<sp/>&lt;<sp/><ref refid="polym_8h_1aa691a57b0fb8374b072a02825d89a31e" kindref="member">SL_SMALL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>(near)<sp/>singularity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>1.0<sp/>/<sp/>current;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>row<sp/>+<sp/>1;<sp/>column<sp/>&lt;<sp/>dim;<sp/>++column)<sp/><ref refid="_m_l__im_8cpp_1aa22efc9e441d13872b65fc00e62919b4" kindref="member">ScalProd</ref>(row,<sp/>mt[column](),<sp/>diag(),<sp/>current);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>compute<sp/>inv(L&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>1;<sp/>row<sp/>&lt;<sp/>dim;<sp/>++row)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>0;<sp/>column<sp/>&lt;<sp/>row;<sp/>++column)<sp/><ref refid="_m_l__im_8cpp_1a42eec7d171cea5f83780ec10e12ba347" kindref="member">ScalProd1</ref>(column,<sp/>row,<sp/>mt[row](),<sp/>mt[column]());</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>3.<sp/>compute<sp/>inv(D)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>dim;<sp/>++row)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>current<sp/>=<sp/>mt[row][row];</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>diag[row]<sp/>=<sp/>fabs(current)<sp/>&lt;<sp/><ref refid="polym_8h_1aa691a57b0fb8374b072a02825d89a31e" kindref="member">SL_SMALL</ref><sp/>?<sp/>0<sp/>:<sp/>1<sp/>/<sp/>current;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>4.<sp/>put<sp/>the<sp/>pieces<sp/>together:<sp/>inv(A)=<sp/>inv(L&apos;)*inv(D)*inv(L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>4.a<sp/>do<sp/>the<sp/>lower<sp/>triangular<sp/>part<sp/>of<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>dim;<sp/>++row)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>row;<sp/>column<sp/>&lt;<sp/>dim;<sp/>++column)<sp/><ref refid="_m_l__im_8cpp_1a701853400c30a775a29c855fec54a7d8" kindref="member">ScalProd2</ref>(column,<sp/>dim,<sp/>mt[column](),<sp/>mt[row](),<sp/>diag(),<sp/>row);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>4.b<sp/><sp/>do<sp/>the<sp/>upper<sp/>triangular<sp/>part<sp/>of<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>1;<sp/>row<sp/>&lt;<sp/>dim;<sp/>++row)</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>0;<sp/>column<sp/>&lt;<sp/>row;<sp/>++column)<sp/>mt[column][row]<sp/>=<sp/>mt[row][column];</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">//<sp/>computes<sp/>OLS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>y<sp/>--<sp/>dependent<sp/>variable;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>X<sp/>--<sp/>independednt<sp/>variables;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IncludeConst<sp/>--<sp/>&apos;true&apos;<sp/>if<sp/>include<sp/>intercept;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inverse<sp/>--<sp/>inv(X&apos;X);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//<sp/>resid<sp/>--<sp/>residuals;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ols<sp/>--<sp/>coefficients.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">/*bool<sp/>OLS(Iterator&lt;VALUE&gt;<sp/>y,</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator&lt;WVector&gt;<sp/>X,</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>IncludeConst,</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;WVector&gt;<sp/>&amp;cov,</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WVector<sp/>&amp;resid,<sp/>WVector<sp/>&amp;ols)</highlight></codeline>
<codeline lineno="418"><highlight class="comment">{</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/><sp/><sp/><sp/>CNT<sp/><sp/><sp/>vars=<sp/>X.count();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>number<sp/>of<sp/>independent<sp/>variables</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(vars<sp/>==<sp/>0)<sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/><sp/><sp/><sp/>CNT<sp/><sp/><sp/>obs=<sp/>X[0].count();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>number<sp/>of<sp/>observations</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/><sp/><sp/><sp/>CNT<sp/><sp/><sp/>varsIncl=<sp/>IncludeConst<sp/>?<sp/>vars+1<sp/>:<sp/>vars,<sp/>row,<sp/>column;</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/><sp/><sp/>cov.alloc(varsIncl);</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/><sp/><sp/><sp/>VALUE<sp/><sp/><sp/><sp/><sp/>val;</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(row=<sp/>0;<sp/>row<sp/>&lt;<sp/>varsIncl;<sp/>++row,<sp/>++cov)</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*cov).alloc(varsIncl,<sp/>0);</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(row=<sp/>0;<sp/>row<sp/>&lt;<sp/>vars;<sp/>++row)</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(column=<sp/>row;<sp/>column<sp/>&lt;<sp/>vars;<sp/>++column)</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val=<sp/>cov[row][column]<sp/>=<sp/>cov[column][row]<sp/>=<sp/>Product(X[row](),<sp/>X[column]());</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(IncludeConst)<sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>include<sp/>intercept</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cov[vars][vars]=<sp/>obs;</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(column=<sp/>0;<sp/>column<sp/>&lt;<sp/>vars;<sp/>++column)</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val=<sp/>cov[vars][column]<sp/>=<sp/>cov[column][vars]<sp/>=<sp/>Sum(X[column]());</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(SymMatInverse(cov()))</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resid.alloc(obs);</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ols.alloc(varsIncl);</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WVector<sp/><sp/><sp/><sp/><sp/>temp(varsIncl);</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(row=<sp/>0;<sp/>row<sp/>&lt;<sp/>vars;<sp/>++row)</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>&lt;&lt;<sp/>Product(X[row](),<sp/>y);</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(IncludeConst)</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>&lt;&lt;<sp/>Sum(y);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>temp<sp/>has<sp/>X&apos;y</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(row=<sp/>0;<sp/>row<sp/>&lt;<sp/>varsIncl;<sp/>++row)</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ols<sp/>&lt;&lt;<sp/>Product(cov[row](),<sp/>temp());<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>compute<sp/>ols</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(column=<sp/>0;<sp/>column<sp/>&lt;<sp/>obs;<sp/>++column)</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VALUE<sp/>tempr<sp/>=<sp/>y[column];</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(IncludeConst)<sp/>tempr<sp/>-=<sp/>ols[vars];</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(row=<sp/>0;<sp/>row<sp/>&lt;<sp/>vars;<sp/>++row)</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempr<sp/>-=<sp/>ols[row]<sp/>*<sp/>X[row][column];</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resid<sp/>&lt;&lt;<sp/>tempr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>compute<sp/>residuals</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="456"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>computeRotation</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>*<sp/>computes<sp/>rotation<sp/>elements</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a0e6ba3407ce16d9ba5faf0562f4ea909" kindref="member">computeRotation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;c,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;rotation)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(v)<sp/>&lt;<sp/>fabs(t))<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>v<sp/>/<sp/>t;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>sqrt(1.0<sp/>+<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(s));</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>rotation<sp/>=<sp/>r<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>*=<sp/>(c<sp/>=<sp/>1.0<sp/>/<sp/>r);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>t<sp/>/<sp/>v;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>sqrt(1.0<sp/>+<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(c));</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>rotation<sp/>=<sp/>r<sp/>*<sp/>v;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>*=<sp/>(s<sp/>=<sp/>1.0<sp/>/<sp/>r);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>Rotation</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/>*<sp/><sp/>function<sp/>to<sp/>compute<sp/>Givens<sp/>rotation</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1aa65a3c42e72b1d6b5080f8658ad71594" kindref="member">Rotation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;s,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;t,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>c<sp/>*<sp/>x<sp/>+<sp/>s<sp/>*<sp/>v;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>v<sp/>=<sp/>s<sp/>*<sp/>x<sp/>+<sp/>c<sp/>*<sp/>v;</highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>QL_with_Shift</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*<sp/>an<sp/>implementation<sp/>of<sp/>QL<sp/>with<sp/>shift<sp/>algorithm<sp/>for<sp/>computing<sp/>eigenvalues</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*<sp/>of<sp/>a<sp/>real<sp/>symmetric<sp/>tridiagonal<sp/>matrix</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*<sp/><sp/><sp/>see<sp/>Numerical<sp/>Recipes<sp/>in<sp/>C,<sp/>pp.<sp/>380-381.</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*<sp/>input:</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*<sp/>D<sp/>--<sp/>diagonal<sp/>elements;</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*<sp/>E<sp/>--<sp/>subdiagonal<sp/>elements</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*<sp/>output:</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*<sp/>D<sp/>--<sp/>the<sp/>eigenvalues.</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ae8004456ab67da1f6b8794ac1f069d94" kindref="member">QL_with_Shift</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*e,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LIMIT<sp/>=<sp/>30;<sp/><sp/></highlight><highlight class="comment">//<sp/>limit<sp/>on<sp/>the<sp/>number<sp/>of<sp/>iterations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,<sp/>iter;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s,<sp/>c,<sp/>root,<sp/>g,<sp/>p;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>dim;<sp/>++row)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>iter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(m<sp/>=<sp/>row;<sp/>m<sp/>&lt;<sp/>dim<sp/>-<sp/>1;<sp/>++m)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>fabs(d[m])<sp/>+<sp/>fabs(d[m<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(e[m])<sp/>+<sp/>t<sp/>==<sp/>t)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>!=<sp/>row)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++iter<sp/>==<sp/>LIMIT)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>(d[row<sp/>+<sp/>1]<sp/>-<sp/>d[row])<sp/>/<sp/>(2.0<sp/>*<sp/>e[row]);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root<sp/>=<sp/>sqrt(<ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(g)<sp/>+<sp/>1.0);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>&lt;<sp/>0)<sp/>root<sp/>=<sp/>-root;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>d[m]<sp/>-<sp/>d[row]<sp/>+<sp/>e[row]<sp/>/<sp/>(g<sp/>+<sp/>root);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>c<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>m<sp/>-<sp/>1;<sp/>cp<sp/>&gt;=<sp/>row;<sp/>--cp)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>c<sp/>*<sp/>e[cp];</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a0e6ba3407ce16d9ba5faf0562f4ea909" kindref="member">computeRotation</ref>(g,<sp/>s<sp/>*<sp/>e[cp],<sp/>s,<sp/>c,<sp/>e[cp<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>d[cp<sp/>+<sp/>1]<sp/>-<sp/>p;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root<sp/>=<sp/>(d[cp]<sp/>-<sp/>g)<sp/>*<sp/>s<sp/>+<sp/>2.0<sp/>*<sp/>c<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>s<sp/>*<sp/>root;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[cp<sp/>+<sp/>1]<sp/>=<sp/>g<sp/>+<sp/>p;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>c<sp/>*<sp/>root<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[row]<sp/>-=<sp/>p;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e[row]<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e[m]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(m<sp/>!=<sp/>row);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a8e62463b27e3f4681eb56667556cb338" kindref="member">normalize</ref>(<ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>arow,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;OD,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last<sp/>=<sp/>row<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>0,<sp/>scale<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>row;<sp/>++cnt)<sp/>scale<sp/>+=<sp/>fabs(arow[cnt]);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scale<sp/>==<sp/>0.0<sp/>||<sp/>last<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>the<sp/>transformation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>OD<sp/>=<sp/>arow[last];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>off-diagonal<sp/>is<sp/>either<sp/>0<sp/>or<sp/>arow[0]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>row;<sp/>++cnt)<sp/>arow[cnt]<sp/>/=<sp/>scale;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>row;<sp/>++cnt)<sp/>h<sp/>+=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(arow[cnt]);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>arow[last];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pretransform<sp/>pivoting<sp/>element<sp/>--<sp/>ofddiagonal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>(f<sp/>&gt;<sp/>0)<sp/>?<sp/>-sqrt(h)<sp/>:<sp/>sqrt(h);<sp/><sp/></highlight><highlight class="comment">//<sp/>adjust<sp/>to<sp/>get<sp/>the<sp/>same<sp/>norm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>OD<sp/>=<sp/>scale<sp/>*<sp/>g;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>new<sp/>offdiagonal<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>h<sp/>-=<sp/>f<sp/>*<sp/>g;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>arow[last]<sp/>=<sp/>f<sp/>-<sp/>g;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>householder</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/>*<sp/>implements<sp/>Householder&apos;s<sp/>method<sp/>for<sp/>reducing<sp/>real<sp/>symmetric<sp/>matrix<sp/>to<sp/>3D</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a5c41673ce68c5cc9b0a374ca8b1087d6" kindref="member">householder</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*diag,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*off)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>a.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>0,<sp/>cp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*w<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim];</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>dim<sp/>-<sp/>1;<sp/>row<sp/>&gt;<sp/>0;<sp/>--row)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a8e62463b27e3f4681eb56667556cb338" kindref="member">normalize</ref>(a[row](),<sp/>off[row<sp/>-<sp/>1],<sp/>row);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scale<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>row;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;=<sp/>j;<sp/>++cp)<sp/>g<sp/>+=<sp/>a[j][cp]<sp/>*<sp/>a[row][cp];</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cp<sp/>=<sp/>j<sp/>+<sp/>1;<sp/>cp<sp/>&lt;<sp/>row;<sp/>++cp)<sp/>g<sp/>+=<sp/>a[cp][j]<sp/>*<sp/>a[row][cp];</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w[j]<sp/>=<sp/>g<sp/>/<sp/>scale;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>+=<sp/>w[j]<sp/>*<sp/>a[row][j];</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hh<sp/>=<sp/>f<sp/>/<sp/>(scale<sp/>+<sp/>scale);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>row;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>a[row][j];</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w[j]<sp/>-=<sp/>hh<sp/>*<sp/>f;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>w[j];</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;=<sp/>j;<sp/>++cp)<sp/>a[j][cp]<sp/>-=<sp/>(f<sp/>*<sp/>w[cp]<sp/>+<sp/>g<sp/>*<sp/>a[row][cp]);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>diag[cnt]<sp/>=<sp/>a[cnt][cnt];</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>w;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>w<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>SpatialLag</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/>*<sp/>function<sp/>to<sp/>compute<sp/>spatial<sp/>lag<sp/>as<sp/>a<sp/>sparse-matrix/dense-vector<sp/>product.</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/>*<sp/>optionally,<sp/>might<sp/>perform<sp/>row-standardization<sp/>of<sp/>the<sp/>spatial<sp/>weights,<sp/>but<sp/>the<sp/>matrix</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/>*<sp/>remains<sp/>intact.</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>v,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;lag,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>need_std<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>lag.<ref refid="class_vector_1aecbdf33f934d6f2803e08c65d9c2fd1d" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>mt;<sp/>++mt)<sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lag_value<sp/>=<sp/><ref refid="lite2_8h_1a7dd6ec971b6f46098cb10e81b3fb0e9c" kindref="member">Product</ref>((*mt)(),<sp/>v);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(need_std)<sp/>lag_value<sp/>/=<sp/><ref refid="_m_l__im_8cpp_1aefad9eefc3351192c32381d621ad8df7" kindref="member">AddUp</ref>((*mt)());</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>lag<sp/>&lt;&lt;<sp/>lag_value;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>SpatialLag</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/>*<sp/>function<sp/>to<sp/>compute<sp/>spatial<sp/>lag<sp/>as<sp/>a<sp/>dense-matrix/dense-vector<sp/>product.</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/>*<sp/>optionally,<sp/>might<sp/>perform<sp/>row-standardization<sp/>of<sp/>the<sp/>spatial<sp/>weights,<sp/>but<sp/>the<sp/>matrix</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/>*<sp/>remains<sp/>intact.</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>mt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>v,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;lag,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>need_std<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>lag.<ref refid="class_vector_1aecbdf33f934d6f2803e08c65d9c2fd1d" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>mt;<sp/>++mt)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lag_value<sp/>=<sp/><ref refid="lite2_8h_1a7dd6ec971b6f46098cb10e81b3fb0e9c" kindref="member">Product</ref>((*mt)(),<sp/>v);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(need_std)<sp/>lag_value<sp/>/=<sp/><ref refid="lite2_8h_1aa1370876f2c781f443356f2a7b4d4b9c" kindref="member">Sum</ref>((*mt)());</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>lag<sp/>&lt;&lt;<sp/>lag_value;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">//***<sp/>compute<sp/>spatial<sp/>lag<sp/>of<sp/>a<sp/>series<sp/>of<sp/>variables<sp/>organized<sp/>in<sp/>a<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">//***<sp/>In<sp/>such<sp/>a<sp/>matrix,<sp/>the<sp/>variables<sp/>are<sp/>stored<sp/>in<sp/>columns:<sp/>var[0]<sp/>is<sp/>1st<sp/>variable,<sp/>var[1]<sp/>is<sp/>the<sp/>second,<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>var,<sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>&amp;lag)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lag.<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>()<sp/>!=<sp/>var.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>())<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>the<sp/>number<sp/>of<sp/>variables<sp/>is<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>lag<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref>(var.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>lag.<ref refid="class_vector_1aecbdf33f934d6f2803e08c65d9c2fd1d" kindref="member">reset</ref>(var.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>(int)var.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();<sp/>++cnt)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>each<sp/>variable<sp/>is<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lag[cnt].count()<sp/>!=<sp/>var[cnt].count())<sp/>lag[cnt]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref>(var[cnt].count());</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>lag[cnt].<ref refid="class_vector_1aecbdf33f934d6f2803e08c65d9c2fd1d" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>mt;<sp/>++mt)<sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>spatial<sp/>lag:<sp/>treat<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>(int)var.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();<sp/>++cnt)<sp/>lag[cnt]<sp/>&lt;&lt;<sp/><ref refid="lite2_8h_1a7dd6ec971b6f46098cb10e81b3fb0e9c" kindref="member">Product</ref>((*mt)(),<sp/>var[cnt]());</highlight></codeline>
<codeline lineno="633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>mt,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>var,<sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>&amp;lag)<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lag.<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>()<sp/>!=<sp/>var.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>())<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>the<sp/>number<sp/>of<sp/>variables<sp/>is<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>lag<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref>(var.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>lag.<ref refid="class_vector_1aecbdf33f934d6f2803e08c65d9c2fd1d" kindref="member">reset</ref>(var.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>(int)var.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();<sp/>++cnt)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>each<sp/>variable<sp/>is<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lag[cnt].count()<sp/>!=<sp/>var[cnt].count())<sp/>lag[cnt]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref>(var[cnt].count());</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>lag[cnt].<ref refid="class_vector_1aecbdf33f934d6f2803e08c65d9c2fd1d" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>mt;<sp/>++mt)<sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>spatial<sp/>lag:<sp/>treat<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>(int)var.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();<sp/>++cnt)<sp/>lag[cnt]<sp/>&lt;&lt;<sp/><ref refid="lite2_8h_1a7dd6ec971b6f46098cb10e81b3fb0e9c" kindref="member">Product</ref>((*mt)(),<sp/>var[cnt]());</highlight></codeline>
<codeline lineno="648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a1d81280768a70e67bf08d193ca3e7ff0" kindref="member">copy</ref>(<ref refid="lite2_8h_1a4c7688b643a08fd9b048deecbb9376b5" kindref="member">GWT</ref><sp/>&amp;dst,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>from)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>from.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim)<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>dst.<ref refid="class_vector_1a864d1f7b69f57a633f3b248fad3619ee" kindref="member">alloc</ref>(dim);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*dst).copy((*from)());</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dst++;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>from++;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(from);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a1d81280768a70e67bf08d193ca3e7ff0" kindref="member">copy</ref>(<ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>&amp;dst,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>src)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>src.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>dst.<ref refid="class_vector_1a864d1f7b69f57a633f3b248fad3619ee" kindref="member">alloc</ref>(dim);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>dim;<sp/>++row)<sp/>dst[row].<ref refid="_m_l__im_8cpp_1a1d81280768a70e67bf08d193ca3e7ff0" kindref="member">copy</ref>(src[row]());</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>dst.<ref refid="class_vector_1aecbdf33f934d6f2803e08c65d9c2fd1d" kindref="member">reset</ref>(dim);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>norm</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/>*<sp/>function<sp/>to<sp/>compute<sp/>sum<sp/>of<sp/>squares<sp/>of<sp/>a<sp/>vector.</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1ad47a3573d1fdbae618bb0f49823c1cb7" kindref="member">norm</ref>(<ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>0.0,<sp/>ssq<sp/>=<sp/>1.0,<sp/>t;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it;<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>absc<sp/>=<sp/>fabs(*it);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scale<sp/>&lt;<sp/>absc)<sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>scale<sp/>/<sp/>absc;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssq<sp/>=<sp/>1.0<sp/>+<sp/>ssq<sp/>*<sp/>t<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>absc;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>absc<sp/>/<sp/>scale;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssq<sp/>+=<sp/>t<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scale<sp/>*<sp/>scale<sp/>*<sp/>ssq;</highlight></codeline>
<codeline lineno="688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>CL</highlight></codeline>
<codeline lineno="691"><highlight class="comment">*<sp/>function<sp/>to<sp/>compute<sp/>log-likelihood<sp/>function<sp/>for<sp/>the<sp/>spatial<sp/>lag<sp/>model</highlight></codeline>
<codeline lineno="692"><highlight class="comment">resid<sp/>--<sp/>vector<sp/>of<sp/>residuals<sp/>in<sp/>regression<sp/>y<sp/>on<sp/>X;</highlight></codeline>
<codeline lineno="693"><highlight class="comment">residW<sp/>--<sp/>vector<sp/>or<sp/>residulas<sp/>in<sp/>regression<sp/>of<sp/>Wy<sp/>on<sp/>X;</highlight></codeline>
<codeline lineno="694"><highlight class="comment">rho<sp/>--<sp/>value<sp/>of<sp/>the<sp/>coefficient<sp/>of<sp/>spatial<sp/>association.</highlight></codeline>
<codeline lineno="695"><highlight class="comment">Note:<sp/>function<sp/>uses<sp/>static<sp/>variables<sp/>Poly<sp/>and<sp/>SL_Max_Precision.</highlight></codeline>
<codeline lineno="696"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1a3228ba56da48a112a3bf6dd2de5010a8" kindref="member">CL</ref>(<ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;resid,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;residW,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>rho)<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>lj<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a73042642d12eec3b5299af5131c1ee83" kindref="member">MakeEstimate</ref>(<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>(),<sp/>rho,<sp/><ref refid="polym_8h_1a5b5a395141319c5c13666a272aa1f645" kindref="member">SL_Max_Precision</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>log-Jacobian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>tmp.<ref refid="class_vector_1aecbdf33f934d6f2803e08c65d9c2fd1d" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>tmp.<ref refid="class_vector_1ae4c41304edf8d979e751bcb1ae2c627e" kindref="member">copy</ref>(residW());<sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>residiual<sp/>of<sp/>wy<sp/>on<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>tmp<sp/>*=<sp/>rho;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>multiply<sp/>it<sp/>by<sp/>rho</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>tmp<sp/>-=<sp/>resid;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>residual<sp/>of<sp/>y<sp/>on<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nn<sp/>=<sp/>resid.<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>(),<sp/><ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref><sp/>=<sp/><ref refid="_m_l__im_8cpp_1ad47a3573d1fdbae618bb0f49823c1cb7" kindref="member">norm</ref>(tmp());</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sse<sp/>=<sp/>0.5<sp/>*<sp/>nn<sp/>*<sp/>log(<ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref><sp/>/<sp/>nn);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sse1<sp/>=</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-1.0<sp/>*<sp/>((nn<sp/>/<sp/>2.0)<sp/>*<sp/>(log(2.0<sp/>*<sp/>M_PI))<sp/>+<sp/>(nn<sp/>/<sp/>2.0)<sp/>*<sp/>log((<ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref><sp/>/<sp/>nn))<sp/>+<sp/>(<ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref><sp/>/<sp/>(2.0<sp/>*<sp/>(<ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref><sp/>/<sp/>nn))));</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>accum<sp/>=<sp/>lj<sp/>-<sp/>sse;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>accum1<sp/>=<sp/>lj<sp/>-<sp/>sse1;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>accum;</highlight></codeline>
<codeline lineno="714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>_minus</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/>*<sp/>function<sp/>to<sp/>compute<sp/>r<sp/>=<sp/>a<sp/>-b<sp/>*s;</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/>*<sp/>a,<sp/>b,<sp/>s<sp/>--<sp/>vectors;</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/>*<sp/>s<sp/>--<sp/>scalar.</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1af3e9cb5124589d163810a05ee5f27f9c" kindref="member">_minus</ref>(<ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>a,<sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>b,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>()<sp/>!=<sp/>r.<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>())<sp/>r.<ref refid="class_vector_1a864d1f7b69f57a633f3b248fad3619ee" kindref="member">alloc</ref>(a.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>r.<ref refid="class_vector_1aecbdf33f934d6f2803e08c65d9c2fd1d" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>a;<sp/>++a,<sp/>++b)<sp/>r<sp/>&lt;&lt;<sp/>(*a<sp/>-<sp/>*b<sp/>*<sp/>s);</highlight></codeline>
<codeline lineno="725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1af3e9cb5124589d163810a05ee5f27f9c" kindref="member">_minus</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>a,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>b,<sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>&amp;m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>()<sp/>!=<sp/>m.<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>())<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>the<sp/>number<sp/>of<sp/>variables<sp/>is<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>m.<ref refid="class_vector_1a864d1f7b69f57a633f3b248fad3619ee" kindref="member">alloc</ref>(a.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>m.<ref refid="class_vector_1aecbdf33f934d6f2803e08c65d9c2fd1d" kindref="member">reset</ref>(a.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>(int)a.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();<sp/>++cnt)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>each<sp/>variable<sp/>has<sp/>correct<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m[cnt].count()<sp/>!=<sp/>a[cnt].count())<sp/>m[cnt]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref>(a[cnt].count());</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>m[cnt].<ref refid="class_vector_1aecbdf33f934d6f2803e08c65d9c2fd1d" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>(int)a.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();<sp/>++cnt)</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>obs<sp/>=<sp/>0;<sp/>obs<sp/>&lt;<sp/>(int)a[cnt].<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();<sp/>++obs)<sp/>m[cnt]<sp/>&lt;&lt;<sp/>(a[cnt][obs]<sp/>-<sp/>b[cnt][obs]<sp/>*<sp/>s);</highlight></codeline>
<codeline lineno="740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;b,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="746"><highlight class="normal">}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1a4f27f4442588a617c6827221c58ba571" kindref="member">ErrorLogLikelihood</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>X,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>lagX,<sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>y,<sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>lagY,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>W,</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>lambda,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;egls)<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>log-Jacobian:<sp/>SIGMA(ln(1<sp/>-<sp/>lambda<sp/>*<sp/>eigenval(i))<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>accum<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a73042642d12eec3b5299af5131c1ee83" kindref="member">MakeEstimate</ref>(<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>(),<sp/>lambda,<sp/><ref refid="polym_8h_1a5b5a395141319c5c13666a272aa1f645" kindref="member">SL_Max_Precision</ref>);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>sse<sp/>(sum-squared<sp/>error)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>XminusLambdaLagX(X.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>YminusLambdaLagY(y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1af3e9cb5124589d163810a05ee5f27f9c" kindref="member">_minus</ref>(X,<sp/>lagX,<sp/>XminusLambdaLagX,<sp/>lambda);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1af3e9cb5124589d163810a05ee5f27f9c" kindref="member">_minus</ref>(y,<sp/>lagY,<sp/>YminusLambdaLagY,<sp/>lambda);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0,<sp/>column<sp/>=<sp/>0,<sp/>deps<sp/>=<sp/>X.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>(),<sp/>dim<sp/>=<sp/>y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**cov<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*[deps],<sp/>*resid<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim];</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>deps;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>cov[row]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[deps];</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>0;<sp/>column<sp/>&lt;<sp/>deps;<sp/>column++)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cov[row][column]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>p_y(dim),<sp/>*p_x<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[deps],<sp/>eg(deps);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>dim;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>p_y.setAt(row,<sp/>YminusLambdaLagY[row]);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>deps;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>p_x[row].<ref refid="class_dense_vector_1a97fb7da8dea1acb844b89cf5e74e7801" kindref="member">alloc</ref>(dim);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>0;<sp/>column<sp/>&lt;<sp/>dim;<sp/>column++)<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_x[row].<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(column,<sp/>XminusLambdaLagX[row][column]);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1abffb96af09f2ae3ec91960165c007bfe" kindref="member">ordinaryLS</ref>(p_y,<sp/>p_x,<sp/>cov,<sp/>resid,<sp/>eg);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>deps;<sp/>row++)<sp/>egls[row]<sp/>=<sp/>eg.getValue(row);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>rs(y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>(),<sp/>0),<sp/>lagResid(y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>(),<sp/>0),<sp/>RminusLambdaLagR(y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>(),<sp/>0);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>dim;<sp/>row++)<sp/>rs[row]<sp/>=<sp/>resid[row];</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1af3e9cb5124589d163810a05ee5f27f9c" kindref="member">_minus</ref>(rs(),<sp/>lagResid(),<sp/>RminusLambdaLagR,<sp/>lambda);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>sse<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ad47a3573d1fdbae618bb0f49823c1cb7" kindref="member">norm</ref>(RminusLambdaLagR());</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>[-N/2<sp/>*<sp/>ln(u&apos;u/N)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>addOn<sp/>=<sp/>-0.5<sp/>*<sp/>y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>()<sp/>*<sp/>log(sse<sp/>/<sp/>y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>Anselin<sp/>-<sp/>Bera<sp/>(equation<sp/>37)<sp/>pg.258</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(accum<sp/>+<sp/>addOn);</highlight></codeline>
<codeline lineno="792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a1ecfa9a8dcfa20b0d87a4af9b67d410e" kindref="member">findQuadMax</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f2)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s1<sp/>=<sp/>(x0<sp/>-<sp/>x1)<sp/>*<sp/>(f2<sp/>-<sp/>f1),<sp/>s2<sp/>=<sp/>(x2<sp/>-<sp/>x1)<sp/>*<sp/>(f0<sp/>-<sp/>f1);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>denominator<sp/>=<sp/>2.0<sp/>*<sp/>(s1<sp/>-<sp/>s2);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(denominator)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>numerator<sp/>=<sp/>s1<sp/>*<sp/>(x0<sp/>-<sp/>x1)<sp/>-<sp/>s2<sp/>*<sp/>(x2<sp/>-<sp/>x1);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>x1<sp/>+<sp/>numerator<sp/>/<sp/>denominator;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1a989906d9e9a98c70247eca51ae349802" kindref="member">GoldenSectionError</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>middle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>right,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>&amp;X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;y,</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>W,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*&amp;beta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*LogLik)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>=<sp/>(sqrt((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)5)<sp/>-<sp/>1)<sp/>/<sp/>2,<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>=<sp/>1<sp/>-<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref>;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>f0,<sp/>f1,<sp/>f2,<sp/>f3;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>x0<sp/>=<sp/>left;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>x3<sp/>=<sp/>right;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>x2<sp/>=<sp/>middle;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(right<sp/>-<sp/>middle)<sp/>&gt;<sp/>fabs(middle<sp/>-<sp/>left))</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>+=<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>(right<sp/>-<sp/>middle);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>-=<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>(middle<sp/>-<sp/>left);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Counter<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>lagX;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>lagY(X[0].count()),<sp/>egls(X.<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(W,<sp/>X(),<sp/>lagX);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(W,<sp/>y(),<sp/>lagY);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>maximizing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>f2<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a4f27f4442588a617c6827221c58ba571" kindref="member">ErrorLogLikelihood</ref>(X(),<sp/>lagX(),<sp/>y(),<sp/>lagY(),<sp/>W,<sp/>x2,<sp/>egls);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>f1<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a4f27f4442588a617c6827221c58ba571" kindref="member">ErrorLogLikelihood</ref>(X(),<sp/>lagX(),<sp/>y(),<sp/>lagY(),<sp/>W,<sp/>x1,<sp/>egls);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>this<sp/>is<sp/>&apos;classic&apos;<sp/>golden<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>and<sp/>tol<sp/>is<sp/>defined<sp/>as<sp/><sp/>1e-14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fabs(x3<sp/>-<sp/>x0)<sp/>&gt;<sp/><ref refid="_m_l__im_8cpp_1ab319cb41d2e6faf11ec8cfbc3e291967" kindref="member">tol</ref><sp/>*<sp/>(fabs(x1)<sp/>+<sp/>fabs(x2)))<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f1<sp/>&lt;<sp/>f2)<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(x0,<sp/>x1,<sp/>x2,<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>*<sp/>x2<sp/>+<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>x3);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(f0,<sp/>f1,<sp/>f2,<sp/><ref refid="_m_l__im_8cpp_1a4f27f4442588a617c6827221c58ba571" kindref="member">ErrorLogLikelihood</ref>(X(),<sp/>lagX(),<sp/>y(),<sp/>lagY(),<sp/>W,<sp/>x2,<sp/>egls));</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(x3,<sp/>x2,<sp/>x1,<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>*<sp/>x1<sp/>+<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>x0);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(f3,<sp/>f2,<sp/>f1,<sp/><ref refid="_m_l__im_8cpp_1a4f27f4442588a617c6827221c58ba571" kindref="member">ErrorLogLikelihood</ref>(X(),<sp/>lagX(),<sp/>y(),<sp/>lagY(),<sp/>W,<sp/>x1,<sp/>egls));</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>++Counter;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f2<sp/>&gt;<sp/>f1)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>f1<sp/>=<sp/>f2;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>Log-likelihood</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>W.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>*LogLik<sp/>=<sp/>f1<sp/>-<sp/>n<sp/>/<sp/>2.0<sp/>-<sp/>n<sp/>/<sp/>2.0<sp/>*<sp/>log(2.0<sp/>*<sp/>M_PI);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>beta<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[X[0].<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>()];</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>(int)egls.<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>();<sp/>++cnt)<sp/>beta[cnt]<sp/>=<sp/>egls[cnt];</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x1;</highlight></codeline>
<codeline lineno="854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1a7d6e56be049abb29215a95db79361e46" kindref="member">GoldenSectionLag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>middle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>right,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;resid,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;residW,</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*LogLik)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>=<sp/>(sqrt((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)5)<sp/>-<sp/>1)<sp/>/<sp/>2,<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>=<sp/>1<sp/>-<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref>;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>f0,<sp/>f1,<sp/>f2,<sp/>f3;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>x0<sp/>=<sp/>left;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>x3<sp/>=<sp/>right;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>x2<sp/>=<sp/>middle;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(right<sp/>-<sp/>middle)<sp/>&gt;<sp/>fabs(middle<sp/>-<sp/>left))</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>+=<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>(right<sp/>-<sp/>middle);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>-=<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>(middle<sp/>-<sp/>left);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Counter<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>f2<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a3228ba56da48a112a3bf6dd2de5010a8" kindref="member">CL</ref>(resid,<sp/>residW,<sp/>x2);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>f1<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a3228ba56da48a112a3bf6dd2de5010a8" kindref="member">CL</ref>(resid,<sp/>residW,<sp/>x1);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fabs(x3<sp/>-<sp/>x0)<sp/>&gt;<sp/><ref refid="_m_l__im_8cpp_1ab319cb41d2e6faf11ec8cfbc3e291967" kindref="member">tol</ref><sp/>*<sp/>(fabs(x1)<sp/>+<sp/>fabs(x2)))<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f1<sp/>&lt;<sp/>f2)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(x0,<sp/>x1,<sp/>x2,<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>*<sp/>x2<sp/>+<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>x3);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(f0,<sp/>f1,<sp/>f2,<sp/><ref refid="_m_l__im_8cpp_1a3228ba56da48a112a3bf6dd2de5010a8" kindref="member">CL</ref>(resid,<sp/>residW,<sp/>x2));</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(x3,<sp/>x2,<sp/>x1,<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>*<sp/>x1<sp/>+<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>x0);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(f3,<sp/>f2,<sp/>f1,<sp/><ref refid="_m_l__im_8cpp_1a3228ba56da48a112a3bf6dd2de5010a8" kindref="member">CL</ref>(resid,<sp/>residW,<sp/>x1));</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>++Counter;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f2<sp/>&gt;<sp/>f1)<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>f1<sp/>=<sp/>f2;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>resid.<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>*LogLik<sp/>=<sp/>f1<sp/>-<sp/>n<sp/>/<sp/>2.0<sp/>-<sp/>n<sp/>/<sp/>2.0<sp/>*<sp/>log(2.0<sp/>*<sp/>M_PI);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x1;</highlight></codeline>
<codeline lineno="889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1a66634999cde8c7661b2290d2b21781b8" kindref="member">GoldenSection</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>middle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>right,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;resid,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;residW)<sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>=<sp/>(sqrt((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)5)<sp/>-<sp/>1)<sp/>/<sp/>2,<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>=<sp/>1<sp/>-<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref>;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>f0,<sp/>f1,<sp/>f2,<sp/>f3;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>x0<sp/>=<sp/>left;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>x3<sp/>=<sp/>right;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>x2<sp/>=<sp/>middle;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(right<sp/>-<sp/>middle)<sp/>&gt;<sp/>fabs(middle<sp/>-<sp/>left))</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>+=<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>(right<sp/>-<sp/>middle);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>-=<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>(middle<sp/>-<sp/>left);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Counter<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>f2<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a3228ba56da48a112a3bf6dd2de5010a8" kindref="member">CL</ref>(resid,<sp/>residW,<sp/>x2);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>f1<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a3228ba56da48a112a3bf6dd2de5010a8" kindref="member">CL</ref>(resid,<sp/>residW,<sp/>x1);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fabs(x3<sp/>-<sp/>x0)<sp/>&gt;<sp/><ref refid="_m_l__im_8cpp_1ab319cb41d2e6faf11ec8cfbc3e291967" kindref="member">tol</ref><sp/>*<sp/>(fabs(x1)<sp/>+<sp/>fabs(x2)))<sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f1<sp/>&lt;<sp/>f2)<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(x0,<sp/>x1,<sp/>x2,<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>*<sp/>x2<sp/>+<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>x3);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(f0,<sp/>f1,<sp/>f2,<sp/><ref refid="_m_l__im_8cpp_1a3228ba56da48a112a3bf6dd2de5010a8" kindref="member">CL</ref>(resid,<sp/>residW,<sp/>x2));</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(x3,<sp/>x2,<sp/>x1,<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>*<sp/>x1<sp/>+<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>x0);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(f3,<sp/>f2,<sp/>f1,<sp/><ref refid="_m_l__im_8cpp_1a3228ba56da48a112a3bf6dd2de5010a8" kindref="member">CL</ref>(resid,<sp/>residW,<sp/>x1));</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>++Counter;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f2<sp/>&gt;<sp/>f1)<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>f1<sp/>=<sp/>f2;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x1;</highlight></codeline>
<codeline lineno="920"><highlight class="normal">}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a42ed51b282a7dc2debb70ac06ff49d4b" kindref="member">ComputeExtreme</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d10,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d12,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f10,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f12,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1)<sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>denominator<sp/>=<sp/>d10<sp/>*<sp/>f12<sp/>-<sp/>d12<sp/>*<sp/>f10;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(denominator<sp/>&lt;<sp/>1e-14)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x1;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>numerator<sp/>=<sp/>d10<sp/>*<sp/>d10<sp/>*<sp/>f12<sp/>-<sp/>d12<sp/>*<sp/>d12<sp/>*<sp/>f10;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x1<sp/>+<sp/>numerator<sp/>/<sp/>denominator<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1acbf6a14e6905563b12a6dc97c25781da" kindref="member">Converge</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>middle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>right,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;resid,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;residW)<sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>x0,<sp/>x1,<sp/>x2,<sp/>f0,<sp/>f1,<sp/>f2,<sp/>dx,<sp/>xn;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>x0<sp/>=<sp/>left;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>middle;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>x2<sp/>=<sp/>right;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>f0<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a3228ba56da48a112a3bf6dd2de5010a8" kindref="member">CL</ref>(resid,<sp/>residW,<sp/>x0);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>f1<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a3228ba56da48a112a3bf6dd2de5010a8" kindref="member">CL</ref>(resid,<sp/>residW,<sp/>x1);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>f2<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a3228ba56da48a112a3bf6dd2de5010a8" kindref="member">CL</ref>(resid,<sp/>residW,<sp/>x2);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>xn<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a42ed51b282a7dc2debb70ac06ff49d4b" kindref="member">ComputeExtreme</ref>(x1<sp/>-<sp/>x0,<sp/>x1<sp/>-<sp/>x2,<sp/>f1<sp/>-<sp/>f0,<sp/>f1<sp/>-<sp/>f2,<sp/>x1);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>==<sp/>xn)<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xn<sp/>&gt;<sp/>x1)<sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>x1<sp/>-<sp/>x0;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>x0<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>xn;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>f0<sp/>=<sp/>f1;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>f1<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a3228ba56da48a112a3bf6dd2de5010a8" kindref="member">CL</ref>(resid,<sp/>residW,<sp/>x1);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xn<sp/>&lt;<sp/>x1)<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>xn;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>f2<sp/>=<sp/>f1;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xn;</highlight></codeline>
<codeline lineno="956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a2346a4b9eb9d0b67dc0ea3b55a5f4ff2" kindref="member">skipTillNumber</ref>(std::ifstream<sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(f<sp/>&gt;&gt;<sp/>ch)</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ch<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>ch<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>||<sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>||<sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/>||<sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f)<sp/>f.putback(ch);</highlight></codeline>
<codeline lineno="963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1af02288015755b1e979a4f3bb8d229152" kindref="member">readInt</ref>(std::ifstream<sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1a2346a4b9eb9d0b67dc0ea3b55a5f4ff2" kindref="member">skipTillNumber</ref>(f);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>f<sp/>&gt;&gt;<sp/>result;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a5251df0586ef200d95eb1077961cfdae" kindref="member">readDouble</ref>(std::ifstream<sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1a2346a4b9eb9d0b67dc0ea3b55a5f4ff2" kindref="member">skipTillNumber</ref>(f);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>f<sp/>&gt;&gt;<sp/>result;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="977"><highlight class="normal">}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a608d31c4adfc5d8fe77dd197c5425a17" kindref="member">extract</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sparse_vector" kindref="compound">SparseVector</ref><sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*scale,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;trace,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;trace2,</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;frobenius)<sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t2<sp/>=<sp/>0,<sp/>fr<sp/>=<sp/>0,<sp/>t;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale2<sp/>=<sp/>0,<sp/>ssq2<sp/>=<sp/>1,<sp/>scalef<sp/>=<sp/>0,<sp/>ssqf<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>v.<ref refid="class_sparse_vector_1a56d0a0b1ad231ce13216f483c3f2bdf1" kindref="member">getNzEntries</ref>();<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>v.<ref refid="class_sparse_vector_1a3eaf794e7aceb9055f42b69b7e219b2d" kindref="member">getIx</ref>(cnt);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>fabs(v.<ref refid="class_sparse_vector_1a39b8aab5bb3957b644e4b32b51277259" kindref="member">getValue</ref>(ix));</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scale2<sp/>&lt;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>scale2<sp/>/<sp/>val;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssq2<sp/>=<sp/>1.0<sp/>+<sp/>ssq2<sp/>*<sp/>t<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scale2<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>val<sp/>/<sp/>scale2;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssq2<sp/>+=<sp/>t<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vf<sp/>=<sp/>val<sp/>/<sp/>scale[ix];</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scalef<sp/>&lt;<sp/>vf)<sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>scalef<sp/>/<sp/>vf;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssqf<sp/>=<sp/>1.0<sp/>+<sp/>ssqf<sp/>*<sp/>t<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scalef<sp/>=<sp/>vf;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vf<sp/>&gt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>vf<sp/>/<sp/>scalef;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssqf<sp/>+=<sp/>t<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>+=<sp/>geoda_sqr(val);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fr<sp/>+=<sp/>geoda_sqr(<sp/>val<sp/>/<sp/>scale[ix]<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>t2<sp/>=<sp/>scale2<sp/>*<sp/>scale2<sp/>*<sp/>ssq2;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>fr<sp/>=<sp/>scalef<sp/>*<sp/>scalef<sp/>*<sp/>ssqf;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>trace<sp/>+=<sp/>v.<ref refid="class_sparse_vector_1a39b8aab5bb3957b644e4b32b51277259" kindref="member">getValue</ref>(row);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>trace2<sp/>+=<sp/>t2;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>frobenius<sp/>+=<sp/>fr<sp/>*<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(scale[row]);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a608d31c4adfc5d8fe77dd197c5425a17" kindref="member">extract</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*scale,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;trace,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;trace2,</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;frobenius)<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t2<sp/>=<sp/>0,<sp/>fr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>v.<ref refid="class_dense_vector_1ab8cd31005d532650e2173b1f170a9e80" kindref="member">getSize</ref>();<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>t2<sp/>+=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(v.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt));</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>fr<sp/>+=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(v.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt)<sp/>/<sp/>scale[cnt]);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>trace<sp/>+=<sp/>v.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(row);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>trace2<sp/>+=<sp/>t2;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/>frobenius<sp/>+=<sp/>fr<sp/>*<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(scale[row]);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EasyMatInverse<sp/><sp/>--</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inverts<sp/>any<sp/>matrix<sp/>of<sp/>size<sp/>2<sp/>by<sp/>2<sp/>or<sp/>less.<sp/>The<sp/>matrix<sp/>does<sp/>not<sp/>have<sp/>to<sp/>be<sp/>symmetric.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>false<sp/>if<sp/>fails<sp/>(matrix<sp/>is<sp/>not<sp/>a<sp/>full<sp/>rank<sp/>matrix<sp/>and<sp/>true<sp/>if<sp/>success.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ac2d128434892366ce8c340419542bc77" kindref="member">EasyMatInverse</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**mt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(mt[0][0])<sp/>&lt;<sp/><ref refid="mix_8h_1ad000f07d044bbdd4abbfa2cfb094f0e4" kindref="member">ML_SMALL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mt[0][0]<sp/>=<sp/>1.0<sp/>/<sp/>mt[0][0];<sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>inverse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>dim<sp/>==<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det<sp/>=<sp/>mt[0][0]<sp/>*<sp/>mt[1][1]<sp/>-<sp/>mt[1][0]<sp/>*<sp/>mt[0][1];</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(det)<sp/>&lt;<sp/><ref refid="mix_8h_1ad000f07d044bbdd4abbfa2cfb094f0e4" kindref="member">ML_SMALL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mt[1][0]<sp/>/=<sp/>-det;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mt[0][1]<sp/>/=<sp/>-det;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(mt[0][0],<sp/>mt[1][1]);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mt[1][1]<sp/>/=<sp/>det;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mt[0][0]<sp/>/=<sp/>det;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1aa22efc9e441d13872b65fc00e62919b4" kindref="member">ScalProd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stop1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ValueAtStop<sp/>=<sp/>v1[stop1];</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elt<sp/>=<sp/>0;<sp/>elt<sp/>&lt;<sp/>stop1;<sp/>++elt)<sp/>ValueAtStop<sp/>-=<sp/>v1[elt]<sp/>*<sp/>v2[elt];</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>v1[stop1]<sp/>=<sp/>ValueAtStop<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1aa22efc9e441d13872b65fc00e62919b4" kindref="member">ScalProd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stop1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**v1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ValueAtStop<sp/>=<sp/>v1[stop1][stop1];</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elt<sp/>=<sp/>0;<sp/>elt<sp/>&lt;<sp/>stop1;<sp/>++elt)<sp/>ValueAtStop<sp/>-=<sp/>v1[stop1][elt]<sp/>*<sp/>v2[elt];</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/>v1[stop1][stop1]<sp/>=<sp/>ValueAtStop<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a42eec7d171cea5f83780ec10e12ba347" kindref="member">ScalProd1</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stop1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v2)<sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ValueAtStart<sp/>=<sp/>v1[start1];</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elt<sp/>=<sp/>start1<sp/>+<sp/>1;<sp/>elt<sp/>&lt;<sp/>stop1;<sp/>++elt)<sp/>ValueAtStart<sp/>+=<sp/>v1[elt]<sp/>*<sp/>v2[elt];</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>v2[stop1]<sp/>=<sp/>-ValueAtStart;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a701853400c30a775a29c855fec54a7d8" kindref="member">ScalProd2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stop1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*diag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first)<sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ValueAtStart<sp/>=<sp/>diag[start1];</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start1<sp/>!=<sp/>first)<sp/>ValueAtStart<sp/>=<sp/>ValueAtStart<sp/>*<sp/>v2[start1];</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elt<sp/>=<sp/>start1<sp/>+<sp/>1;<sp/>elt<sp/>&lt;<sp/>stop1;<sp/>++elt)<sp/>ValueAtStart<sp/>+=<sp/>(diag[elt]<sp/>*<sp/>v1[elt]<sp/>*<sp/>v2[elt]);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(ValueAtStart)<sp/>&lt;<sp/><ref refid="mix_8h_1ad000f07d044bbdd4abbfa2cfb094f0e4" kindref="member">ML_SMALL</ref>)<sp/>ValueAtStart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/>v1[first]<sp/>=<sp/>ValueAtStart;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1aa446dfcfd6e04db8d3e63d8dcfa533c2" kindref="member">CopyMatrix</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**m,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**&amp;a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim2)<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*double_ptr_type;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>double_ptr_type[dim1];</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>a[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim2];</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>dim2;<sp/>j++)<sp/>a[i][j]<sp/>=<sp/>m[i][j];</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a76b473e0366302665b03e4e01bade1b8" kindref="member">CopyVector</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*&amp;a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*b,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[n];</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>n;<sp/>++cnt)<sp/>a[cnt]<sp/>=<sp/>b[cnt];</highlight></codeline>
<codeline lineno="1097"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stop,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v1[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diag[])<sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>v1[stop];</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>stop;<sp/>++cnt)<sp/>s<sp/>-=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(v1[cnt])<sp/>*<sp/>diag[cnt];</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a7d8ae6baa031ab8e1679099711b30a52" kindref="member">makeSum2</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stop,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v1[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v2[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diag[])<sp/>{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>v1[stop];</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>stop;<sp/>++cnt)<sp/>s<sp/>-=<sp/>v1[cnt]<sp/>*<sp/>v2[cnt]<sp/>*<sp/>diag[cnt];</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>v1[stop]<sp/>=<sp/>s<sp/>/<sp/>diag[stop];</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a7e9ec726d6467bc73786883b4a6bb895" kindref="member">product1</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stop,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v1[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v2[])<sp/>{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>valueAtStart<sp/>=<sp/>v1[start];</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>start<sp/>+<sp/>1;<sp/>cnt<sp/>&lt;<sp/>stop;<sp/>++cnt)<sp/>valueAtStart<sp/>+=<sp/>v1[cnt]<sp/>*<sp/>v2[cnt];</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>v2[stop]<sp/>=<sp/>-valueAtStart;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a8c334e2991e0c256106950e2a870ddff" kindref="member">product2</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v1[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v2[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diag[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>valueAtStart<sp/>=<sp/>diag[start];</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>!=<sp/>first)<sp/>valueAtStart<sp/>*=<sp/>v2[start];</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>start<sp/>+<sp/>1;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>valueAtStart<sp/>+=<sp/>diag[cnt]<sp/>*<sp/>v1[cnt]<sp/>*<sp/>v2[cnt];</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>v1[first]<sp/>=<sp/>(fabs(valueAtStart)<sp/>&lt;<sp/><ref refid="mix_8h_1ad000f07d044bbdd4abbfa2cfb094f0e4" kindref="member">ML_SMALL</ref>)<sp/>?<sp/>0<sp/>:<sp/>valueAtStart;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SymMatInverse<sp/>--</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inverts<sp/>a<sp/>symmetric<sp/>matrix<sp/>of<sp/>any<sp/>size<sp/>in<sp/>situ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>false<sp/>if<sp/>fails<sp/>(matrix<sp/>is<sp/>not<sp/>a<sp/>full<sp/>rank<sp/>matrix<sp/>and<sp/>true<sp/>if<sp/>success.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Uses<sp/>analog<sp/>of<sp/>Choleski<sp/>decomposition:<sp/>L-D-L&apos;<sp/>decomposition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a8d6c7b80b63056009958afd0f1647aea" kindref="member">SymMatInverse</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**mt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>dim,<sp/>nrhs<sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lda<sp/>=<sp/>dim,<sp/>ldb<sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ipiv<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[dim],<sp/>info<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim<sp/>*<sp/>dim];</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim<sp/>*<sp/>dim];</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>dim;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a[i<sp/>+<sp/>dim<sp/>*<sp/>j]<sp/>=<sp/>mt[i][j];</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b[i<sp/>+<sp/>dim<sp/>*<sp/>j]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>b[i<sp/>+<sp/>dim<sp/>*<sp/>i]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>__WXMAC__<sp/>to<sp/>call<sp/>vecLib<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>#ifdef<sp/>WORDS_BIGENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>#ifdef<sp/>__WXMAC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dgesv_(&amp;n,<sp/>&amp;nrhs,<sp/>a,<sp/>&amp;lda,<sp/>ipiv,<sp/>b,<sp/>&amp;ldb,<sp/>&amp;info);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1ab7664b32c8621ec1c9c667ef4d684e6b" kindref="member">dgesv_</ref>((integer<sp/>*)&amp;n,<sp/>(integer<sp/>*)&amp;nrhs,<sp/>(doublereal<sp/>*)a,<sp/>(integer<sp/>*)&amp;lda,<sp/>(integer<sp/>*)ipiv,<sp/>(doublereal<sp/>*)b,</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(integer<sp/>*)&amp;ldb,<sp/>(integer<sp/>*)&amp;info);</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!info)<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>dim;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mt[i][j]<sp/>=<sp/>b[i<sp/>+<sp/>dim<sp/>*<sp/>j];</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a8d6c7b80b63056009958afd0f1647aea" kindref="member">SymMatInverse</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**mt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**&amp;cov)<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1aa446dfcfd6e04db8d3e63d8dcfa533c2" kindref="member">CopyMatrix</ref>(mt,<sp/>cov,<sp/>dim,<sp/>dim);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>dim,<sp/>nrhs<sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lda<sp/>=<sp/>dim,<sp/>ldb<sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ipiv<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[dim],<sp/>info<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim<sp/>*<sp/>dim];</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*b<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim<sp/>*<sp/>dim];</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>dim;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a[i<sp/>+<sp/>dim<sp/>*<sp/>j]<sp/>=<sp/>mt[i][j];</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b[i<sp/>+<sp/>dim<sp/>*<sp/>j]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>b[i<sp/>+<sp/>dim<sp/>*<sp/>i]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>__WXMAC__<sp/>to<sp/>call<sp/>vecLib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#ifdef<sp/>WORDS_BIGENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__WXMAC__MMM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1ab7664b32c8621ec1c9c667ef4d684e6b" kindref="member">dgesv_</ref>(&amp;n,<sp/>&amp;nrhs,<sp/>a,<sp/>&amp;lda,<sp/>ipiv,<sp/>b,<sp/>&amp;ldb,<sp/>&amp;info);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1ab7664b32c8621ec1c9c667ef4d684e6b" kindref="member">dgesv_</ref>((integer<sp/>*)&amp;n,<sp/>(integer<sp/>*)&amp;nrhs,<sp/>(doublereal<sp/>*)a,<sp/>(integer<sp/>*)&amp;lda,<sp/>(integer<sp/>*)ipiv,<sp/>(doublereal<sp/>*)b,</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(integer<sp/>*)&amp;ldb,<sp/>(integer<sp/>*)&amp;info);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!info)<sp/>{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>dim;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mt[i][j]<sp/>=<sp/>b[i<sp/>+<sp/>dim<sp/>*<sp/>j];</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a34beccf854252b640ecf4ce44858a2b3" kindref="member">residual</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;rhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;ols,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;resid)<sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>rhs.<ref refid="class_dense_vector_1ab8cd31005d532650e2173b1f170a9e80" kindref="member">getSize</ref>(),<sp/>vars<sp/>=<sp/><ref refid="namespacegeoda_1a4bb896c1edfb733407f3bc834ef9b3dc" kindref="member">ols</ref>.getSize();</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/>resid.<ref refid="class_dense_vector_1a97fb7da8dea1acb844b89cf5e74e7801" kindref="member">alloc</ref>(dim);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/>resid.<ref refid="class_dense_vector_1aa90dfac5d825ac9c23b98d05668e7d66" kindref="member">copy</ref>(rhs);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars;<sp/>++cnt)<sp/>resid.<ref refid="class_dense_vector_1add4bd59500ec4805abbd203dfb273226" kindref="member">addTimes</ref>(X[cnt],<sp/>-<ref refid="namespacegeoda_1a4bb896c1edfb733407f3bc834ef9b3dc" kindref="member">ols</ref>.getValue(cnt));</highlight></codeline>
<codeline lineno="1206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a247512a5a9049afd6687fb9345caa411" kindref="member">PrintCovariance</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>computes<sp/>OLS<sp/>and<sp/>return<sp/>the<sp/>inv<sp/>cov</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>y<sp/>--<sp/>dependent<sp/>variable;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>X<sp/>--<sp/>independednt<sp/>variables;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IncludeConst<sp/>--<sp/>&apos;true&apos;<sp/>if<sp/>include<sp/>intercept;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inverse<sp/>--<sp/>inv(X&apos;X);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight><highlight class="comment">//<sp/>resid<sp/>--<sp/>residuals;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ols<sp/>--<sp/>coefficients.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="comment">/*bool<sp/>OLS(DenseVector<sp/>&amp;y,</highlight></codeline>
<codeline lineno="1217"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DenseVector<sp/>*<sp/>X,</highlight></codeline>
<codeline lineno="1218"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>IncludeConst,</highlight></codeline>
<codeline lineno="1219"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>**<sp/>&amp;cov,</highlight></codeline>
<codeline lineno="1220"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>*<sp/>resid,</highlight></codeline>
<codeline lineno="1221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DenseVector<sp/>&amp;ols)</highlight></codeline>
<codeline lineno="1222"><highlight class="comment">{</highlight></codeline>
<codeline lineno="1223"><highlight class="comment"></highlight></codeline>
<codeline lineno="1224"><highlight class="comment"></highlight></codeline>
<codeline lineno="1225"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>int<sp/>vars<sp/>=<sp/>ols.getSize();<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>vars<sp/>--<sp/>number<sp/>of<sp/>independent<sp/>variables</highlight></codeline>
<codeline lineno="1226"><highlight class="comment"></highlight></codeline>
<codeline lineno="1227"><highlight class="comment"></highlight></codeline>
<codeline lineno="1228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(vars<sp/>==<sp/>0)<sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="1229"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obs=<sp/>y.getSize();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>number<sp/>of<sp/>observations</highlight></codeline>
<codeline lineno="1230"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varsIncl<sp/>=<sp/>vars,<sp/>row,<sp/>column;</highlight></codeline>
<codeline lineno="1231"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val;</highlight></codeline>
<codeline lineno="1232"><highlight class="comment"></highlight></codeline>
<codeline lineno="1233"><highlight class="comment"></highlight></codeline>
<codeline lineno="1234"><highlight class="comment"><sp/><sp/><sp/><sp/>cov<sp/>=<sp/>new<sp/>double*<sp/>[varsIncl];</highlight></codeline>
<codeline lineno="1235"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(row=<sp/>0;<sp/>row<sp/>&lt;<sp/>varsIncl;<sp/>++row)</highlight></codeline>
<codeline lineno="1236"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cov[row]<sp/>=<sp/>new<sp/>double[varsIncl];</highlight></codeline>
<codeline lineno="1237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc(cov[row],<sp/>varsIncl);<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>allocate<sp/>cov[row]<sp/>&amp;<sp/>initialize<sp/>to<sp/>zero</highlight></codeline>
<codeline lineno="1238"><highlight class="comment"></highlight></codeline>
<codeline lineno="1239"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(row=<sp/>0;<sp/>row<sp/>&lt;<sp/>vars;<sp/>++row)</highlight></codeline>
<codeline lineno="1240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(column<sp/>=<sp/>row+1;<sp/>column<sp/>&lt;<sp/>vars;<sp/>++column)</highlight></codeline>
<codeline lineno="1242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val=<sp/>cov[row][column]<sp/>=<sp/>cov[column][row]<sp/>=<sp/>X[row].product(X[column]);</highlight></codeline>
<codeline lineno="1243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cov[row][row]<sp/>=<sp/>X[row].norm();</highlight></codeline>
<codeline lineno="1244"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1245"><highlight class="comment"></highlight></codeline>
<codeline lineno="1246"><highlight class="comment"></highlight></codeline>
<codeline lineno="1247"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(SymMatInverse(cov,<sp/>varsIncl)<sp/>==<sp/>false)</highlight></codeline>
<codeline lineno="1248"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="1249"><highlight class="comment"></highlight></codeline>
<codeline lineno="1250"><highlight class="comment"></highlight></codeline>
<codeline lineno="1251"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>*temp<sp/>=<sp/>new<sp/>double[<sp/>varsIncl<sp/>];</highlight></codeline>
<codeline lineno="1252"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(row=<sp/>0;<sp/>row<sp/>&lt;<sp/>vars;<sp/>++row)</highlight></codeline>
<codeline lineno="1253"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp[row]<sp/>=<sp/>y.product(X[row]);</highlight></codeline>
<codeline lineno="1254"><highlight class="comment"></highlight></codeline>
<codeline lineno="1255"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>varsIncl;<sp/>++row)</highlight></codeline>
<codeline lineno="1256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ols.setAt(<sp/>row,<sp/>product(cov[row],<sp/>temp,<sp/>varsIncl)<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>compute<sp/>ols</highlight></codeline>
<codeline lineno="1257"><highlight class="comment"></highlight></codeline>
<codeline lineno="1258"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(column=<sp/>0;<sp/>column<sp/>&lt;<sp/>obs;<sp/>++column)</highlight></codeline>
<codeline lineno="1259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tempr<sp/>=<sp/>y.getValue(column);</highlight></codeline>
<codeline lineno="1261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(row=<sp/>0;<sp/>row<sp/>&lt;<sp/>vars;<sp/>++row)</highlight></codeline>
<codeline lineno="1262"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempr<sp/>-=<sp/>ols.getValue(row)<sp/>*<sp/>X[row].getValue(column);</highlight></codeline>
<codeline lineno="1264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1265"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resid[column]<sp/>=<sp/>tempr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>compute<sp/>residuals</highlight></codeline>
<codeline lineno="1266"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1267"><highlight class="comment"></highlight></codeline>
<codeline lineno="1268"><highlight class="comment"><sp/><sp/><sp/><sp/>release(&amp;temp);</highlight></codeline>
<codeline lineno="1269"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="1270"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="comment">//<sp/>computes<sp/>OLS<sp/>and<sp/>return<sp/>the<sp/>inv<sp/>cov</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>y<sp/>--<sp/>dependent<sp/>variable;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>X<sp/>--<sp/>independednt<sp/>variables;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IncludeConst<sp/>--<sp/>&apos;true&apos;<sp/>if<sp/>include<sp/>intercept;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inverse<sp/>--<sp/>inv(X&apos;X);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>resid<sp/>--<sp/>residuals;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ols<sp/>--<sp/>coefficients.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1abffb96af09f2ae3ec91960165c007bfe" kindref="member">ordinaryLS</ref>(<ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;y,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*X,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**&amp;cov,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*resid,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;ols)<sp/>{</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vars<sp/>=<sp/><ref refid="namespacegeoda_1a4bb896c1edfb733407f3bc834ef9b3dc" kindref="member">ols</ref>.getSize();<sp/><sp/></highlight><highlight class="comment">//<sp/>vars<sp/>--<sp/>number<sp/>of<sp/>independent<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vars<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>obs<sp/>=<sp/>y.<ref refid="class_dense_vector_1ab8cd31005d532650e2173b1f170a9e80" kindref="member">getSize</ref>();<sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>observations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0,<sp/>column<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>vars;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>0;<sp/>column<sp/>&lt;<sp/>vars;<sp/>column++)<sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cov[row][column]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>SVD<sp/>to<sp/>calculate<sp/>matrix<sp/>inversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>dgesvd_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*temp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[vars];</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>vars;<sp/>row++)<sp/>temp[row]<sp/>=<sp/>y.<ref refid="class_dense_vector_1a73a9483af1a14b8b8a6ef8ade3e8eb0d" kindref="member">product</ref>(X[row]);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>jobu<sp/>=<sp/></highlight><highlight class="charliteral">&apos;S&apos;</highlight><highlight class="normal">,<sp/>jobvt<sp/>=<sp/></highlight><highlight class="charliteral">&apos;S&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>obs,<sp/>n<sp/>=<sp/>vars;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lda<sp/>=<sp/>obs,<sp/>ldu<sp/>=<sp/>obs,<sp/>ldvt<sp/>=<sp/>vars,<sp/>lwork<sp/>=<sp/>5<sp/>*<sp/>obs,<sp/>info<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[obs<sp/>*<sp/>vars];</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*s<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[vars];</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*u<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[ldu<sp/>*<sp/>vars];</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vt<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[ldvt<sp/>*<sp/>vars];</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*work<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[lwork];</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>obs;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>0;<sp/>column<sp/>&lt;<sp/>vars;<sp/>column++)<sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a[row<sp/>+<sp/>obs<sp/>*<sp/>column]<sp/>=<sp/>X[column].<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(row);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>__WXMAC__<sp/>to<sp/>call<sp/>vecLib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#ifdef<sp/>WORDS_BIGENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__WXMAC__MMM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1a032d14e2ba792af7b5338313223b20bb" kindref="member">dgesvd_</ref>(&amp;jobu,<sp/>&amp;jobvt,<sp/>&amp;m,<sp/>&amp;n,<sp/>a,<sp/>&amp;lda,<sp/>s,<sp/>u,<sp/>&amp;ldu,<sp/>vt,<sp/>&amp;ldvt,<sp/>work,<sp/>&amp;lwork,<sp/>&amp;info);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1a032d14e2ba792af7b5338313223b20bb" kindref="member">dgesvd_</ref>(&amp;jobu,<sp/>&amp;jobvt,<sp/>(integer<sp/>*)&amp;m,<sp/>(integer<sp/>*)&amp;n,<sp/>(doublereal<sp/>*)a,<sp/>(integer<sp/>*)&amp;lda,<sp/>(doublereal<sp/>*)s,</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(doublereal<sp/>*)u,<sp/>(integer<sp/>*)&amp;ldu,<sp/>(doublereal<sp/>*)vt,<sp/>(integer<sp/>*)&amp;ldvt,<sp/>(doublereal<sp/>*)work,<sp/>(integer<sp/>*)&amp;lwork,</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(integer<sp/>*)&amp;info);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!info)<sp/>{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(X&apos;X)^(-1)<sp/>=<sp/>VW^(-2)V&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>vars;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>0;<sp/>column<sp/>&lt;<sp/>vars;<sp/>column++)<sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>vars;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cov[row][column]<sp/>+=<sp/>(vt[row<sp/>*<sp/>vars<sp/>+<sp/>m]<sp/>*<sp/>vt[m<sp/>+<sp/>column<sp/>*<sp/>vars])<sp/>/<sp/>(s[m]<sp/>*<sp/>s[m]);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>vars;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>0;<sp/>column<sp/>&lt;<sp/>vars;<sp/>column++)<sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>+=<sp/>cov[row][column]<sp/>*<sp/>temp[column];</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacegeoda_1a4bb896c1edfb733407f3bc834ef9b3dc" kindref="member">ols</ref>.setAt(row,<sp/>val);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" kindref="member">release</ref>(&amp;temp);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>0;<sp/>column<sp/>&lt;<sp/>obs;<sp/>column++)<sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tempr<sp/>=<sp/>y.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(column);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>vars;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tempr<sp/>-=<sp/><ref refid="namespacegeoda_1a4bb896c1edfb733407f3bc834ef9b3dc" kindref="member">ols</ref>.getValue(row)<sp/>*<sp/>X[row].<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(column);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>resid[column]<sp/>=<sp/>tempr;<sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>residuals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><ref refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" kindref="member">release</ref>(&amp;temp);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a10f53eac8da8e4374949379bf09e8db1" kindref="member">cg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref><sp/>&amp;m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;rhs,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;sol)<sp/>{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LIMIT<sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>n,<sp/>beta,<sp/>n_lag;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>resid(m.<ref refid="class_sparse_matrix_1a6b574e9d1019686f425283b29e4aa257" kindref="member">dim</ref>()),<sp/>p(m.<ref refid="class_sparse_matrix_1a6b574e9d1019686f425283b29e4aa257" kindref="member">dim</ref>()),<sp/>d(m.<ref refid="class_sparse_matrix_1a6b574e9d1019686f425283b29e4aa257" kindref="member">dim</ref>());</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/>sol.<ref refid="class_dense_vector_1aa90dfac5d825ac9c23b98d05668e7d66" kindref="member">copy</ref>(rhs);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/>m.<ref refid="class_sparse_matrix_1a28e5b50a5a3621501928dc14884262c0" kindref="member">IminusRhoThis</ref>(rho,<sp/>sol,<sp/>p);<sp/><sp/></highlight><highlight class="comment">//<sp/>p<sp/>=<sp/>(I-rho*M)*sol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/>resid.minus(rhs,<sp/>p);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>residuals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>resid.norm();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>norm<sp/>residuals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>1.0e-16<sp/>&amp;&amp;<sp/>it++<sp/>&lt;<sp/>LIMIT)<sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d.copy(resid);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>beta<sp/>=<sp/>n<sp/>/<sp/>n_lag;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d.timesPlus(resid,<sp/>beta);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>m.<ref refid="class_sparse_matrix_1a28e5b50a5a3621501928dc14884262c0" kindref="member">IminusRhoThis</ref>(rho,<sp/>d,<sp/>p);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>p<sp/>=<sp/>(I-rho*W)*d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha<sp/>=<sp/>n<sp/>/<sp/>d.product(p);<sp/><sp/></highlight><highlight class="comment">//<sp/>alpha<sp/>=<sp/>n<sp/>/<sp/>d&apos;p</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>sol.<ref refid="class_dense_vector_1add4bd59500ec4805abbd203dfb273226" kindref="member">addTimes</ref>(d,<sp/>alpha);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sol<sp/>+=<sp/>alpha*d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>resid.addTimes(p,<sp/>-alpha);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>resid<sp/>-=<sp/>alpha*p</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>n_lag<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>resid.norm();</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a16a2871850579c50c59f9c8e175c2a6c" kindref="member">log_likelihood</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ss,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nn<sp/>=<sp/>1.0<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>-0.5<sp/>*<sp/>nn<sp/>*<sp/>log(ss<sp/>/<sp/>nn);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1.0<sp/>*<sp/>((nn<sp/>/<sp/>2.0)<sp/>*<sp/>(log(2.0<sp/>*<sp/>M_PI))<sp/>+<sp/>(nn<sp/>/<sp/>2.0)<sp/>*<sp/>log((ss<sp/>/<sp/>nn))<sp/>+<sp/>(ss<sp/>/<sp/>(2.0<sp/>*<sp/>(ss<sp/>/<sp/>nn))));</highlight></codeline>
<codeline lineno="1390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a0733077df54dcde8df563ac2f8ef45bc" kindref="member">Lc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*resid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*residW,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref><sp/>&amp;w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;sol,</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;lag)<sp/>{</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>w.<ref refid="class_sparse_matrix_1a6b574e9d1019686f425283b29e4aa257" kindref="member">dim</ref>();</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>rhs(dim);</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ss,<sp/>ssSol,<sp/>ssRhs,<sp/>s;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rho<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ad47a3573d1fdbae618bb0f49823c1cb7" kindref="member">norm</ref>(resid,<sp/>dim);</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a16a2871850579c50c59f9c8e175c2a6c" kindref="member">log_likelihood</ref>(ss,<sp/>dim);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rhs.<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(cnt,<sp/>(resid[cnt]<sp/>-<sp/>residW[cnt]<sp/>*<sp/>rho)<sp/>*<sp/>w.<ref refid="class_sparse_matrix_1a76c6f1e47dca55adae87617fff13cbd4" kindref="member">getScale</ref>()[cnt]);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.setAt(<sp/>cnt,<sp/>resid[cnt]<sp/>-<sp/>residW[cnt]<sp/>*<sp/>rho<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>w.<ref refid="class_sparse_matrix_1a28e5b50a5a3621501928dc14884262c0" kindref="member">IminusRhoThis</ref>(rho,<sp/>rhs,<sp/>sol);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cg(w,<sp/>rho,<sp/>rhs,<sp/>sol);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/>ssSol<sp/>=<sp/>sol.<ref refid="class_dense_vector_1a8e5e9af36c71cfc5507fd8fac7bb02dd" kindref="member">norm</ref>();</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>=<sp/>rhs.<ref refid="class_dense_vector_1a8e5e9af36c71cfc5507fd8fac7bb02dd" kindref="member">norm</ref>();</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sol.<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(cnt,<sp/>sol.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt)<sp/>/<sp/>w.<ref refid="class_sparse_matrix_1a76c6f1e47dca55adae87617fff13cbd4" kindref="member">getScale</ref>()[cnt]);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rhs.<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(cnt,<sp/>rhs.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt)<sp/>/<sp/>w.<ref refid="class_sparse_matrix_1a76c6f1e47dca55adae87617fff13cbd4" kindref="member">getScale</ref>()[cnt]);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>ssRhs<sp/>=<sp/>rhs.<ref refid="class_dense_vector_1a8e5e9af36c71cfc5507fd8fac7bb02dd" kindref="member">norm</ref>();</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>sol.<ref refid="class_dense_vector_1a8e5e9af36c71cfc5507fd8fac7bb02dd" kindref="member">norm</ref>();</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>0,<sp/>pr<sp/>=<sp/>0,<sp/>lalpha;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)y.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt))<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>fabs((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)rhs.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt))<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>log(fabs((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)y.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt)));</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pr<sp/>+=<sp/>log(fabs((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)rhs.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt)));</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>lalpha<sp/>=<sp/>p<sp/>-<sp/>pr;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ll<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a16a2871850579c50c59f9c8e175c2a6c" kindref="member">log_likelihood</ref>(s,<sp/>dim);</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>llo<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a16a2871850579c50c59f9c8e175c2a6c" kindref="member">log_likelihood</ref>(ssRhs,<sp/>dim);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lJ<sp/>=<sp/>ll<sp/>-<sp/>llo;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ll;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a46dcc3982b60ae746550609436706c66" kindref="member">LcPrime</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*residW,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref><sp/>&amp;w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho)<sp/>{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>w.<ref refid="class_sparse_matrix_1a6b574e9d1019686f425283b29e4aa257" kindref="member">dim</ref>();</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>prime(dim),<sp/>rhs(dim);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/>w.<ref refid="class_sparse_matrix_1a760e784d0fd1fa38694e9cda78e389a6" kindref="member">matrixColumn</ref>(rhs,<sp/>v);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>rhs.<ref refid="class_dense_vector_1af65044e7f9f722e25a8cf3989371defd" kindref="member">plusAt</ref>(cnt,<sp/>-residW[cnt]);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1a10f53eac8da8e4374949379bf09e8db1" kindref="member">cg</ref>(w,<sp/>rho,<sp/>rhs,<sp/>prime);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pp<sp/>=<sp/>-0.5<sp/>*<sp/>dim<sp/>*<sp/>prime.product(v)<sp/>/<sp/>v.<ref refid="class_dense_vector_1a8e5e9af36c71cfc5507fd8fac7bb02dd" kindref="member">norm</ref>();</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pp;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a8d7ecde547bbec9b4b6feceb8aa839b4" kindref="member">run1</ref>(<ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref><sp/>&amp;w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;trace,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;trace2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;frobenius,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p_bar_min_fraction,</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p_bar_max_fraction)<sp/>{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LIMIT<sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>EPS<sp/>=<sp/>1.0e-14;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>w.<ref refid="class_sparse_matrix_1a6b574e9d1019686f425283b29e4aa257" kindref="member">dim</ref>();</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><ref refid="class_sparse_vector" kindref="compound">SparseVector</ref><sp/>sol(dim),<sp/>resid(dim),<sp/>p(dim),<sp/>d(dim);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho,<sp/>beta,<sp/>rho_lag;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>its<sp/>=<sp/>0,<sp/>nzs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/>trace<sp/>=<sp/>0,<sp/>trace2<sp/>=<sp/>0,<sp/>frobenius<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s0<sp/>=<sp/>0,<sp/>s1<sp/>=<sp/>0,<sp/>s2<sp/>=<sp/>0,<sp/>sse<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gs0<sp/>=<sp/>0,<sp/>gs1<sp/>=<sp/>0,<sp/>gs2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g_min,<sp/>g_max,<sp/>prev_g_val;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cur_g_val,<sp/>g_val_init,<sp/>g_val_final,<sp/>g_val_range;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loop_min<sp/>=<sp/>0,<sp/>loop_max<sp/>=<sp/>max(0,<sp/>dim<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(true)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>g_min<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>g_val_init<sp/>=<sp/>p_bar_min_fraction<sp/>*<sp/>g_max;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>g_val_final<sp/>=<sp/>p_bar_max_fraction<sp/>*<sp/>g_max;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>g_val_range<sp/>=<sp/>g_val_final<sp/>-<sp/>g_val_init;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>prev_g_val<sp/>=<sp/>g_val_init;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>cur_g_val<sp/>=<sp/>prev_g_val;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>dim;<sp/>++ix)<sp/>{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(true)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>cur_g_val<sp/>=<sp/>(ix<sp/>*<sp/>g_val_range)<sp/>/<sp/>loop_max<sp/>+<sp/>g_val_init;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(cur_g_val<sp/>&gt;<sp/>prev_g_val)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>prev_g_val<sp/>=<sp/>cur_g_val;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>sol.<ref refid="class_dense_vector_1ac9cb9fd0c0b7785f5373a389804c9987" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>sol.<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(ix,<sp/>1);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>w.<ref refid="class_sparse_matrix_1ac0be6b83481087a0ca05db3a8063e118" kindref="member">rowIminusRhoThis</ref>(rr,<sp/>p,<sp/>sol);<sp/><sp/></highlight><highlight class="comment">//<sp/>p<sp/>=<sp/>Ax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>resid.minus(sol,<sp/>p);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>r<sp/>=<sp/>b<sp/>-<sp/>Ax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>rho<sp/>=<sp/>resid.norm();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rho<sp/>=<sp/>ss<sp/>of<sp/>resid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iteration<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(rho<sp/>&gt;<sp/>EPS<sp/>&amp;&amp;<sp/>it<sp/>&lt;<sp/>LIMIT)<sp/>{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.copy(resid);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beta<sp/>=<sp/>rho<sp/>/<sp/>rho_lag;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.timesPlus(resid,<sp/>beta);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w.<ref refid="class_sparse_matrix_1ac0be6b83481087a0ca05db3a8063e118" kindref="member">rowIminusRhoThis</ref>(rr,<sp/>p,<sp/>d);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>p<sp/>=<sp/>Ad</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha<sp/>=<sp/>rho<sp/>/<sp/>d.product(p);<sp/><sp/></highlight><highlight class="comment">//<sp/>alpha<sp/>=<sp/>rho<sp/>/<sp/>d&apos;p</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sol.<ref refid="class_dense_vector_1add4bd59500ec4805abbd203dfb273226" kindref="member">addTimes</ref>(d,<sp/>alpha);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sol<sp/>=<sp/>sol<sp/>+<sp/>alpha*d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resid.addTimes(p,<sp/>-alpha);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>resid<sp/>=<sp/>resid<sp/>-<sp/>alpha*p</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rho_lag<sp/>=<sp/>rho;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rho<sp/>=<sp/>resid.norm();</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s0<sp/>=<sp/>s1;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>s2;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>w.<ref refid="class_sparse_matrix_1aa95314357abb485e134f750252317115" kindref="member">getRow</ref>(ix).<ref refid="class_sparse_row_1a8bffec85cee5a11358ca975b68925d5b" kindref="member">timesColumn</ref>(sol);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/>w.<ref refid="class_sparse_matrix_1a13e4bc731bac5f1c3c4ff0abf123af99" kindref="member">rowMatrix</ref>(p,<sp/>sol);<sp/><sp/></highlight><highlight class="comment">//<sp/>p<sp/>=<sp/>(Winv(I-rW))i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a608d31c4adfc5d8fe77dd197c5425a17" kindref="member">extract</ref>(p,<sp/>w.<ref refid="class_sparse_matrix_1a76c6f1e47dca55adae87617fff13cbd4" kindref="member">getScale</ref>(),<sp/>ix,<sp/>trace,<sp/>trace2,<sp/>frobenius);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/>its<sp/>+=<sp/>it;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/>nzs<sp/>+=<sp/>sol.<ref refid="class_dense_vector_1a11e9945189d858f40876c88248baeee1" kindref="member">getNzEntries</ref>();</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>se<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s2<sp/>-<sp/>s1<sp/>&gt;<sp/>1.0e-14)<sp/>se<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(s2<sp/>-<sp/>s1)<sp/>/<sp/>(s2<sp/>-<sp/>2.0<sp/>*<sp/>s1<sp/>+<sp/>s0);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>sse<sp/>+=<sp/>s2<sp/>-<sp/>se;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/>gs0<sp/>+=<sp/>s0;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>gs1<sp/>+=<sp/>s1;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>gs2<sp/>+=<sp/>s2;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(p_bar)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>p_bar-&gt;SetValue(g_val_final);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>p_bar-&gt;Update();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>ECL</highlight></codeline>
<codeline lineno="1516"><highlight class="comment">*<sp/>function<sp/>to<sp/>compute<sp/>log-likelihood<sp/>function<sp/>for<sp/>the<sp/>spatial<sp/>lag<sp/>model</highlight></codeline>
<codeline lineno="1517"><highlight class="comment">resid<sp/>--<sp/>vector<sp/>of<sp/>residuals<sp/>in<sp/>regression<sp/>y<sp/>on<sp/>X;</highlight></codeline>
<codeline lineno="1518"><highlight class="comment">residW<sp/>--<sp/>vector<sp/>or<sp/>residulas<sp/>in<sp/>regression<sp/>of<sp/>Wy<sp/>on<sp/>X;</highlight></codeline>
<codeline lineno="1519"><highlight class="comment">rho<sp/>--<sp/>value<sp/>of<sp/>the<sp/>coefficient<sp/>of<sp/>spatial<sp/>association.</highlight></codeline>
<codeline lineno="1520"><highlight class="comment">Note:<sp/>function<sp/>uses<sp/>eigenvalues<sp/>to<sp/>compute<sp/>log-Jacobian.</highlight></codeline>
<codeline lineno="1521"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1a849c08919ceff3ca162266cb1e058e5d" kindref="member">ECL</ref>(<ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;resid,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;residW,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>rho,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*d)<sp/>{</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>resid.<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lj<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>log-Jacobian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>lj<sp/>+=<sp/>log(1.0<sp/>-<sp/>rho<sp/>*<sp/>d[cnt]);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/>tmp.<ref refid="class_vector_1aecbdf33f934d6f2803e08c65d9c2fd1d" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/>tmp.<ref refid="class_vector_1ae4c41304edf8d979e751bcb1ae2c627e" kindref="member">copy</ref>(residW());<sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>residiual<sp/>of<sp/>wy<sp/>on<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/>tmp<sp/>*=<sp/>rho;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>multiply<sp/>it<sp/>by<sp/>rho</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/>tmp<sp/>-=<sp/>resid;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>residual<sp/>of<sp/>y<sp/>on<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nn<sp/>=<sp/>resid.<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>(),<sp/><ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref><sp/>=<sp/><ref refid="_m_l__im_8cpp_1ad47a3573d1fdbae618bb0f49823c1cb7" kindref="member">norm</ref>(tmp());</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sse<sp/>=<sp/>0.5<sp/>*<sp/>nn<sp/>*<sp/>log(<ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref><sp/>/<sp/>nn);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>accum<sp/>=<sp/>lj<sp/>-<sp/>sse;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>sse1<sp/>=<sp/>-1.0*((nn/2.0)*(log(2.0*M_PI))+(nn/2.0)*log((product/nn))+(product/(2.0*(product/nn))));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>accum1<sp/>=<sp/>lj<sp/>-<sp/>sse1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>accum;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/>ECL</highlight></codeline>
<codeline lineno="1544"><highlight class="comment">*<sp/>function<sp/>to<sp/>compute<sp/>log-likelihood<sp/>function<sp/>for<sp/>the<sp/>spatial<sp/>lag<sp/>model</highlight></codeline>
<codeline lineno="1545"><highlight class="comment">resid<sp/>--<sp/>vector<sp/>of<sp/>residuals<sp/>in<sp/>regression<sp/>y<sp/>on<sp/>X;</highlight></codeline>
<codeline lineno="1546"><highlight class="comment">residW<sp/>--<sp/>vector<sp/>or<sp/>residulas<sp/>in<sp/>regression<sp/>of<sp/>Wy<sp/>on<sp/>X;</highlight></codeline>
<codeline lineno="1547"><highlight class="comment">rho<sp/>--<sp/>value<sp/>of<sp/>the<sp/>coefficient<sp/>of<sp/>spatial<sp/>association.</highlight></codeline>
<codeline lineno="1548"><highlight class="comment">Note:<sp/>function<sp/>uses<sp/>eigenvalues<sp/>to<sp/>compute<sp/>log-Jacobian.</highlight></codeline>
<codeline lineno="1549"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1a849c08919ceff3ca162266cb1e058e5d" kindref="member">ECL</ref>(<ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;resid,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;residW,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>rho,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*wr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*wi)<sp/>{</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>resid.<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>jr<sp/>=<sp/>1,<sp/>ji<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>log-Jacobian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>jr<sp/>=<sp/>(1.0<sp/>-<sp/>rho<sp/>*<sp/>wr[cnt])<sp/>*<sp/>(1.0<sp/>-<sp/>rho<sp/>*<sp/>jr)<sp/>-<sp/>(rho<sp/>*<sp/>ji<sp/>*<sp/>wi[cnt]);</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/>ji<sp/>=<sp/>-rho<sp/>*<sp/>(ji<sp/>*<sp/>(1.0<sp/>-<sp/>rho<sp/>*<sp/>wr[cnt])<sp/>+<sp/>wi[cnt]<sp/>*<sp/>(1.0<sp/>-<sp/>rho<sp/>*<sp/>jr));</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/>jr<sp/>=<sp/>log(jr);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/>tmp.<ref refid="class_vector_1aecbdf33f934d6f2803e08c65d9c2fd1d" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/>tmp.<ref refid="class_vector_1ae4c41304edf8d979e751bcb1ae2c627e" kindref="member">copy</ref>(residW());<sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>residiual<sp/>of<sp/>wy<sp/>on<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/>tmp<sp/>*=<sp/>rho;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>multiply<sp/>it<sp/>by<sp/>rho</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/>tmp<sp/>-=<sp/>resid;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>residual<sp/>of<sp/>y<sp/>on<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nn<sp/>=<sp/>resid.<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>(),<sp/><ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref><sp/>=<sp/><ref refid="_m_l__im_8cpp_1ad47a3573d1fdbae618bb0f49823c1cb7" kindref="member">norm</ref>(tmp());</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sse<sp/>=<sp/>0.5<sp/>*<sp/>nn<sp/>*<sp/>log(<ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref><sp/>/<sp/>nn);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>accum<sp/>=<sp/>jr<sp/>-<sp/>sse;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>sse1<sp/>=<sp/>-1.0*((nn/2.0)*(log(2.0*M_PI))+(nn/2.0)*log((product/nn))+(product/(2.0*(product/nn))));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>accum1<sp/>=<sp/>lj<sp/>-<sp/>sse1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>accum;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1aec3ac0d6cfcde3fd06b03a52df7de98d" kindref="member">SmallGoldenSectionLag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>middle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>right,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;resid,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;residW,</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*LogLik)<sp/>{</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>=<sp/>(sqrt((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)5)<sp/>-<sp/>1)<sp/>/<sp/>2,<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>=<sp/>1<sp/>-<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref>;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>f0,<sp/>f1,<sp/>f2,<sp/>f3;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/>x0<sp/>=<sp/>left;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/>x3<sp/>=<sp/>right;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>x2<sp/>=<sp/>middle;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(right<sp/>-<sp/>middle)<sp/>&gt;<sp/>fabs(middle<sp/>-<sp/>left))</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>+=<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>(right<sp/>-<sp/>middle);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>-=<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>(middle<sp/>-<sp/>left);</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Counter<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/>f2<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a849c08919ceff3ca162266cb1e058e5d" kindref="member">ECL</ref>(resid,<sp/>residW,<sp/>x2,<sp/>d);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/>f1<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a849c08919ceff3ca162266cb1e058e5d" kindref="member">ECL</ref>(resid,<sp/>residW,<sp/>x1,<sp/>d);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fabs(x3<sp/>-<sp/>x0)<sp/>&gt;<sp/><ref refid="_m_l__im_8cpp_1ab319cb41d2e6faf11ec8cfbc3e291967" kindref="member">tol</ref><sp/>*<sp/>(fabs(x1)<sp/>+<sp/>fabs(x2)))<sp/>{</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f1<sp/>&lt;<sp/>f2)<sp/>{</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(x0,<sp/>x1,<sp/>x2,<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>*<sp/>x2<sp/>+<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>x3);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(f0,<sp/>f1,<sp/>f2,<sp/><ref refid="_m_l__im_8cpp_1a849c08919ceff3ca162266cb1e058e5d" kindref="member">ECL</ref>(resid,<sp/>residW,<sp/>x2,<sp/>d));</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(x3,<sp/>x2,<sp/>x1,<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>*<sp/>x1<sp/>+<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>x0);</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(f3,<sp/>f2,<sp/>f1,<sp/><ref refid="_m_l__im_8cpp_1a849c08919ceff3ca162266cb1e058e5d" kindref="member">ECL</ref>(resid,<sp/>residW,<sp/>x1,<sp/>d));</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>++Counter;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f2<sp/>&gt;<sp/>f1)<sp/>{</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>f1<sp/>=<sp/>f2;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>(double)resid.<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/>*LogLik<sp/>=<sp/>f1<sp/>-<sp/>n<sp/>/<sp/>2.0<sp/>-<sp/>n<sp/>/<sp/>2.0<sp/>*<sp/>log(2.0<sp/>*<sp/>M_PI);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x1;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1aec3ac0d6cfcde3fd06b03a52df7de98d" kindref="member">SmallGoldenSectionLag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>middle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>right,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;resid,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;residW,</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*wr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*wi,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*LogLik)<sp/>{</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>=<sp/>(sqrt((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)5)<sp/>-<sp/>1)<sp/>/<sp/>2,<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>=<sp/>1<sp/>-<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref>;</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>f0,<sp/>f1,<sp/>f2,<sp/>f3;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/>x0<sp/>=<sp/>left;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/>x3<sp/>=<sp/>right;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>x2<sp/>=<sp/>middle;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(right<sp/>-<sp/>middle)<sp/>&gt;<sp/>fabs(middle<sp/>-<sp/>left))</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>+=<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>(right<sp/>-<sp/>middle);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>-=<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>(middle<sp/>-<sp/>left);</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Counter<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>f2<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a849c08919ceff3ca162266cb1e058e5d" kindref="member">ECL</ref>(resid,<sp/>residW,<sp/>x2,<sp/>wr,<sp/>wi);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/>f1<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a849c08919ceff3ca162266cb1e058e5d" kindref="member">ECL</ref>(resid,<sp/>residW,<sp/>x1,<sp/>wr,<sp/>wi);</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fabs(x3<sp/>-<sp/>x0)<sp/>&gt;<sp/><ref refid="_m_l__im_8cpp_1ab319cb41d2e6faf11ec8cfbc3e291967" kindref="member">tol</ref><sp/>*<sp/>(fabs(x1)<sp/>+<sp/>fabs(x2)))<sp/>{</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f1<sp/>&lt;<sp/>f2)<sp/>{</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(x0,<sp/>x1,<sp/>x2,<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>*<sp/>x2<sp/>+<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>x3);</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(f0,<sp/>f1,<sp/>f2,<sp/><ref refid="_m_l__im_8cpp_1a849c08919ceff3ca162266cb1e058e5d" kindref="member">ECL</ref>(resid,<sp/>residW,<sp/>x2,<sp/>wr,<sp/>wi));</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(x3,<sp/>x2,<sp/>x1,<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>*<sp/>x1<sp/>+<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>x0);</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(f3,<sp/>f2,<sp/>f1,<sp/><ref refid="_m_l__im_8cpp_1a849c08919ceff3ca162266cb1e058e5d" kindref="member">ECL</ref>(resid,<sp/>residW,<sp/>x1,<sp/>wr,<sp/>wi));</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/>++Counter;</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f2<sp/>&gt;<sp/>f1)<sp/>{</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/>f1<sp/>=<sp/>f2;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>(double)resid.<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/>*LogLik<sp/>=<sp/>f1<sp/>-<sp/>n<sp/>/<sp/>2.0<sp/>-<sp/>n<sp/>/<sp/>2.0<sp/>*<sp/>log(2.0<sp/>*<sp/>M_PI);</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x1;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a8d829009535a12b74fe847bd4a5589aa" kindref="member">SmallSimulationLag</ref>(<ref refid="class_weights" kindref="compound">Weights</ref><sp/>&amp;W,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_obs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*my_Y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**my_X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deps,</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InclConstant,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*LogLik,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>asym,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p_bar_min_fraction,</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p_bar_max_fraction)<sp/>{</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/>W.<ref refid="class_weights_1a8c93840598e2b48fbf6641c527b192ac" kindref="member">Transform</ref>(<ref refid="lite2_8h_1a954bbef49b89224c123c4afb101eee9aa606e8cfc2734f94c0a5ae0852816d64f" kindref="member">W_MAT</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>makes<sp/>sure<sp/>it<sp/>is<sp/>properly<sp/>formated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>W.<ref refid="class_weights_1aa899ff42408d8c4462bdf86118faea44" kindref="member">dim</ref>();</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>p_y(dim),<sp/>p_lag(dim);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>y(my_Y,<sp/>dim,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>lag(dim),<sp/>*x<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[deps];</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>in<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>p_y<sp/>&lt;&lt;<sp/>my_Y[cnt];</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>deps;<sp/>cnt++)<sp/>{</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>x[cnt].<ref refid="class_dense_vector_1a56c1672237e0c92df4bf4aa883bdb4f4" kindref="member">absorb</ref>(my_X[cnt],<sp/>dim);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0,<sp/>column<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>sym;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1a1d81280768a70e67bf08d193ca3e7ff0" kindref="member">copy</ref>(sym,<sp/>W.<ref refid="class_weights_1ac5db1f3875a301b0d63540b1e82037bd" kindref="member">Mit</ref>());</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!asym)<sp/>{</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1ab0735ed95691939f1aa598b336ed74ee" kindref="member">MakeSym</ref>(sym());<sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>it<sp/>symmetric;<sp/>has<sp/>eigenvalues<sp/>of<sp/>the<sp/>rowstandardized<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1aec803f52a1f99bca131465a6ac8a9496" kindref="member">RowStandardize</ref>(sym());</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1aec803f52a1f99bca131465a6ac8a9496" kindref="member">RowStandardize</ref>(W.<ref refid="class_weights_1ac5db1f3875a301b0d63540b1e82037bd" kindref="member">Mit</ref>());<sp/><sp/></highlight><highlight class="comment">//<sp/>non-symmetric,<sp/>row-standardized<sp/>--<sp/>used<sp/>to<sp/>compute<sp/>spatial<sp/>lag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/>p_lag.alloc();</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(W.<ref refid="class_weights_1ac5db1f3875a301b0d63540b1e82037bd" kindref="member">Mit</ref>(),<sp/>p_y(),<sp/>p_lag);</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>cnt++)<sp/>lag.<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(cnt,<sp/>p_lag[cnt]);</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*s<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim],<sp/>*wr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim],<sp/>*wi<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim];</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!asym)<sp/>{</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>real<sp/>and<sp/>symmetric<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>CLAPACK<sp/>to<sp/>compute<sp/>all<sp/>eigenvalues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>dspev_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>jobz<sp/>=<sp/></highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal">,<sp/>uplo<sp/>=<sp/></highlight><highlight class="charliteral">&apos;U&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ldz<sp/>=<sp/>dim,<sp/>lwork<sp/>=<sp/>3<sp/>*<sp/>dim,<sp/>info<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim<sp/>*<sp/>(dim<sp/>+<sp/>1)<sp/>/<sp/>2];</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*z<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*work<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[lwork];</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>dim;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>row;<sp/>column<sp/>&lt;<sp/>dim;<sp/>column++)<sp/>{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[row<sp/>+<sp/>column<sp/>*<sp/>(column<sp/>+<sp/>1)<sp/>/<sp/>2]<sp/>=<sp/>sym[row][column];</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>__WXMAC__<sp/>to<sp/>call<sp/>vecLib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__WXMAC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1aa4fb43aa911fe694869514f2deb12656" kindref="member">dspev_</ref>(&amp;jobz,<sp/>&amp;uplo,<sp/>&amp;n,<sp/>a,<sp/>s,<sp/>z,<sp/>&amp;ldz,<sp/>work,<sp/>&amp;info);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1aa4fb43aa911fe694869514f2deb12656" kindref="member">dspev_</ref>(&amp;jobz,<sp/>&amp;uplo,<sp/>(integer<sp/>*)&amp;n,<sp/>(doublereal<sp/>*)a,<sp/>(doublereal<sp/>*)s,<sp/>(doublereal<sp/>*)z,<sp/>(integer<sp/>*)&amp;ldz,</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(doublereal<sp/>*)work,<sp/>(integer<sp/>*)&amp;info);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!info)<sp/>{</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eigenvalues<sp/>are<sp/>in<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>good<sp/>and<sp/>nothing<sp/>else<sp/>to<sp/>do<sp/>in<sp/>this<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;error<sp/>in<sp/>computing<sp/>eigenvalues&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>wxMessageBox(&quot;error<sp/>in<sp/>computing<sp/>eigenvalues&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>real<sp/>and<sp/>asymmetric<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>CLAPACK<sp/>to<sp/>compute<sp/>all<sp/>eigenvalues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>dgeev_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>jobvl<sp/>=<sp/></highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal">,<sp/>jobvr<sp/>=<sp/></highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lda<sp/>=<sp/>dim,<sp/>ldvl<sp/>=<sp/>dim,<sp/>ldvr<sp/>=<sp/>dim,<sp/>lwork<sp/>=<sp/>3<sp/>*<sp/>dim,<sp/>info<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim<sp/>*<sp/>dim];</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vl<sp/>=<sp/>NULL,<sp/>*vr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*work<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[lwork];</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>dim;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>0;<sp/>column<sp/>&lt;<sp/>dim;<sp/>column++)<sp/>{</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[row<sp/>+<sp/>column<sp/>*<sp/>dim]<sp/>=<sp/>sym[row][column];</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>__WXMAC__<sp/>to<sp/>call<sp/>vecLib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__WXMAC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1adaf8fb43cda3487b6e45ec7db320acb6" kindref="member">dgeev_</ref>(&amp;jobvl,<sp/>&amp;jobvr,<sp/>&amp;n,<sp/>a,<sp/>&amp;lda,<sp/>wr,<sp/>wi,<sp/>vl,<sp/>&amp;ldvl,<sp/>vr,<sp/>&amp;ldvr,<sp/>work,<sp/>&amp;lwork,<sp/>&amp;info);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1adaf8fb43cda3487b6e45ec7db320acb6" kindref="member">dgeev_</ref>(&amp;jobvl,<sp/>&amp;jobvr,<sp/>(integer<sp/>*)&amp;n,<sp/>(doublereal<sp/>*)a,<sp/>(integer<sp/>*)&amp;lda,<sp/>(doublereal<sp/>*)wr,<sp/>(doublereal<sp/>*)wi,</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(doublereal<sp/>*)vl,<sp/>(integer<sp/>*)&amp;ldvl,<sp/>(doublereal<sp/>*)vr,<sp/>(integer<sp/>*)&amp;ldvr,<sp/>(doublereal<sp/>*)work,</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(integer<sp/>*)&amp;lwork,<sp/>(integer<sp/>*)&amp;info);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!info)<sp/>{</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eigenvalues<sp/>are<sp/>in<sp/>wr<sp/>and<sp/>wi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>good<sp/>and<sp/>nothing<sp/>else<sp/>to<sp/>do<sp/>in<sp/>this<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;error<sp/>in<sp/>computing<sp/>eigenvalues&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>wxMessageBox(&quot;error<sp/>in<sp/>computing<sp/>eigenvalues&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**cov<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*[deps],<sp/>*resid<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim],<sp/>*residW<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim];</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>deps;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/>cov[row]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[deps];</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>0;<sp/>column<sp/>&lt;<sp/>deps;<sp/>column++)<sp/>{</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cov[row][column]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/><ref refid="namespacegeoda_1a4bb896c1edfb733407f3bc834ef9b3dc" kindref="member">ols</ref>(deps),<sp/>olsW(deps);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_m_l__im_8cpp_1abffb96af09f2ae3ec91960165c007bfe" kindref="member">ordinaryLS</ref>(y,<sp/>x,<sp/>cov,<sp/>resid,<sp/>ols))<sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;svd<sp/>error\n&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ols<sp/>=<sp/>cov<sp/>X&apos;<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_m_l__im_8cpp_1abffb96af09f2ae3ec91960165c007bfe" kindref="member">ordinaryLS</ref>(lag,<sp/>x,<sp/>cov,<sp/>residW,<sp/>olsW))<sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;svd<sp/>error\n&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>olsW<sp/>=<sp/>cov<sp/>X&apos;<sp/>lag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>re(dim),<sp/>reW(dim);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>cnt++)<sp/>{</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/>re<sp/>&lt;&lt;<sp/>resid[cnt];</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/>reW<sp/>&lt;&lt;<sp/>residW[cnt];</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>rhoEstimate<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asym)</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>rhoEstimate<sp/>=<sp/><ref refid="_m_l__im_8cpp_1aec3ac0d6cfcde3fd06b03a52df7de98d" kindref="member">SmallGoldenSectionLag</ref>(-1,<sp/>0,<sp/>1,<sp/>re,<sp/>reW,<sp/>wr,<sp/>wi,<sp/>LogLik);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>rhoEstimate<sp/>=<sp/><ref refid="_m_l__im_8cpp_1aec3ac0d6cfcde3fd06b03a52df7de98d" kindref="member">SmallGoldenSectionLag</ref>(-1,<sp/>0,<sp/>1,<sp/>re,<sp/>reW,<sp/>s,<sp/>LogLik);</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhoEstimate;</highlight></codeline>
<codeline lineno="1766"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ad963ff06d974576297ba8f5940e7275b" kindref="member">SimulationLag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref><sp/>*weight,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_obs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Precision,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*my_Y,</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**my_X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deps,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InclConstant,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*LogLik,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p_bar_min_fraction,</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p_bar_max_fraction)<sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><ref refid="class_weights" kindref="compound">Weights</ref><sp/>W(weight,<sp/>num_obs);<sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>the<sp/>weights<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(W.<ref refid="class_weights_1aa899ff42408d8c4462bdf86118faea44" kindref="member">dim</ref>()<sp/>&lt;<sp/><ref refid="_m_l__im_8h_1ab53c1402299638d705e3d859bf6ec278" kindref="member">SMALL_DIM</ref>)</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a8d829009535a12b74fe847bd4a5589aa" kindref="member">SmallSimulationLag</ref>(W,<sp/>num_obs,<sp/>rho,<sp/>my_Y,<sp/>my_X,<sp/>deps,<sp/>InclConstant,<sp/>LogLik,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>p_bar_max_fraction,</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_bar_max_fraction);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/>W.<ref refid="class_weights_1a8c93840598e2b48fbf6641c527b192ac" kindref="member">Transform</ref>(<ref refid="lite2_8h_1a954bbef49b89224c123c4afb101eee9aae612f27f32fcd94eee19701daae9d223" kindref="member">W_GWT</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>makes<sp/>sure<sp/>it<sp/>is<sp/>formated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>W.<ref refid="class_weights_1abceac830ff7b34b7bac3adb79125fe7f" kindref="member">Git</ref>().count();</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0,<sp/>cp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>p_y(dim),<sp/>p_lag(dim);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>y(my_Y,<sp/>dim,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>lag(dim),<sp/>*x<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[deps];</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>read<sp/>in<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/>p_y<sp/>&lt;&lt;<sp/>my_Y[cnt];</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>deps;<sp/>cnt++)<sp/>{</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>x[cnt].<ref refid="class_dense_vector_1a56c1672237e0c92df4bf4aa883bdb4f4" kindref="member">absorb</ref>(my_X[cnt],<sp/>dim);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1a4c7688b643a08fd9b048deecbb9376b5" kindref="member">GWT</ref><sp/>sym;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1a1d81280768a70e67bf08d193ca3e7ff0" kindref="member">copy</ref>(sym,<sp/>W.<ref refid="class_weights_1abceac830ff7b34b7bac3adb79125fe7f" kindref="member">Git</ref>());</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>it<sp/>symmetric;<sp/>has<sp/>eigenvalues<sp/>of<sp/>the<sp/>rowstandardized<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1ab0735ed95691939f1aa598b336ed74ee" kindref="member">MakeSym</ref>(sym());</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>non-symmetric,<sp/>row-standardized<sp/>--<sp/>used<sp/>to<sp/>compute<sp/>spatial<sp/>lag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1aec803f52a1f99bca131465a6ac8a9496" kindref="member">RowStandardize</ref>(W.<ref refid="class_weights_1abceac830ff7b34b7bac3adb79125fe7f" kindref="member">Git</ref>());</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/>p_lag.alloc();</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(W.<ref refid="class_weights_1abceac830ff7b34b7bac3adb79125fe7f" kindref="member">Git</ref>(),<sp/>p_y(),<sp/>p_lag);</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>cnt++)<sp/>lag.<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(cnt,<sp/>p_lag[cnt]);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/>clock_t<sp/>start,<sp/>stop;</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;<sp/><sp/>computing<sp/>polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/>start<sp/>=<sp/>clock();</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1ac00d641cff83a1cfaf4c477c5e645a43" kindref="member">InitPoly</ref>(Precision,<sp/>dim);</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1af1c7749bc4934f25849032d35c8beed9" kindref="member">SparsePoly</ref>(sym());</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;<sp/><sp/>---<sp/>finished<sp/>computing<sp/>polynomial&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**cov<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*[deps];</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*resid<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim];</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*residW<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim];</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>deps;<sp/>cnt++)<sp/>{</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/>cov[cnt]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[deps];</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>deps;<sp/>cp++)<sp/>{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cov[cnt][cp]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/><ref refid="namespacegeoda_1a4bb896c1edfb733407f3bc834ef9b3dc" kindref="member">ols</ref>(deps),<sp/>olsW(deps);</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_m_l__im_8cpp_1abffb96af09f2ae3ec91960165c007bfe" kindref="member">ordinaryLS</ref>(y,<sp/>x,<sp/>cov,<sp/>resid,<sp/>ols))<sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;svd<sp/>error\n&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ols<sp/>=<sp/>cov<sp/>X&apos;<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_m_l__im_8cpp_1abffb96af09f2ae3ec91960165c007bfe" kindref="member">ordinaryLS</ref>(lag,<sp/>x,<sp/>cov,<sp/>residW,<sp/>olsW))<sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;svd<sp/>error\n&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>olsW<sp/>=<sp/>cov<sp/>X&apos;<sp/>lag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>re(dim),<sp/>reW(dim);</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>cnt++)<sp/>{</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/>re<sp/>&lt;&lt;<sp/>resid[cnt];</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/>reW<sp/>&lt;&lt;<sp/>residW[cnt];</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>rhoEstimate<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>e0:<sp/>resid,<sp/>eL:<sp/>residw<sp/>see<sp/>Oleg&apos;s<sp/>paper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/>rhoEstimate<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a7d6e56be049abb29215a95db79361e46" kindref="member">GoldenSectionLag</ref>(-1,<sp/>0,<sp/>1,<sp/>re,<sp/>reW,<sp/>LogLik);</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/>stop<sp/>=<sp/>clock();</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhoEstimate;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1afb93d1727c0dca96d847f61c0ac503da" kindref="member">SmallErrorLogLikelihood</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>X,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>lagX,<sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>y,<sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>lagY,</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>W,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>lambda,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;egls,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InclConstant)<sp/>{</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lj<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>(int)y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();<sp/>++cnt)<sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>log-Jacobian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/>lj<sp/>+=<sp/>log(1.0<sp/>-<sp/>lambda<sp/>*<sp/>d[cnt]);</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>XminusLambdaLagX(X.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>YminusLambdaLagY(y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1af3e9cb5124589d163810a05ee5f27f9c" kindref="member">_minus</ref>(X,<sp/>lagX,<sp/>XminusLambdaLagX,<sp/>lambda);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1af3e9cb5124589d163810a05ee5f27f9c" kindref="member">_minus</ref>(y,<sp/>lagY,<sp/>YminusLambdaLagY,<sp/>lambda);</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0,<sp/>column<sp/>=<sp/>0,<sp/>deps<sp/>=<sp/>X.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>(),<sp/>dim<sp/>=<sp/>y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**cov<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*[deps],<sp/>*resid<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim];</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>deps;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/>cov[row]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[deps];</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>0;<sp/>column<sp/>&lt;<sp/>deps;<sp/>column++)<sp/>{</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cov[row][column]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>p_y(dim),<sp/>*p_x<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[deps],<sp/>eg(deps);</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>dim;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/>p_y.setAt(row,<sp/>YminusLambdaLagY[row]);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>deps;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/>p_x[row].<ref refid="class_dense_vector_1a97fb7da8dea1acb844b89cf5e74e7801" kindref="member">alloc</ref>(dim);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>0;<sp/>column<sp/>&lt;<sp/>dim;<sp/>column++)<sp/>{</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_x[row].<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(column,<sp/>XminusLambdaLagX[row][column]);</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1abffb96af09f2ae3ec91960165c007bfe" kindref="member">ordinaryLS</ref>(p_y,<sp/>p_x,<sp/>cov,<sp/>resid,<sp/>eg);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>deps;<sp/>row++)<sp/>egls[row]<sp/>=<sp/>eg.getValue(row);</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>rs(y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>(),<sp/>0),<sp/>lagResid(y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>(),<sp/>0),<sp/>RminusLambdaLagR(y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>(),<sp/>0);</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>dim;<sp/>row++)<sp/>rs[row]<sp/>=<sp/>resid[row];</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1af3e9cb5124589d163810a05ee5f27f9c" kindref="member">_minus</ref>(rs(),<sp/>lagResid(),<sp/>RminusLambdaLagR,<sp/>lambda);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>sse<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ad47a3573d1fdbae618bb0f49823c1cb7" kindref="member">norm</ref>(RminusLambdaLagR());</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>addOn<sp/>=<sp/>-0.5<sp/>*<sp/>y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>()<sp/>*<sp/>log(sse<sp/>/<sp/>y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lj<sp/>+<sp/>addOn);</highlight></codeline>
<codeline lineno="1875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1afb93d1727c0dca96d847f61c0ac503da" kindref="member">SmallErrorLogLikelihood</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>X,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>lagX,<sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>y,<sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>lagY,</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>W,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>lambda,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;egls,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*wr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*wi,</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InclConstant)<sp/>{</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>jr<sp/>=<sp/>1,<sp/>ji<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>(int)y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();<sp/>++cnt)<sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>log-Jacobian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>jr<sp/>=<sp/>(1.0<sp/>-<sp/>lambda<sp/>*<sp/>wr[cnt])<sp/>*<sp/>(1.0<sp/>-<sp/>lambda<sp/>*<sp/>jr)<sp/>-<sp/>(lambda<sp/>*<sp/>wi[cnt]<sp/>*<sp/>ji);</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/>ji<sp/>=<sp/>-lambda<sp/>*<sp/>(ji<sp/>*<sp/>(1.0<sp/>-<sp/>lambda<sp/>*<sp/>wr[cnt])<sp/>+<sp/>wi[cnt]<sp/>*<sp/>(1.0<sp/>-<sp/>lambda<sp/>*<sp/>jr));</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/>jr<sp/>=<sp/>log(jr);</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>XminusLambdaLagX(X.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>YminusLambdaLagY(y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1af3e9cb5124589d163810a05ee5f27f9c" kindref="member">_minus</ref>(X,<sp/>lagX,<sp/>XminusLambdaLagX,<sp/>lambda);</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1af3e9cb5124589d163810a05ee5f27f9c" kindref="member">_minus</ref>(y,<sp/>lagY,<sp/>YminusLambdaLagY,<sp/>lambda);</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0,<sp/>column<sp/>=<sp/>0,<sp/>deps<sp/>=<sp/>X.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>(),<sp/>dim<sp/>=<sp/>y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**cov<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*[deps],<sp/>*resid<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim];</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>deps;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/>cov[row]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[deps];</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>0;<sp/>column<sp/>&lt;<sp/>deps;<sp/>column++)<sp/>{</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cov[row][column]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>p_y(dim),<sp/>*p_x<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[deps],<sp/>eg(deps);</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>dim;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/>p_y.setAt(row,<sp/>YminusLambdaLagY[row]);</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>deps;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/>p_x[row].<ref refid="class_dense_vector_1a97fb7da8dea1acb844b89cf5e74e7801" kindref="member">alloc</ref>(dim);</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>0;<sp/>column<sp/>&lt;<sp/>dim;<sp/>column++)<sp/>{</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_x[row].<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(column,<sp/>XminusLambdaLagX[row][column]);</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1abffb96af09f2ae3ec91960165c007bfe" kindref="member">ordinaryLS</ref>(p_y,<sp/>p_x,<sp/>cov,<sp/>resid,<sp/>eg);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>deps;<sp/>row++)<sp/>egls[row]<sp/>=<sp/>eg.getValue(row);</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>rs(y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>(),<sp/>0),<sp/>lagResid(y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>(),<sp/>0),<sp/>RminusLambdaLagR(y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>(),<sp/>0);</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>dim;<sp/>row++)<sp/>rs[row]<sp/>=<sp/>resid[row];</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1af3e9cb5124589d163810a05ee5f27f9c" kindref="member">_minus</ref>(rs(),<sp/>lagResid(),<sp/>RminusLambdaLagR,<sp/>lambda);</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>sse<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ad47a3573d1fdbae618bb0f49823c1cb7" kindref="member">norm</ref>(RminusLambdaLagR());</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>addOn<sp/>=<sp/>-0.5<sp/>*<sp/>y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>()<sp/>*<sp/>log(sse<sp/>/<sp/>y.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(jr<sp/>+<sp/>addOn);</highlight></codeline>
<codeline lineno="1923"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1ade62be767d28d6451ec6cdf28d123db8" kindref="member">SmallGoldenSectionError</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>middle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>right,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>&amp;X,</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;y,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>W,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*&amp;beta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*d,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InclConstant,</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*LogLik)<sp/>{</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>=<sp/>(sqrt((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)5)<sp/>-<sp/>1)<sp/>/<sp/>2,<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>=<sp/>1<sp/>-<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref>;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>f0,<sp/>f1,<sp/>f2,<sp/>f3;</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/>x0<sp/>=<sp/>left;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/>x3<sp/>=<sp/>right;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>x2<sp/>=<sp/>middle;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(right<sp/>-<sp/>middle)<sp/>&gt;<sp/>fabs(middle<sp/>-<sp/>left))</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>+=<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>(right<sp/>-<sp/>middle);</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>-=<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>(middle<sp/>-<sp/>left);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Counter<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>lagX;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>lagY(X[0].count()),<sp/>egls(X.<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(W,<sp/>X(),<sp/>lagX);</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(W,<sp/>y(),<sp/>lagY);</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/>f2<sp/>=<sp/><ref refid="_m_l__im_8cpp_1afb93d1727c0dca96d847f61c0ac503da" kindref="member">SmallErrorLogLikelihood</ref>(X(),<sp/>lagX(),<sp/>y(),<sp/>lagY(),<sp/>W,<sp/>x2,<sp/>egls,<sp/>d,<sp/>InclConstant);</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/>f1<sp/>=<sp/><ref refid="_m_l__im_8cpp_1afb93d1727c0dca96d847f61c0ac503da" kindref="member">SmallErrorLogLikelihood</ref>(X(),<sp/>lagX(),<sp/>y(),<sp/>lagY(),<sp/>W,<sp/>x1,<sp/>egls,<sp/>d,<sp/>InclConstant);</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>this<sp/>is<sp/>&apos;classic&apos;<sp/>golden<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fabs(x3<sp/>-<sp/>x0)<sp/>&gt;<sp/><ref refid="_m_l__im_8cpp_1ab319cb41d2e6faf11ec8cfbc3e291967" kindref="member">tol</ref><sp/>*<sp/>(fabs(x1)<sp/>+<sp/>fabs(x2)))<sp/>{</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f1<sp/>&lt;<sp/>f2)<sp/>{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(x0,<sp/>x1,<sp/>x2,<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>*<sp/>x2<sp/>+<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>x3);</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(f0,<sp/>f1,<sp/>f2,<sp/><ref refid="_m_l__im_8cpp_1afb93d1727c0dca96d847f61c0ac503da" kindref="member">SmallErrorLogLikelihood</ref>(X(),<sp/>lagX(),<sp/>y(),<sp/>lagY(),<sp/>W,<sp/>x2,<sp/>egls,<sp/>d,<sp/>InclConstant));</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(x3,<sp/>x2,<sp/>x1,<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>*<sp/>x1<sp/>+<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>x0);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(f3,<sp/>f2,<sp/>f1,<sp/><ref refid="_m_l__im_8cpp_1afb93d1727c0dca96d847f61c0ac503da" kindref="member">SmallErrorLogLikelihood</ref>(X(),<sp/>lagX(),<sp/>y(),<sp/>lagY(),<sp/>W,<sp/>x1,<sp/>egls,<sp/>d,<sp/>InclConstant));</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/>++Counter;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f2<sp/>&gt;<sp/>f1)<sp/>{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>f1<sp/>=<sp/>f2;</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>W.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/>*LogLik<sp/>=<sp/>f1<sp/>-<sp/>n<sp/>/<sp/>2.0<sp/>-<sp/>n<sp/>/<sp/>2.0<sp/>*<sp/>log(2.0<sp/>*<sp/>M_PI);</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/>beta<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[X[0].<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>()];</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>(int)egls.<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>();<sp/>++cnt)<sp/>beta[cnt]<sp/>=<sp/>egls[cnt];</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x1;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1ade62be767d28d6451ec6cdf28d123db8" kindref="member">SmallGoldenSectionError</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>middle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>right,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>&amp;X,</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;y,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>W,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*&amp;beta,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*wr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*wi,</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InclConstant,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*LogLik)<sp/>{</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>=<sp/>(sqrt((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)5)<sp/>-<sp/>1)<sp/>/<sp/>2,<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>=<sp/>1<sp/>-<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref>;</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>f0,<sp/>f1,<sp/>f2,<sp/>f3;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/>x0<sp/>=<sp/>left;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/>x3<sp/>=<sp/>right;</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>x2<sp/>=<sp/>middle;</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(right<sp/>-<sp/>middle)<sp/>&gt;<sp/>fabs(middle<sp/>-<sp/>left))</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>+=<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>(right<sp/>-<sp/>middle);</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>-=<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>(middle<sp/>-<sp/>left);</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Counter<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>lagX;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>lagY(X[0].count()),<sp/>egls(X.<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(W,<sp/>X(),<sp/>lagX);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(W,<sp/>y(),<sp/>lagY);</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/>f2<sp/>=<sp/><ref refid="_m_l__im_8cpp_1afb93d1727c0dca96d847f61c0ac503da" kindref="member">SmallErrorLogLikelihood</ref>(X(),<sp/>lagX(),<sp/>y(),<sp/>lagY(),<sp/>W,<sp/>x2,<sp/>egls,<sp/>wr,<sp/>wi,<sp/>InclConstant);</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/>f1<sp/>=<sp/><ref refid="_m_l__im_8cpp_1afb93d1727c0dca96d847f61c0ac503da" kindref="member">SmallErrorLogLikelihood</ref>(X(),<sp/>lagX(),<sp/>y(),<sp/>lagY(),<sp/>W,<sp/>x1,<sp/>egls,<sp/>wr,<sp/>wi,<sp/>InclConstant);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>this<sp/>is<sp/>&apos;classic&apos;<sp/>golden<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fabs(x3<sp/>-<sp/>x0)<sp/>&gt;<sp/><ref refid="_m_l__im_8cpp_1ab319cb41d2e6faf11ec8cfbc3e291967" kindref="member">tol</ref><sp/>*<sp/>(fabs(x1)<sp/>+<sp/>fabs(x2)))<sp/>{</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f1<sp/>&lt;<sp/>f2)<sp/>{</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(x0,<sp/>x1,<sp/>x2,<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>*<sp/>x2<sp/>+<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>x3);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(f0,<sp/>f1,<sp/>f2,<sp/><ref refid="_m_l__im_8cpp_1afb93d1727c0dca96d847f61c0ac503da" kindref="member">SmallErrorLogLikelihood</ref>(X(),<sp/>lagX(),<sp/>y(),<sp/>lagY(),<sp/>W,<sp/>x2,<sp/>egls,<sp/>wr,<sp/>wi,<sp/>InclConstant));</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(x3,<sp/>x2,<sp/>x1,<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>*<sp/>x1<sp/>+<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>x0);</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(f3,<sp/>f2,<sp/>f1,<sp/><ref refid="_m_l__im_8cpp_1afb93d1727c0dca96d847f61c0ac503da" kindref="member">SmallErrorLogLikelihood</ref>(X(),<sp/>lagX(),<sp/>y(),<sp/>lagY(),<sp/>W,<sp/>x1,<sp/>egls,<sp/>wr,<sp/>wi,<sp/>InclConstant));</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/>++Counter;</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f2<sp/>&gt;<sp/>f1)<sp/>{</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/>f1<sp/>=<sp/>f2;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>W.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/>*LogLik<sp/>=<sp/>f1<sp/>-<sp/>n<sp/>/<sp/>2.0<sp/>-<sp/>n<sp/>/<sp/>2.0<sp/>*<sp/>log(2.0<sp/>*<sp/>M_PI);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/>beta<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[X[0].<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>()];</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>(int)egls.<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>();<sp/>++cnt)<sp/>beta[cnt]<sp/>=<sp/>egls[cnt];</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x1;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a25ffac5a5b3df1d5bc5007404d2c3215" kindref="member">SmallSimulationError</ref>(<ref refid="class_weights" kindref="compound">Weights</ref><sp/>&amp;W,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*my_Y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**my_X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deps,</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*&amp;beta,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InclConstant,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*LogLik,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>asym,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p_bar_min_fraction,</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p_bar_max_fraction)<sp/>{</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/>W.<ref refid="class_weights_1a8c93840598e2b48fbf6641c527b192ac" kindref="member">Transform</ref>(<ref refid="lite2_8h_1a954bbef49b89224c123c4afb101eee9aa606e8cfc2734f94c0a5ae0852816d64f" kindref="member">W_MAT</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>makes<sp/>sure<sp/>it<sp/>is<sp/>formated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>W.<ref refid="class_weights_1aa899ff42408d8c4462bdf86118faea44" kindref="member">dim</ref>();</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expl<sp/>=<sp/>0,<sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>y(dim);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>X(2);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>in<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>y<sp/>&lt;&lt;<sp/>my_Y[cnt];</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/>X<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref>(deps);</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(expl<sp/>=<sp/>0;<sp/>expl<sp/>&lt;<sp/>deps;<sp/>expl++)<sp/>{</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>X[expl]<sp/>&lt;&lt;<sp/>my_X[expl][cnt];</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/>X.reset(deps);</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>sym;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1a1d81280768a70e67bf08d193ca3e7ff0" kindref="member">copy</ref>(sym,<sp/>W.<ref refid="class_weights_1ac5db1f3875a301b0d63540b1e82037bd" kindref="member">Mit</ref>());</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>LOG_MSG(&quot;sym<sp/>dump<sp/>before<sp/>MakeSym:&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Iterator&lt;WVector&gt;<sp/>it<sp/>=<sp/>sym();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i=0;<sp/>i&lt;dim;<sp/>i++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>j=0;<sp/>j&lt;dim;<sp/>j++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_MSG(wxString::Format(&quot;sym[%d][%d]<sp/>=<sp/>%f&quot;,<sp/>i,j,<sp/>it[i][j]));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!asym)<sp/>{</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1ab0735ed95691939f1aa598b336ed74ee" kindref="member">MakeSym</ref>(sym());<sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>it<sp/>symmetric,<sp/>while<sp/>preserving<sp/>eigenvalues<sp/>--<sp/>used<sp/>for<sp/>computing<sp/>log-Jacobian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1aec803f52a1f99bca131465a6ac8a9496" kindref="member">RowStandardize</ref>(sym());</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>LOG_MSG(&quot;sym<sp/>dump<sp/>after<sp/>MakeSym:&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Iterator&lt;WVector&gt;<sp/>it<sp/>=<sp/>sym();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i=0;<sp/>i&lt;dim;<sp/>i++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>j=0;<sp/>j&lt;dim;<sp/>j++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_MSG(wxString::Format(&quot;sym[%d][%d]<sp/>=<sp/>%f&quot;,<sp/>i,j,<sp/>it[i][j]));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1aec803f52a1f99bca131465a6ac8a9496" kindref="member">RowStandardize</ref>(W.<ref refid="class_weights_1ac5db1f3875a301b0d63540b1e82037bd" kindref="member">Mit</ref>());<sp/><sp/></highlight><highlight class="comment">//<sp/>non-symmetric,<sp/>row-standardized<sp/>--<sp/>used<sp/>to<sp/>compute<sp/>spatial<sp/>lag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>lambdaEstimate<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/>clock_t<sp/>start,<sp/>stop;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0,<sp/>column<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>computing<sp/>eigenvalues<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/>start<sp/>=<sp/>clock();</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*s<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim],<sp/>*wr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim],<sp/>*wi<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim];</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!asym)<sp/>{</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>real<sp/>and<sp/>symmetric<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>CLAPACK<sp/>to<sp/>compute<sp/>all<sp/>eigenvalues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>dspev_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>jobz<sp/>=<sp/></highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal">,<sp/>uplo<sp/>=<sp/></highlight><highlight class="charliteral">&apos;U&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ldz<sp/>=<sp/>dim,<sp/>lwork<sp/>=<sp/>3<sp/>*<sp/>dim,<sp/>info<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim<sp/>*<sp/>(dim<sp/>+<sp/>1)<sp/>/<sp/>2];</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*z<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*work<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[lwork];</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>dim;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>row;<sp/>column<sp/>&lt;<sp/>dim;<sp/>column++)<sp/>{</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LOG(sym[row][column]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[row<sp/>+<sp/>column<sp/>*<sp/>(column<sp/>+<sp/>1)<sp/>/<sp/>2]<sp/>=<sp/>sym[row][column];</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>__WXMAC__<sp/>to<sp/>call<sp/>vecLib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#ifdef<sp/>WORDS_BIGENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__WXMAC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1aa4fb43aa911fe694869514f2deb12656" kindref="member">dspev_</ref>(&amp;jobz,<sp/>&amp;uplo,<sp/>&amp;n,<sp/>a,<sp/>s,<sp/>z,<sp/>&amp;ldz,<sp/>work,<sp/>&amp;info);</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1aa4fb43aa911fe694869514f2deb12656" kindref="member">dspev_</ref>(&amp;jobz,<sp/>&amp;uplo,<sp/>(integer<sp/>*)&amp;n,<sp/>(doublereal<sp/>*)a,<sp/>(doublereal<sp/>*)s,<sp/>(doublereal<sp/>*)z,<sp/>(integer<sp/>*)&amp;ldz,</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(doublereal<sp/>*)work,<sp/>(integer<sp/>*)&amp;info);</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!info)<sp/>{</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eigenvalues<sp/>are<sp/>in<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>good<sp/>and<sp/>nothing<sp/>else<sp/>to<sp/>do<sp/>in<sp/>this<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;error<sp/>in<sp/>computing<sp/>eigenvalues&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wxMessageBox(&quot;Error:<sp/>There<sp/>was<sp/>an<sp/>error<sp/>computing<sp/>eigenvalues.&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>real<sp/>and<sp/>asymmetric<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>CLAPACK<sp/>to<sp/>compute<sp/>all<sp/>eigenvalues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>dgeev_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>jobvl<sp/>=<sp/></highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal">,<sp/>jobvr<sp/>=<sp/></highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lda<sp/>=<sp/>dim,<sp/>ldvl<sp/>=<sp/>dim,<sp/>ldvr<sp/>=<sp/>dim,<sp/>lwork<sp/>=<sp/>3<sp/>*<sp/>dim,<sp/>info<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim<sp/>*<sp/>dim];</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vl<sp/>=<sp/>NULL,<sp/>*vr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*work<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[lwork];</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>dim;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>0;<sp/>column<sp/>&lt;<sp/>dim;<sp/>column++)<sp/>{</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[row<sp/>+<sp/>column<sp/>*<sp/>dim]<sp/>=<sp/>sym[row][column];</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>__WXMAC__<sp/>to<sp/>call<sp/>vecLib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#ifdef<sp/>WORDS_BIGENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__WXMAC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1adaf8fb43cda3487b6e45ec7db320acb6" kindref="member">dgeev_</ref>(&amp;jobvl,<sp/>&amp;jobvr,<sp/>&amp;n,<sp/>a,<sp/>&amp;lda,<sp/>wr,<sp/>wi,<sp/>vl,<sp/>&amp;ldvl,<sp/>vr,<sp/>&amp;ldvr,<sp/>work,<sp/>&amp;lwork,<sp/>&amp;info);</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1adaf8fb43cda3487b6e45ec7db320acb6" kindref="member">dgeev_</ref>(&amp;jobvl,<sp/>&amp;jobvr,<sp/>(integer<sp/>*)&amp;n,<sp/>(doublereal<sp/>*)a,<sp/>(integer<sp/>*)&amp;lda,<sp/>(doublereal<sp/>*)wr,<sp/>(doublereal<sp/>*)wi,</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(doublereal<sp/>*)vl,<sp/>(integer<sp/>*)&amp;ldvl,<sp/>(doublereal<sp/>*)vr,<sp/>(integer<sp/>*)&amp;ldvr,<sp/>(doublereal<sp/>*)work,</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(integer<sp/>*)&amp;lwork,<sp/>(integer<sp/>*)&amp;info);</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!info)<sp/>{</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eigenvalues<sp/>are<sp/>in<sp/>wr<sp/>and<sp/>wi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>good<sp/>and<sp/>nothing<sp/>else<sp/>to<sp/>do<sp/>in<sp/>this<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;error<sp/>in<sp/>computing<sp/>eigenvalues&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wxMessageBox(&quot;Error:<sp/>There<sp/>was<sp/>an<sp/>error<sp/>computing<sp/>eigenvalues.&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asym)<sp/>{</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/>lambdaEstimate<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ade62be767d28d6451ec6cdf28d123db8" kindref="member">SmallGoldenSectionError</ref>(-1,<sp/>0,<sp/>1,<sp/>X,<sp/>y,<sp/>W.<ref refid="class_weights_1ac5db1f3875a301b0d63540b1e82037bd" kindref="member">Mit</ref>(),<sp/>beta,<sp/>wr,<sp/>wi,<sp/>InclConstant,<sp/>LogLik);</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/>lambdaEstimate<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ade62be767d28d6451ec6cdf28d123db8" kindref="member">SmallGoldenSectionError</ref>(-1,<sp/>0,<sp/>1,<sp/>X,<sp/>y,<sp/>W.<ref refid="class_weights_1ac5db1f3875a301b0d63540b1e82037bd" kindref="member">Mit</ref>(),<sp/>beta,<sp/>s,<sp/>InclConstant,<sp/>LogLik);</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/>stop<sp/>=<sp/>clock();</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lambdaEstimate;</highlight></codeline>
<codeline lineno="2148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a90f6c29107697753d666114cd5c734b5" kindref="member">SimulationError</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref><sp/>*my_gal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_obs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Precision,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho,</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*my_Y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**my_X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deps,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*&amp;beta,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InclConstant,</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*LogLik,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p_bar_min_fraction,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p_bar_max_fraction)<sp/>{</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><ref refid="class_weights" kindref="compound">Weights</ref><sp/>W(my_gal,<sp/>num_obs);</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>W.<ref refid="class_weights_1aa899ff42408d8c4462bdf86118faea44" kindref="member">dim</ref>();</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>&lt;<sp/><ref refid="_m_l__im_8h_1ab53c1402299638d705e3d859bf6ec278" kindref="member">SMALL_DIM</ref>)</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a25ffac5a5b3df1d5bc5007404d2c3215" kindref="member">SmallSimulationError</ref>(W,<sp/>rho,<sp/>my_Y,<sp/>my_X,<sp/>deps,<sp/>beta,<sp/>InclConstant,<sp/>LogLik,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>p_bar_min_fraction,</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_bar_max_fraction);</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/>W.<ref refid="class_weights_1a8c93840598e2b48fbf6641c527b192ac" kindref="member">Transform</ref>(<ref refid="lite2_8h_1a954bbef49b89224c123c4afb101eee9aae612f27f32fcd94eee19701daae9d223" kindref="member">W_GWT</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>makes<sp/>sure<sp/>it<sp/>is<sp/>formated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>y(dim);</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>X(2);</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>in<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>y<sp/>&lt;&lt;<sp/>my_Y[cnt];</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/>X<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref>(deps);</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expl<sp/>=<sp/>0;<sp/>expl<sp/>&lt;<sp/>deps;<sp/>expl++)<sp/>{</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>X[expl]<sp/>&lt;&lt;<sp/>my_X[expl][cnt];</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/>X.reset(deps);</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ready<sp/>to<sp/>make<sp/>symmetric</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1a4c7688b643a08fd9b048deecbb9376b5" kindref="member">GWT</ref><sp/>sym;</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1a1d81280768a70e67bf08d193ca3e7ff0" kindref="member">copy</ref>(sym,<sp/>W.<ref refid="class_weights_1abceac830ff7b34b7bac3adb79125fe7f" kindref="member">Git</ref>());</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1ab0735ed95691939f1aa598b336ed74ee" kindref="member">MakeSym</ref>(sym());<sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>it<sp/>symmetric,<sp/>while<sp/>preserving<sp/>eigenvalues<sp/>--<sp/>used<sp/>for<sp/>computing<sp/>log-Jacobian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1aec803f52a1f99bca131465a6ac8a9496" kindref="member">RowStandardize</ref>(W.<ref refid="class_weights_1abceac830ff7b34b7bac3adb79125fe7f" kindref="member">Git</ref>());<sp/><sp/></highlight><highlight class="comment">//<sp/>non-symmetric,<sp/>row-standardized<sp/>--<sp/>used<sp/>to<sp/>compute<sp/>spatial<sp/>lag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>lambdaEstimate<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1ac00d641cff83a1cfaf4c477c5e645a43" kindref="member">InitPoly</ref>(Precision,<sp/>dim);</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1af1c7749bc4934f25849032d35c8beed9" kindref="member">SparsePoly</ref>(sym());</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae23d69c5116873b5abc88978a129d1ff" kindref="member">Destroy</ref>(sym());<sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>need<sp/>that<sp/>spatial<sp/>weights<sp/>anymore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/>lambdaEstimate<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a989906d9e9a98c70247eca51ae349802" kindref="member">GoldenSectionError</ref>(-1,<sp/>0,<sp/>1,<sp/>X,<sp/>y,<sp/>W.<ref refid="class_weights_1abceac830ff7b34b7bac3adb79125fe7f" kindref="member">Git</ref>(),<sp/>beta,<sp/>LogLik);</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lambdaEstimate;</highlight></codeline>
<codeline lineno="2184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ac0daa059f06c0c26440aa639e0630092" kindref="member">sdiff</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref><sp/>&amp;w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;v,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;d)<sp/>{</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>w.<ref refid="class_sparse_matrix_1a6b574e9d1019686f425283b29e4aa257" kindref="member">dim</ref>();</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>vt(dim);</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>vt.setAt(cnt,<sp/>v.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt)<sp/>*<sp/>w.<ref refid="class_sparse_matrix_1a76c6f1e47dca55adae87617fff13cbd4" kindref="member">getScale</ref>()[cnt]);</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>lag(dim);</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/>w.<ref refid="class_sparse_matrix_1a760e784d0fd1fa38694e9cda78e389a6" kindref="member">matrixColumn</ref>(lag,<sp/>vt);</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>d.<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(cnt,<sp/>(vt.getValue(cnt)<sp/>-<sp/>rho<sp/>*<sp/>lag.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt))<sp/>/<sp/>w.<ref refid="class_sparse_matrix_1a76c6f1e47dca55adae87617fff13cbd4" kindref="member">getScale</ref>()[cnt]);</highlight></codeline>
<codeline lineno="2195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ab0cf864c7478be449a6ceaa6e544474e" kindref="member">Lco</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;lag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref><sp/>&amp;w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho,</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;sol)<sp/>{</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>w.<ref refid="class_sparse_matrix_1a6b574e9d1019686f425283b29e4aa257" kindref="member">dim</ref>();</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>rhs1(dim),<sp/>rhs2(dim),<sp/>y_rho(dim),<sp/>lag_rho(dim);</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/>w.<ref refid="class_sparse_matrix_1a28e5b50a5a3621501928dc14884262c0" kindref="member">IminusRhoThis</ref>(rho,<sp/>y,<sp/>y_rho);</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/>w.<ref refid="class_sparse_matrix_1a28e5b50a5a3621501928dc14884262c0" kindref="member">IminusRhoThis</ref>(rho,<sp/>lag,<sp/>lag_rho);</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho_ols<sp/>=<sp/>y_rho.product(lag_rho)<sp/>/<sp/>lag_rho.norm();</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho_I<sp/>=<sp/>y_rho.product(lag_rho)<sp/>/<sp/>y_rho.norm();</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho_IV<sp/>=<sp/>lag_rho.sum()<sp/>/<sp/>y_rho.sum();</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>sol_lag(dim),<sp/>resid(dim);</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/>sol.<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(cnt,<sp/>y_rho.getValue(cnt)<sp/>-<sp/>lag_rho.getValue(cnt)<sp/>*<sp/>rho_ols);</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/>resid.setAt(cnt,<sp/>y_rho.getValue(cnt)<sp/>-<sp/>lag_rho.getValue(cnt)<sp/>*<sp/>rho);</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dr<sp/>=<sp/>resid.norm();</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/>w.<ref refid="class_sparse_matrix_1a28e5b50a5a3621501928dc14884262c0" kindref="member">IminusRhoThis</ref>(rho,<sp/>sol,<sp/>resid);</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>w.matrixColumn(sol_lag,<sp/>sol);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sol_lag.setAt(<sp/>cnt,<sp/>sol_lag.getValue(cnt)<sp/>/<sp/>w.getScale()[cnt]<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sol.setAt(<sp/>cnt,<sp/>sol.getValue(cnt)<sp/>/<sp/>w.getScale()[cnt]<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for<sp/>(int<sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resid.setAt(<sp/>cnt,<sp/>sol.getValue(cnt)<sp/>-<sp/>rho<sp/>*<sp/>sol_lag.getValue(cnt)<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eWy<sp/>=<sp/>lag.<ref refid="class_dense_vector_1a73a9483af1a14b8b8a6ef8ade3e8eb0d" kindref="member">product</ref>(sol),<sp/>eWy_rho<sp/>=<sp/>lag_rho.product(sol);</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/>w.<ref refid="class_sparse_matrix_1a28e5b50a5a3621501928dc14884262c0" kindref="member">IminusRhoThis</ref>(rho_ols,<sp/>sol,<sp/>resid);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rho_ols;</highlight></codeline>
<codeline lineno="2226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight><highlight class="comment">//***<sp/>maximization<sp/>routine<sp/>using<sp/>golden<sp/>section<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a32b617ec7f698fabca4192908289c4b5" kindref="member">goldeno</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>left,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>right,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref><sp/>&amp;w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;y,</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;lag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*X)<sp/>{</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>w.<ref refid="class_sparse_matrix_1a6b574e9d1019686f425283b29e4aa257" kindref="member">dim</ref>();</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>middle<sp/>=<sp/>(left<sp/>+<sp/>right)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x0,<sp/>x1,<sp/>x2,<sp/>x3,<sp/>f0,<sp/>f1,<sp/>f2,<sp/>f3;</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/>x0<sp/>=<sp/>left;</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/>x3<sp/>=<sp/>right;</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>x2<sp/>=<sp/>middle;</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>sol(dim);</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>y_rho(dim),<sp/>lag_rho(dim);</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(right<sp/>-<sp/>middle)<sp/>&gt;<sp/>fabs(middle<sp/>-<sp/>left))</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>+=<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>(right<sp/>-<sp/>middle);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>-=<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>(middle<sp/>-<sp/>left);</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Counter<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacegeoda_1a4bb896c1edfb733407f3bc834ef9b3dc" kindref="member">ols</ref><sp/>=<sp/>y.<ref refid="class_dense_vector_1a73a9483af1a14b8b8a6ef8ade3e8eb0d" kindref="member">product</ref>(lag)<sp/>/<sp/>lag.<ref refid="class_dense_vector_1a8e5e9af36c71cfc5507fd8fac7bb02dd" kindref="member">norm</ref>(),<sp/>mi<sp/>=<sp/>y.<ref refid="class_dense_vector_1a73a9483af1a14b8b8a6ef8ade3e8eb0d" kindref="member">product</ref>(lag)<sp/>/<sp/>y.<ref refid="class_dense_vector_1a8e5e9af36c71cfc5507fd8fac7bb02dd" kindref="member">norm</ref>();</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/>f1<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/>x1<sp/>=<sp/>mi;</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fabs(f1<sp/>-<sp/>x1)<sp/>&gt;<sp/><ref refid="mix_8h_1a89311a98397f9d6967d2cb10d5152d77" kindref="member">TOLERANCE</ref><sp/>&amp;&amp;<sp/>it<sp/>&lt;<sp/>50)<sp/>{</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/>f1<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ab0cf864c7478be449a6ceaa6e544474e" kindref="member">Lco</ref>(y,<sp/>lag,<sp/>X,<sp/>w,<sp/>x1,<sp/>sol);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f1<sp/>+<sp/>x1<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>(x1<sp/>+<sp/>f1)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>+=<sp/>f1;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1ab0cf864c7478be449a6ceaa6e544474e" kindref="member">Lco</ref>(y,<sp/>lag,<sp/>X,<sp/>w,<sp/>0.241867,<sp/>sol);</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1ab0cf864c7478be449a6ceaa6e544474e" kindref="member">Lco</ref>(y,<sp/>lag,<sp/>X,<sp/>w,<sp/>0.954481,<sp/>sol);</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1ab0cf864c7478be449a6ceaa6e544474e" kindref="member">Lco</ref>(y,<sp/>lag,<sp/>X,<sp/>w,<sp/>0.954482,<sp/>sol);</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x1;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/>f2<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ab0cf864c7478be449a6ceaa6e544474e" kindref="member">Lco</ref>(y,<sp/>lag,<sp/>X,<sp/>w,<sp/>x2,<sp/>sol);</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/>f1<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ab0cf864c7478be449a6ceaa6e544474e" kindref="member">Lco</ref>(y,<sp/>lag,<sp/>X,<sp/>w,<sp/>x1,<sp/>sol);</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1ab0cf864c7478be449a6ceaa6e544474e" kindref="member">Lco</ref>(y,<sp/>lag,<sp/>X,<sp/>w,<sp/>f1,<sp/>sol);</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1ab0cf864c7478be449a6ceaa6e544474e" kindref="member">Lco</ref>(y,<sp/>lag,<sp/>X,<sp/>w,<sp/>f2,<sp/>sol);</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1ab0cf864c7478be449a6ceaa6e544474e" kindref="member">Lco</ref>(y,<sp/>lag,<sp/>X,<sp/>w,<sp/>-0.0586045,<sp/>sol);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exit(0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>while<sp/>(fabs(x3-x0)<sp/>&gt;<sp/>tol*(fabs(x1)+fabs(x2)))<sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>here<sp/>tol<sp/>is<sp/>used<sp/>as<sp/>RELATIVE<sp/>accuracy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fabs(x3<sp/>-<sp/>x0)<sp/>&gt;<sp/><ref refid="mix_8h_1a89311a98397f9d6967d2cb10d5152d77" kindref="member">TOLERANCE</ref>)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>tol<sp/>is<sp/>used<sp/>as<sp/>an<sp/>ABSOLUTE<sp/>accuracy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f1<sp/>&lt;<sp/>f2)<sp/>{</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(x0,<sp/>x1,<sp/>x2,<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>*<sp/>x2<sp/>+<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>x3);</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(f0,<sp/>f1,<sp/>f2,<sp/><ref refid="_m_l__im_8cpp_1ab0cf864c7478be449a6ceaa6e544474e" kindref="member">Lco</ref>(y,<sp/>lag,<sp/>X,<sp/>w,<sp/>x2,<sp/>sol));</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(x3,<sp/>x2,<sp/>x1,<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>*<sp/>x1<sp/>+<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>*<sp/>x0);</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a70894328b805673e47161f19f3c8f156" kindref="member">SHFT</ref>(f3,<sp/>f2,<sp/>f1,<sp/><ref refid="_m_l__im_8cpp_1ab0cf864c7478be449a6ceaa6e544474e" kindref="member">Lco</ref>(y,<sp/>lag,<sp/>X,<sp/>w,<sp/>x1,<sp/>sol));</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/>++Counter;</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f2<sp/>&gt;<sp/>f1)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>x2<sp/>has<sp/>value<sp/>larger<sp/>than<sp/>x1<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/>f1<sp/>=<sp/>f2;</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x1;</highlight></codeline>
<codeline lineno="2287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"></highlight></codeline>
<codeline lineno="2289"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ac6c37566673c5282048de746dcbc30ce" kindref="member">lcdfPlus</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;df)<sp/>{</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ss<sp/>=<sp/>x.<ref refid="class_dense_vector_1a8e5e9af36c71cfc5507fd8fac7bb02dd" kindref="member">norm</ref>(),<sp/>ss2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>x.<ref refid="class_dense_vector_1ab8cd31005d532650e2173b1f170a9e80" kindref="member">getSize</ref>();<sp/>++cnt)<sp/>ss2<sp/>+=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(x.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt)<sp/>+<sp/>df.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt));</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ss2<sp/>-<sp/>ss)<sp/>/<sp/>ss;</highlight></codeline>
<codeline lineno="2293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a35b3103e202dc06a2a2c6b4b7377be52" kindref="member">estLj</ref>(<ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;y,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;lag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref><sp/>&amp;w)<sp/>{</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps<sp/>=<sp/>1.0e-6;</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>y.<ref refid="class_dense_vector_1ab8cd31005d532650e2173b1f170a9e80" kindref="member">getSize</ref>();</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>e(dim),<sp/>eeps(dim),<sp/>works(dim);</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>e.setAt(cnt,<sp/>y.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt)<sp/>-<sp/>rho<sp/>*<sp/>lag.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt));</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sss<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/>works.reset();</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/>works.setAt(cnt,<sp/>eps);</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/>w.<ref refid="class_sparse_matrix_1a28e5b50a5a3621501928dc14884262c0" kindref="member">IminusRhoThis</ref>(rho,<sp/>works,<sp/>eeps);</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ss<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ac6c37566673c5282048de746dcbc30ce" kindref="member">lcdfPlus</ref>(e,<sp/>eeps)<sp/>/<sp/>eps;</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/>sss<sp/>+=<sp/>ss;</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"></highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a1612b4bbc58107e9c70049e8ef27292e" kindref="member">getLj</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref><sp/>&amp;w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;lag)<sp/>{</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>w.<ref refid="class_sparse_matrix_1a6b574e9d1019686f425283b29e4aa257" kindref="member">dim</ref>();</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>e(dim),<sp/>sol(dim),<sp/>rm(dim);</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>e.setAt(cnt,<sp/>(y.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt)<sp/>-<sp/>rho<sp/>*<sp/>lag.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt))<sp/>*<sp/>w.<ref refid="class_sparse_matrix_1a76c6f1e47dca55adae87617fff13cbd4" kindref="member">getScale</ref>()[cnt]);</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/>w.<ref refid="class_sparse_matrix_1a28e5b50a5a3621501928dc14884262c0" kindref="member">IminusRhoThis</ref>(rho,<sp/>e,<sp/>rm);</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1a10f53eac8da8e4374949379bf09e8db1" kindref="member">cg</ref>(w,<sp/>rho,<sp/>e,<sp/>sol);</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/>e.setAt(cnt,<sp/>e.getValue(cnt)<sp/>/<sp/>w.<ref refid="class_sparse_matrix_1a76c6f1e47dca55adae87617fff13cbd4" kindref="member">getScale</ref>()[cnt]);</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/>sol.<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(cnt,<sp/>sol.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt)<sp/>/<sp/>w.<ref refid="class_sparse_matrix_1a76c6f1e47dca55adae87617fff13cbd4" kindref="member">getScale</ref>()[cnt]);</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/>rm.setAt(cnt,<sp/>rm.getValue(cnt)<sp/>/<sp/>w.<ref refid="class_sparse_matrix_1a76c6f1e47dca55adae87617fff13cbd4" kindref="member">getScale</ref>()[cnt]);</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>en<sp/>=<sp/>e.norm(),<sp/>sn<sp/>=<sp/>sol.<ref refid="class_dense_vector_1a8e5e9af36c71cfc5507fd8fac7bb02dd" kindref="member">norm</ref>(),<sp/>rn<sp/>=<sp/>rm.norm();</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight></codeline>
<codeline lineno="2331"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1a6cea067ff3be811e0c2d24b21c688010" kindref="member">EGLS</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref><sp/>&amp;w,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;egls)<sp/>{</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>w.<ref refid="class_sparse_matrix_1a6b574e9d1019686f425283b29e4aa257" kindref="member">dim</ref>(),<sp/>vars<sp/>=<sp/>egls.<ref refid="class_dense_vector_1ab8cd31005d532650e2173b1f170a9e80" kindref="member">getSize</ref>();</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>mY(dim),<sp/>*mX<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[vars];</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/>mX[cnt].<ref refid="class_dense_vector_1a97fb7da8dea1acb844b89cf5e74e7801" kindref="member">alloc</ref>(dim);</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/>w.<ref refid="class_sparse_matrix_1a28e5b50a5a3621501928dc14884262c0" kindref="member">IminusRhoThis</ref>(lambda,<sp/>X[cnt],<sp/>mX[cnt]);</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/>w.<ref refid="class_sparse_matrix_1a28e5b50a5a3621501928dc14884262c0" kindref="member">IminusRhoThis</ref>(lambda,<sp/>y,<sp/>mY);<sp/><sp/></highlight><highlight class="comment">//<sp/>mY<sp/>=<sp/>(I-lambda*W)y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**cov<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*[vars],<sp/>*resid<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim];</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>0,<sp/>b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(a<sp/>=<sp/>0;<sp/>a<sp/>&lt;<sp/>vars;<sp/>a++)<sp/>{</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/>cov[a]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[vars];</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(b<sp/>=<sp/>0;<sp/>b<sp/>&lt;<sp/>vars;<sp/>b++)<sp/>{</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cov[a][b]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1abffb96af09f2ae3ec91960165c007bfe" kindref="member">ordinaryLS</ref>(mY,<sp/>mX,<sp/>cov,<sp/>resid,<sp/>egls);</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>mX;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/>mX<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>cov;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/>cov<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>resid;</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/>resid<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1accaab526c2f67bc4076786b8f1477c13" kindref="member">mic</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;resid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;residW,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trace,</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trace2)<sp/>{</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>resid.<ref refid="class_dense_vector_1ab8cd31005d532650e2173b1f170a9e80" kindref="member">getSize</ref>();</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>rd(dim);</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/>rd.minusTimes(resid,<sp/>residW,<sp/>rho);</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sse<sp/>=<sp/>rd.norm();</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/>dim<sp/>*<sp/>rd.product(residW)<sp/>-<sp/>trace<sp/>*<sp/>sse;</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sd<sp/>=<sp/>-dim<sp/>*<sp/>residW.<ref refid="class_dense_vector_1a8e5e9af36c71cfc5507fd8fac7bb02dd" kindref="member">norm</ref>()<sp/>+<sp/>2.0<sp/>*<sp/>trace<sp/>*<sp/>rd.product(residW)<sp/>-<sp/>trace2<sp/>*<sp/>sse;</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-fd<sp/>/<sp/>sd;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1af97f999fb2af653bd906e768d5e3b100" kindref="member">mie</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;rsd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;lag_resid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trace,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trace2,</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref><sp/>&amp;w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vars,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda)<sp/>{</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*double_ptr_type;</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>rsd.<ref refid="class_dense_vector_1ab8cd31005d532650e2173b1f170a9e80" kindref="member">getSize</ref>();</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sse<sp/>=<sp/>rsd.<ref refid="class_dense_vector_1a8e5e9af36c71cfc5507fd8fac7bb02dd" kindref="member">norm</ref>(),<sp/>cross<sp/>=<sp/>rsd.<ref refid="class_dense_vector_1a73a9483af1a14b8b8a6ef8ade3e8eb0d" kindref="member">product</ref>(lag_resid);</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*dX<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[vars],<sp/>dY(dim);</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"></highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/>w.<ref refid="class_sparse_matrix_1a28e5b50a5a3621501928dc14884262c0" kindref="member">IminusRhoThis</ref>(lambda,<sp/>y,<sp/>dY);</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/>dX[cnt].<ref refid="class_dense_vector_1a97fb7da8dea1acb844b89cf5e74e7801" kindref="member">alloc</ref>(dim);</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/>w.<ref refid="class_sparse_matrix_1a28e5b50a5a3621501928dc14884262c0" kindref="member">IminusRhoThis</ref>(lambda,<sp/>X[cnt],<sp/>dX[cnt]);</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*lagX<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[vars],<sp/>lagY(dim);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/>w.<ref refid="class_sparse_matrix_1a760e784d0fd1fa38694e9cda78e389a6" kindref="member">matrixColumn</ref>(lagY,<sp/>y);</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/>lagX[cnt].<ref refid="class_dense_vector_1a97fb7da8dea1acb844b89cf5e74e7801" kindref="member">alloc</ref>(dim);</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/>w.<ref refid="class_sparse_matrix_1a760e784d0fd1fa38694e9cda78e389a6" kindref="member">matrixColumn</ref>(lagX[cnt],<sp/>X[cnt]);</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/>double_ptr_type<sp/>*cov<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>double_ptr_type[vars];</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/>cov[cnt]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[vars];</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>cnt;<sp/>++cp)<sp/>cov[cnt][cp]<sp/>=<sp/>cov[cp][cnt]<sp/>=<sp/>dX[cnt].<ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref>(dX[cp]);</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/>cov[cnt][cnt]<sp/>=<sp/>dX[cnt].<ref refid="class_dense_vector_1a8e5e9af36c71cfc5507fd8fac7bb02dd" kindref="member">norm</ref>();</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_m_l__im_8cpp_1a8d6c7b80b63056009958afd0f1647aea" kindref="member">SymMatInverse</ref>(cov,<sp/>vars)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/>double_ptr_type<sp/>*lagDX<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>double_ptr_type[vars];<sp/><sp/></highlight><highlight class="comment">//<sp/>X(I-lamW)WX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/>lagDX[cnt]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[vars];</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>cnt;<sp/>++cp)</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lagDX[cnt][cp]<sp/>=<sp/>lagDX[cp][cnt]<sp/>=<sp/>(dX[cnt].<ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref>(lagX[cp])<sp/>+<sp/>dX[cp].<ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref>(lagX[cnt]));</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/>lagDX[cnt][cnt]<sp/>=<sp/>2.0<sp/>*<sp/>dX[cnt].<ref refid="class_dense_vector_1a73a9483af1a14b8b8a6ef8ade3e8eb0d" kindref="member">product</ref>(lagX[cnt]);</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>s1(vars),<sp/>wk(vars),<sp/>wk1(vars),<sp/>wk2(dim),<sp/>s5(vars);</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars;<sp/>++cnt)<sp/>s1.setAt(cnt,<sp/>rsd.<ref refid="class_dense_vector_1a73a9483af1a14b8b8a6ef8ade3e8eb0d" kindref="member">product</ref>(dX[cnt])<sp/>*<sp/>dim<sp/>/<sp/>sse);<sp/><sp/></highlight><highlight class="comment">//<sp/>s1<sp/>=<sp/>partial<sp/>dL/dBeta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars;<sp/>++cnt)<sp/>wk.setAt(cnt,<sp/>-lag_resid.<ref refid="class_dense_vector_1a73a9483af1a14b8b8a6ef8ade3e8eb0d" kindref="member">product</ref>(dX[cnt])<sp/>-<sp/>rsd.<ref refid="class_dense_vector_1a73a9483af1a14b8b8a6ef8ade3e8eb0d" kindref="member">product</ref>(lagX[cnt]));</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/>wk.timesSquareMatrix(s5,<sp/>cov);<sp/><sp/></highlight><highlight class="comment">//<sp/>s5<sp/>==<sp/>dBeta/dLambda</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pp<sp/>=<sp/>s1.product(s5);</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/>dim<sp/>*<sp/>cross<sp/>/<sp/>sse<sp/>-<sp/>trace<sp/>+<sp/>pp;<sp/><sp/></highlight><highlight class="comment">//<sp/>dL/dlambda</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars;<sp/>++cnt)</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/>wk.setAt(cnt,<sp/>2.0<sp/>*<sp/>cross<sp/>*<sp/>rsd.<ref refid="class_dense_vector_1a73a9483af1a14b8b8a6ef8ade3e8eb0d" kindref="member">product</ref>(dX[cnt])<sp/>-<sp/>sse<sp/>*<sp/>lag_resid.<ref refid="class_dense_vector_1a73a9483af1a14b8b8a6ef8ade3e8eb0d" kindref="member">product</ref>(dX[cnt])<sp/>-<sp/>sse<sp/>*<sp/>rsd.<ref refid="class_dense_vector_1a73a9483af1a14b8b8a6ef8ade3e8eb0d" kindref="member">product</ref>(lagX[cnt]));</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/>wk.times(dim<sp/>/<sp/>sse<sp/>/<sp/>sse);<sp/><sp/></highlight><highlight class="comment">//<sp/>=<sp/>(partial)<sp/>d2L/dLambdadBeta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sd1<sp/>=<sp/>2.0<sp/>*<sp/>wk.product(s5);</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars;<sp/>++cnt)<sp/>wk.setAt(cnt,<sp/>rsd.<ref refid="class_dense_vector_1a73a9483af1a14b8b8a6ef8ade3e8eb0d" kindref="member">product</ref>(dX[cnt]));</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/>double_ptr_type<sp/>*d2LdBeta2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>double_ptr_type[vars];</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/>d2LdBeta2[cnt]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[vars];</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>cnt;<sp/>++cp)</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d2LdBeta2[cnt][cp]<sp/>=<sp/>d2LdBeta2[cp][cnt]<sp/>=<sp/>wk.getValue(cnt)<sp/>*<sp/>wk.getValue(cp)<sp/>-<sp/>sse<sp/>*<sp/>dX[cnt].<ref refid="class_dense_vector_1a73a9483af1a14b8b8a6ef8ade3e8eb0d" kindref="member">product</ref>(dX[cp]);</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/>d2LdBeta2[cnt][cnt]<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(wk.getValue(cnt))<sp/>-<sp/>sse<sp/>*<sp/>dX[cnt].<ref refid="class_dense_vector_1a8e5e9af36c71cfc5507fd8fac7bb02dd" kindref="member">norm</ref>();</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars;<sp/>++cnt)</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>vars;<sp/>++cp)</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d2LdBeta2[cnt][cp]<sp/>*=<sp/>(1.0<sp/>*<sp/>dim<sp/>/<sp/>sse<sp/>/<sp/>sse);<sp/><sp/></highlight><highlight class="comment">//<sp/>d2LdBeta2<sp/>=<sp/>(partial)<sp/>d2L/dBeta2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/>s5.timesSquareMatrix(wk,<sp/>d2LdBeta2);</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sd2<sp/>=<sp/>s5.product(wk);</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/>s5.timesSquareMatrix(wk,<sp/>lagDX);</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars;<sp/>++cnt)<sp/>wk.setAt(cnt,<sp/>wk.getValue(cnt)<sp/>+<sp/>lagX[cnt].product(lag_resid));</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/>wk.timesSquareMatrix(wk1,<sp/>cov);</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/>wk1.times(2);<sp/><sp/></highlight><highlight class="comment">//<sp/>wk1<sp/>=<sp/>(partial)<sp/>d2beta/dlambda2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sd3<sp/>=<sp/>wk1.product(s1);</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" kindref="member">release</ref>(&amp;cov[cnt]);</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" kindref="member">release</ref>(&amp;lagDX[cnt]);</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" kindref="member">release</ref>(&amp;d2LdBeta2[cnt]);</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>lagX;</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/>lagX<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>dX;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/>dX<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><ref refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" kindref="member">release</ref>(&amp;cov);</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><ref refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" kindref="member">release</ref>(&amp;lagDX);</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><ref refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" kindref="member">release</ref>(&amp;d2LdBeta2);</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>psd<sp/>=<sp/>dim<sp/>*<sp/>(2.0<sp/>*<sp/>cross<sp/>*<sp/>cross<sp/>-<sp/>lag_resid.<ref refid="class_dense_vector_1a8e5e9af36c71cfc5507fd8fac7bb02dd" kindref="member">norm</ref>()<sp/>*<sp/>sse)<sp/>/<sp/>sse<sp/>/<sp/>sse<sp/>-<sp/>trace2;<sp/><sp/></highlight><highlight class="comment">//<sp/>partial<sp/>d2L/dLambda2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sd<sp/>=<sp/>psd<sp/>+<sp/>sd1<sp/>+<sp/>sd2<sp/>+<sp/>sd3;</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-fd<sp/>/<sp/>sd;</highlight></codeline>
<codeline lineno="2462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1aa080882f1a6cd79504eeb331dfdd692f" kindref="member">betai</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
    </programlisting>
    <location file="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp"/>
  </compounddef>
</doxygen>
