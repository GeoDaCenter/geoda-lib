<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="mix_8cpp" kind="file" language="C++">
    <compoundname>mix.cpp</compoundname>
    <includes refid="mix_8h" local="yes">regression/mix.h</includes>
    <includes local="no">blaswrap.h</includes>
    <includes local="no">f2c.h</includes>
    <includes refid="dense-vector_8h" local="yes">regression/dense-vector.h</includes>
    <includes refid="lite2_8h" local="yes">regression/lite2.h</includes>
    <includes refid="reg-utils_8h" local="yes">regression/reg-utils.h</includes>
    <incdepgraph>
      <node id="9">
        <label>regression/dense-vector.h</label>
        <link refid="dense-vector_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>regression/diagnostic-report.h</label>
        <link refid="diagnostic-report_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>regression/lite2.h</label>
        <link refid="lite2_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp</label>
        <link refid="mix_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>regression/mix.h</label>
        <link refid="mix_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>regression/reg-utils.h</label>
        <link refid="reg-utils_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>algorithm</label>
      </node>
      <node id="7">
        <label>blaswrap.h</label>
      </node>
      <node id="8">
        <label>f2c.h</label>
      </node>
      <node id="4">
        <label>fstream</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="3">
        <label>math.h</label>
      </node>
      <node id="12">
        <label>ostream</label>
      </node>
      <node id="16">
        <label>string</label>
      </node>
      <node id="6">
        <label>utility</label>
      </node>
      <node id="13">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="mix_8cpp_1a032d14e2ba792af7b5338313223b20bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dgesvd_</definition>
        <argsstring>(char *jobu, char *jobvt, integer *m, integer *n, doublereal *a, integer *lda, doublereal *s, doublereal *u, integer *ldu, doublereal *vt, integer *ldvt, doublereal *work, integer *lwork, integer *info)</argsstring>
        <name>dgesvd_</name>
        <param>
          <type>char *</type>
          <declname>jobu</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>jobvt</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>lda</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>u</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>ldu</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>vt</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>ldvt</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>lwork</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="14" column="16" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" declline="14" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1aa4fb43aa911fe694869514f2deb12656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dspev_</definition>
        <argsstring>(char *jobz, char *uplo, integer *n, doublereal *ap, doublereal *w, doublereal *z__, integer *ldz, doublereal *work, integer *info)</argsstring>
        <name>dspev_</name>
        <param>
          <type>char *</type>
          <declname>jobz</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>uplo</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>ap</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>z__</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>ldz</declname>
        </param>
        <param>
          <type>doublereal *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>integer *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="17" column="16" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" declline="17" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1a750fe9d40743b3365b7bb176325a8239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double nc</definition>
        <argsstring>(double x)</argsstring>
        <name>nc</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="21" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="21" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1aabf39ecccc476778a25fbb0c5757a08f" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float erfcc</definition>
        <argsstring>(float x)</argsstring>
        <name>erfcc</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="128" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="128" bodyend="140" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" declline="37" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1af5393bc2d32f084eb797cecd3d6e887a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double cdf</definition>
        <argsstring>(double x)</argsstring>
        <name>cdf</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="39" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="39" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1a80118369461f5ece56b6a6cc754a03c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double ndf</definition>
        <argsstring>(double t)</argsstring>
        <name>ndf</name>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="53" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1a1f896110d76c45bdb438bf7a8af67163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void error</definition>
        <argsstring>(const char *s, const char *s2)</argsstring>
        <name>error</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="55" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double product</definition>
        <argsstring>(const double *v1, const double *v2, const int &amp;sz)</argsstring>
        <name>product</name>
        <param>
          <type>const double *</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="60" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="60" bodyend="64" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" declline="442" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1ade3b1704b0fbd147c730e08ab85fd2a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double * vproduct</definition>
        <argsstring>(double *v1, double *v2, int dim)</argsstring>
        <name>vproduct</name>
        <param>
          <type>double *</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="66" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="66" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1ad84188fef41059470dc8867321ce5b7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double norm</definition>
        <argsstring>(const double *v, const int size)</argsstring>
        <name>norm</name>
        <param>
          <type>const double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="75" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="75" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1a61ccd72f7e2d2f65912807eda4c8643c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double gauss</definition>
        <argsstring>()</argsstring>
        <name>gauss</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="92" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="92" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1a76245581ea69a752b8bbcb373d751278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double normW</definition>
        <argsstring>(const double *v, const double *w, const int size)</argsstring>
        <name>normW</name>
        <param>
          <type>const double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="112" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="112" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1a550e5e02126eb04a9e535526714e0dc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double gammaln</definition>
        <argsstring>(const double xx)</argsstring>
        <name>gammaln</name>
        <param>
          <type>const double</type>
          <declname>xx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="142" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="142" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1a1d943398477f03a358563209a3930bf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float betacf</definition>
        <argsstring>(float a, float b, float x)</argsstring>
        <name>betacf</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="157" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="157" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1aa080882f1a6cd79504eeb331dfdd692f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float betai</definition>
        <argsstring>(float a, float b, float x)</argsstring>
        <name>betai</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="208" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="208" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1acdc245dbcfc100529c7b529507bf420e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double gser</definition>
        <argsstring>(const double a, const double x)</argsstring>
        <name>gser</name>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="234" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="234" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1a73ad0343c3a33cfd7ee192a914d88a76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double gcf</definition>
        <argsstring>(const double a, const double x)</argsstring>
        <name>gcf</name>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="258" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="258" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1ad43d7dfa4d017658b744b534aaaa9df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double gammp</definition>
        <argsstring>(const double a, const double x)</argsstring>
        <name>gammp</name>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="284" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="284" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1a874a8df8d170dc6b12a6b75b13586259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double fprob</definition>
        <argsstring>(int dfnum, int dfden, double F)</argsstring>
        <name>fprob</name>
        <param>
          <type>int</type>
          <declname>dfnum</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dfden</declname>
        </param>
        <param>
          <type>double</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="300" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="300" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1ad92c3aea0684aa0a823d0d6be425c7e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double zprob</definition>
        <argsstring>(double z)</argsstring>
        <name>zprob</name>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="318" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="318" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1a9544baf6ef13e6338ff61ef3186c9c82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double _exp</definition>
        <argsstring>(double x)</argsstring>
        <name>_exp</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="375" column="15" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="375" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1a83000924c2febb6a5c0471797f1a2b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double chicdf</definition>
        <argsstring>(double chisq, int df)</argsstring>
        <name>chicdf</name>
        <param>
          <type>double</type>
          <declname>chisq</declname>
        </param>
        <param>
          <type>int</type>
          <declname>df</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="387" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="387" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1a07075c7867e1a834fa77108e04482303" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double * JarqueBera</definition>
        <argsstring>(double *e, long n, long k)</argsstring>
        <name>JarqueBera</name>
        <param>
          <type>double *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>long</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="444" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="444" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1a8d6c7b80b63056009958afd0f1647aea" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SymMatInverse</definition>
        <argsstring>(Iterator&lt; WVector &gt; mt)</argsstring>
        <name>SymMatInverse</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="475" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="368" bodyend="404" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" declline="475" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1aa32897d547b28fc5eeb64cca5ec114db" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SymMatInverse</definition>
        <argsstring>(double **mt, const int dim)</argsstring>
        <name>SymMatInverse</name>
        <param>
          <type>double **</type>
          <declname>mt</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="476" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1128" bodyend="1162" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" declline="476" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1a78037708268846837daa3b2d83b7bc53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double * BP_Test</definition>
        <argsstring>(double *resid, int obs, double **X, int nvar, bool InclConst)</argsstring>
        <name>BP_Test</name>
        <param>
          <type>double *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>obs</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>X</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>InclConst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="478" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="478" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1a28146b5c4f4af71620f15b38ad2c75aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double MC_Condition_Number</definition>
        <argsstring>(double **X, int dim, int expl)</argsstring>
        <name>MC_Condition_Number</name>
        <param>
          <type>double **</type>
          <declname>X</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>expl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="577" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="577" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="mix_8cpp_1a1005094e4acd0a1f2587b816f163c760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double * WhiteTest</definition>
        <argsstring>(int obs, int nvar, double *resid, double **X, bool InclConstant)</argsstring>
        <name>WhiteTest</name>
        <param>
          <type>int</type>
          <declname>obs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>X</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>InclConstant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" line="624" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="624" bodyend="699"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mix_8h" kindref="compound">regression/mix.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;blaswrap.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;f2c.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dense-vector_8h" kindref="compound">regression/dense-vector.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lite2_8h" kindref="compound">regression/lite2.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="reg-utils_8h" kindref="compound">regression/reg-utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>extern<sp/>&quot;C&quot;<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;clapack.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1a032d14e2ba792af7b5338313223b20bb" kindref="member">dgesvd_</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*jobu,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*jobvt,<sp/>integer<sp/>*m,<sp/>integer<sp/>*n,<sp/>doublereal<sp/>*a,<sp/>integer<sp/>*lda,<sp/>doublereal<sp/>*s,</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doublereal<sp/>*u,<sp/>integer<sp/>*ldu,<sp/>doublereal<sp/>*vt,<sp/>integer<sp/>*ldvt,<sp/>doublereal<sp/>*work,<sp/>integer<sp/>*lwork,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integer<sp/>*info);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1aa4fb43aa911fe694869514f2deb12656" kindref="member">dspev_</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*jobz,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*uplo,<sp/>integer<sp/>*n,<sp/>doublereal<sp/>*ap,<sp/>doublereal<sp/>*w,<sp/>doublereal<sp/>*z__,<sp/>integer<sp/>*ldz,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doublereal<sp/>*work,<sp/>integer<sp/>*info);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>standard<sp/>normal<sp/>cumulative<sp/>distribution<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1a750fe9d40743b3365b7bb176325a8239" kindref="member">nc</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>-7.)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="mix_8cpp_1a80118369461f5ece56b6a6cc754a03c7" kindref="member">ndf</ref>(x)<sp/>/<sp/>sqrt(1.<sp/>+<sp/>x<sp/>*<sp/>x);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>7.)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>1.<sp/>-<sp/><ref refid="mix_8cpp_1a750fe9d40743b3365b7bb176325a8239" kindref="member">nc</ref>(-x);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0.2316419;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a[5]<sp/>=<sp/>{0.31938153,<sp/>-0.356563782,<sp/>1.781477937,<sp/>-1.821255978,<sp/>1.330274429};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>1.<sp/>/<sp/>(1<sp/>+<sp/>result<sp/>*<sp/>fabs(x));</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>1<sp/>-<sp/><ref refid="mix_8cpp_1a80118369461f5ece56b6a6cc754a03c7" kindref="member">ndf</ref>(x)<sp/>*<sp/>(result<sp/>*<sp/>(a[0]<sp/>+<sp/>result<sp/>*<sp/>(a[1]<sp/>+<sp/>result<sp/>*<sp/>(a[2]<sp/>+<sp/>result<sp/>*<sp/>(a[3]<sp/>+<sp/>result<sp/>*<sp/>a[4])))));</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;=<sp/>0.)<sp/>result<sp/>=<sp/>1.<sp/>-<sp/>result;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1aabf39ecccc476778a25fbb0c5757a08f" kindref="member">erfcc</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1af5393bc2d32f084eb797cecd3d6e887a" kindref="member">cdf</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cumulative<sp/>distribution<sp/>function<sp/>of<sp/>standard<sp/>normal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps<sp/>=<sp/>10e-17;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>(1<sp/>+<sp/><ref refid="mix_8cpp_1aabf39ecccc476778a25fbb0c5757a08f" kindref="member">erfcc</ref>(x<sp/>/<sp/>sqrt((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)2)))<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>1.0)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>p<sp/>-<sp/>eps;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>eps;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>standard<sp/>normal<sp/>density<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1a80118369461f5ece56b6a6cc754a03c7" kindref="member">ndf</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.398942280401433<sp/>*<sp/>exp(-t<sp/>*<sp/>t<sp/>/<sp/>2);<sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1a1f896110d76c45bdb438bf7a8af67163" kindref="member">error</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s2)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>wxMessageBox(wxString::Format(&quot;%s,<sp/>%s&quot;,<sp/>s,<sp/>s2));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s2<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;sz)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>sz;<sp/>++cnt)<sp/>s<sp/>+=<sp/>v1[cnt]<sp/>*<sp/>v2[cnt];</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="mix_8cpp_1ade3b1704b0fbd147c730e08ab85fd2a6" kindref="member">vproduct</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rslt<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim];</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rslt<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>i++)<sp/>rslt[i]<sp/>=<sp/>v1[i]<sp/>*<sp/>v2[i];</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rslt;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1ad84188fef41059470dc8867321ce5b7e" kindref="member">norm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>0,<sp/>ssq<sp/>=<sp/>1,<sp/>t;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>size;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>absc<sp/>=<sp/>fabs(v[cnt]);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scale<sp/>&lt;<sp/>absc)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>scale<sp/>/<sp/>absc;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssq<sp/>=<sp/>1.0<sp/>+<sp/>ssq<sp/>*<sp/>t<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>absc;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(absc<sp/>&gt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>absc<sp/>/<sp/>scale;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssq<sp/>+=<sp/>t<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scale<sp/>*<sp/>scale<sp/>*<sp/>ssq;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compute<sp/>standard<sp/>normal<sp/>deviate<sp/>using<sp/>Box-Muller<sp/><sp/>transformation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1a61ccd72f7e2d2f65912807eda4c8643c" kindref="member">gauss</ref>()<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gset;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v1,<sp/>v2,<sp/>fac,<sp/>r;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iset<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>don&apos;t<sp/>have<sp/>an<sp/>extra<sp/>deviate<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>2.0<sp/>*<sp/>rand()<sp/>/<sp/>RAND_MAX<sp/>-<sp/>1.0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>2.0<sp/>*<sp/>rand()<sp/>/<sp/>RAND_MAX<sp/>-<sp/>1.0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>v1<sp/>*<sp/>v1<sp/>+<sp/>v2<sp/>*<sp/>v2;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(r<sp/>&gt;=<sp/>1.0);<sp/><sp/></highlight><highlight class="comment">//<sp/>generate<sp/>a<sp/>couple<sp/>of<sp/>new<sp/>rands<sp/>within<sp/>unit<sp/>circle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>fac<sp/>=<sp/>sqrt(-2.0<sp/>*<sp/>log(r)<sp/>/<sp/>r);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>gset<sp/>=<sp/>v1<sp/>*<sp/>fac;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>iset<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v2<sp/>*<sp/>fac;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>iset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gset;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1a76245581ea69a752b8bbcb373d751278" kindref="member">normW</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>0,<sp/>ssq<sp/>=<sp/>1,<sp/>t;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>size;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>absc<sp/>=<sp/>fabs(v[cnt]<sp/>/<sp/>w[cnt]);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scale<sp/>&lt;<sp/>absc)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>scale<sp/>/<sp/>absc;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssq<sp/>=<sp/>1.0<sp/>+<sp/>ssq<sp/>*<sp/>t<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>absc;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(absc<sp/>&gt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>absc<sp/>/<sp/>scale;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssq<sp/>+=<sp/>t<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scale<sp/>*<sp/>scale<sp/>*<sp/>ssq;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1aabf39ecccc476778a25fbb0c5757a08f" kindref="member">erfcc</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t,<sp/>z,<sp/>ans;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/>fabs(x);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>1.0<sp/>/<sp/>(1.0<sp/>+<sp/>0.5<sp/>*<sp/>z);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>ans<sp/>=<sp/>t<sp/>*<sp/>exp(-z<sp/>*<sp/>z<sp/>-<sp/>1.26551223<sp/>+</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>*<sp/>(1.00002368<sp/>+</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>*<sp/>(0.37409196<sp/>+</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>*<sp/>(0.09678418<sp/>+</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>*<sp/>(-0.18628806<sp/>+</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>*<sp/>(0.27886807<sp/>+<sp/>t<sp/>*<sp/>(-1.13520398<sp/>+</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>*<sp/>(1.48851587<sp/>+<sp/>t<sp/>*<sp/>(-0.82215223<sp/>+<sp/>t<sp/>*<sp/>0.17087277)))))))));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&gt;=<sp/>0.0<sp/>?<sp/>ans<sp/>:<sp/>2.0<sp/>-<sp/>ans;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1a550e5e02126eb04a9e535526714e0dc0" kindref="member">gammaln</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xx)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cof[6]<sp/>=<sp/>{76.18009173,<sp/>-86.50532033,<sp/>24.01409822,<sp/>-1.231739516,<sp/>0.120858003e-2,<sp/>-0.536382e-5};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>xx<sp/>-<sp/>1.0;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>x<sp/>+<sp/>5.5;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>tmp<sp/>-=<sp/>(x<sp/>+<sp/>0.5)<sp/>*<sp/>log(tmp);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;=<sp/>5;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>1.0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>!=<sp/>0.0)<sp/>s<sp/>+=<sp/>cof[j]<sp/>/<sp/>x;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-tmp<sp/>+<sp/>log(2.50662827465<sp/>*<sp/>s);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>by<sp/>betai:<sp/>Evaluates<sp/>continued<sp/>fraction<sp/>for<sp/>incomplete<sp/>beta<sp/>function<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>modified<sp/>Lentz&apos;s<sp/>method<sp/>(x5.2).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1a1d943398477f03a358563209a3930bf4" kindref="member">betacf</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MAXIT<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>EPS<sp/>=<sp/>3.0e-7;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>FPMIN<sp/>=<sp/>1.0e-30;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,<sp/>m2;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>aa,<sp/>c,<sp/>d,<sp/>del,<sp/>h,<sp/>qab,<sp/>qam,<sp/>qap;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>q&apos;s<sp/>will<sp/>be<sp/>used<sp/>in<sp/>factors<sp/>that<sp/>occur</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>coe.cients<sp/>(6.4.6).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>qab<sp/>=<sp/>a<sp/>+<sp/>b;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>qap<sp/>=<sp/>a<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>qam<sp/>=<sp/>a<sp/>-<sp/>1.0;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>step<sp/>of<sp/>Lentz&apos;s<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>d<sp/>=<sp/>1.0<sp/>-<sp/>qab<sp/>*<sp/>x<sp/>/<sp/>qap;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(d)<sp/>&lt;<sp/>FPMIN)<sp/>d<sp/>=<sp/>FPMIN;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>d<sp/>=<sp/>1.0<sp/>/<sp/>d;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>h<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(m<sp/>=<sp/>1;<sp/>m<sp/>&lt;=<sp/>MAXIT;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>m2<sp/>=<sp/>2<sp/>*<sp/>m;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>aa<sp/>=<sp/>m<sp/>*<sp/>(b<sp/>-<sp/>m)<sp/>*<sp/>x<sp/>/<sp/>((qam<sp/>+<sp/>m2)<sp/>*<sp/>(a<sp/>+<sp/>m2));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>1.0<sp/>+<sp/>aa<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>One<sp/>step<sp/>(the<sp/>even<sp/>one)<sp/>of<sp/>the<sp/>recurrence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(d)<sp/>&lt;<sp/>FPMIN)<sp/>d<sp/>=<sp/>FPMIN;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>1.0<sp/>+<sp/>aa<sp/>/<sp/>c;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(c)<sp/>&lt;<sp/>FPMIN)<sp/>c<sp/>=<sp/>FPMIN;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>1.0<sp/>/<sp/>d;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>*=<sp/>d<sp/>*<sp/>c;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>aa<sp/>=<sp/>-(a<sp/>+<sp/>m)<sp/>*<sp/>(qab<sp/>+<sp/>m)<sp/>*<sp/>x<sp/>/<sp/>((a<sp/>+<sp/>m2)<sp/>*<sp/>(qap<sp/>+<sp/>m2));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>1.0<sp/>+<sp/>aa<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Next<sp/>step<sp/>of<sp/>the<sp/>recurrence<sp/>(the<sp/>odd<sp/>one).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(d)<sp/>&lt;<sp/>FPMIN)<sp/>d<sp/>=<sp/>FPMIN;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>1.0<sp/>+<sp/>aa<sp/>/<sp/>c;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(c)<sp/>&lt;<sp/>FPMIN)<sp/>c<sp/>=<sp/>FPMIN;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>1.0<sp/>/<sp/>d;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>del<sp/>=<sp/>d<sp/>*<sp/>c;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>*=<sp/>del;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(del<sp/>-<sp/>1.0)<sp/>&lt;<sp/>EPS)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Are<sp/>we<sp/>done?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&gt;<sp/>MAXIT)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;a<sp/>or<sp/>b<sp/>too<sp/>big,<sp/>or<sp/>MAXIT<sp/>too<sp/>small<sp/>in<sp/>betacf&quot;<sp/>&lt;&lt;<sp/>&apos;\n&apos;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-999;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>incomplete<sp/>beta<sp/>function<sp/>Ix(a;<sp/>b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1aa080882f1a6cd79504eeb331dfdd692f" kindref="member">betai</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bt;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>0.0<sp/>||<sp/>x<sp/>&gt;<sp/>1.0<sp/>||<sp/>a<sp/>==<sp/>0.0<sp/>||<sp/>b<sp/>==<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>&lt;&lt;<sp/>&quot;Bad<sp/>x<sp/>in<sp/>routine<sp/>betai&quot;<sp/>&lt;&lt;<sp/>&apos;\n&apos;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-999;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>0.0<sp/>||<sp/>x<sp/>==<sp/>1.0)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>bt<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Factors<sp/>in<sp/>front<sp/>of<sp/>the<sp/>continued<sp/>fraction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>bt<sp/>=<sp/>exp(<ref refid="mix_8cpp_1a550e5e02126eb04a9e535526714e0dc0" kindref="member">gammaln</ref>(a<sp/>+<sp/>b)<sp/>-<sp/><ref refid="mix_8cpp_1a550e5e02126eb04a9e535526714e0dc0" kindref="member">gammaln</ref>(a)<sp/>-<sp/><ref refid="mix_8cpp_1a550e5e02126eb04a9e535526714e0dc0" kindref="member">gammaln</ref>(b)<sp/>+<sp/>a<sp/>*<sp/>log(x)<sp/>+<sp/>b<sp/>*<sp/>log(1.0<sp/>-<sp/>x));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>(a<sp/>+<sp/>1.0)<sp/>/<sp/>(a<sp/>+<sp/>b<sp/>+<sp/>2.0))</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>continued<sp/>fraction<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bt<sp/>*<sp/><ref refid="mix_8cpp_1a1d943398477f03a358563209a3930bf4" kindref="member">betacf</ref>(a,<sp/>b,<sp/>x)<sp/>/<sp/>a;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>continued<sp/>fraction<sp/>after<sp/>making<sp/>the<sp/>symmetry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transformation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.0<sp/>-<sp/>bt<sp/>*<sp/><ref refid="mix_8cpp_1a1d943398477f03a358563209a3930bf4" kindref="member">betacf</ref>(b,<sp/>a,<sp/>1.0<sp/>-<sp/>x)<sp/>/<sp/>b;</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="230"><highlight class="comment">Returns<sp/>the<sp/>incomplete<sp/>gamma<sp/>function<sp/>P(a;<sp/>x)</highlight></codeline>
<codeline lineno="231"><highlight class="comment">evaluated<sp/>by<sp/>its<sp/>series<sp/>representation<sp/>as<sp/>gamser.</highlight></codeline>
<codeline lineno="232"><highlight class="comment">Also<sp/>returns<sp/>ln</highlight></codeline>
<codeline lineno="233"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1acdc245dbcfc100529c7b529507bf420e" kindref="member">gser</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ITMAX<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>EPS<sp/>=<sp/>3.0e-7;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gln<sp/>=<sp/><ref refid="mix_8cpp_1a550e5e02126eb04a9e535526714e0dc0" kindref="member">gammaln</ref>(a);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ap<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>del,<sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref>;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&gt;<sp/>0.0<sp/>||<sp/>a<sp/>&lt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>del<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref><sp/>=<sp/>1.0<sp/>/<sp/>a;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;<sp/>n<sp/>&lt;=<sp/>ITMAX;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ap<sp/>+=<sp/>1.0;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>del<sp/>*=<sp/>x<sp/>/<sp/>ap;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref><sp/>+=<sp/>del;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(del)<sp/>&lt;<sp/>fabs(<ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref>)<sp/>*<sp/>EPS)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref><sp/>*<sp/>exp(-x<sp/>+<sp/>a<sp/>*<sp/>log(x)<sp/>-<sp/>gln);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="254"><highlight class="comment">Returns<sp/>the<sp/>incomplete<sp/>gamma<sp/>function<sp/>Q(a;<sp/>x)</highlight></codeline>
<codeline lineno="255"><highlight class="comment">evaluated<sp/>by<sp/>its<sp/>continued<sp/>fraction<sp/>representation</highlight></codeline>
<codeline lineno="256"><highlight class="comment">as<sp/>gammcf.<sp/>Also<sp/>returns<sp/>ln</highlight></codeline>
<codeline lineno="257"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1a73ad0343c3a33cfd7ee192a914d88a76" kindref="member">gcf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ITMAX<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>EPS<sp/>=<sp/>3.0e-7;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gold<sp/>=<sp/>0,<sp/>g,<sp/>fac<sp/>=<sp/>1.0,<sp/>b1<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b0<sp/>=<sp/>0,<sp/>anf,<sp/>ana,<sp/>an,<sp/>a1,<sp/>a0<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gln<sp/>=<sp/><ref refid="mix_8cpp_1a550e5e02126eb04a9e535526714e0dc0" kindref="member">gammaln</ref>(a);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>a1<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;<sp/>n<sp/>&lt;=<sp/>ITMAX;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>an<sp/>=<sp/>1.0<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>ana<sp/>=<sp/>an<sp/>-<sp/>a;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>a0<sp/>=<sp/>(a1<sp/>+<sp/>a0<sp/>*<sp/>ana)<sp/>*<sp/>fac;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>b0<sp/>=<sp/>(b1<sp/>+<sp/>b0<sp/>*<sp/>ana)<sp/>*<sp/>fac;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>anf<sp/>=<sp/>an<sp/>*<sp/>fac;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>a1<sp/>=<sp/>x<sp/>*<sp/>a0<sp/>+<sp/>anf<sp/>*<sp/>a1;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>b1<sp/>=<sp/>x<sp/>*<sp/>b0<sp/>+<sp/>anf<sp/>*<sp/>b1;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(a1)<sp/>&gt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fac<sp/>=<sp/>1.0<sp/>/<sp/>a1;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>b1<sp/>*<sp/>fac;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs((g<sp/>-<sp/>gold)<sp/>/<sp/>g)<sp/>&lt;<sp/>EPS)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exp(-x<sp/>+<sp/>a<sp/>*<sp/>log(x)<sp/>-<sp/>gln)<sp/>*<sp/>g;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gold<sp/>=<sp/>g;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compute<sp/>incomplete<sp/>gamma<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1ad43d7dfa4d017658b744b534aaaa9df7" kindref="member">gammp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>0<sp/>||<sp/>a<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>chi;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>(a<sp/>+<sp/>1.0))</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>chi<sp/>=<sp/>1.0<sp/>-<sp/><ref refid="mix_8cpp_1acdc245dbcfc100529c7b529507bf420e" kindref="member">gser</ref>(a,<sp/>x);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>chi<sp/>=<sp/><ref refid="mix_8cpp_1a73ad0343c3a33cfd7ee192a914d88a76" kindref="member">gcf</ref>(a,<sp/>x);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chi;</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>(1-tailed)<sp/>significance<sp/>level<sp/>(p-value)<sp/>of<sp/>an<sp/>F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>statistic<sp/>given<sp/>the<sp/>degrees<sp/>of<sp/>freedom<sp/>for<sp/>the<sp/>numerator<sp/>(dfR-dfF)<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>degrees<sp/>of<sp/>freedom<sp/>for<sp/>the<sp/>denominator<sp/>(dfF).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1a874a8df8d170dc6b12a6b75b13586259" kindref="member">fprob</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dfnum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dfden,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>F)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>(double)dfnum;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>(double)dfden;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>baF<sp/>=<sp/>(b<sp/>+<sp/>a<sp/>*<sp/>F);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(baF)<sp/>==<sp/>0.0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-9.0;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1aa080882f1a6cd79504eeb331dfdd692f" kindref="member">betai</ref>(0.5<sp/>*<sp/>b,<sp/>0.5<sp/>*<sp/>a,<sp/>b<sp/>/<sp/>baF);</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="311"><highlight class="comment">Returns<sp/>the<sp/>area<sp/>under<sp/>the<sp/>normal<sp/>curve<sp/>&apos;to<sp/>the<sp/>left<sp/>of&apos;<sp/>the<sp/>given<sp/>z<sp/>value.</highlight></codeline>
<codeline lineno="312"><highlight class="comment">Thus,</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>z&lt;0,<sp/>zprob(z)<sp/>=<sp/>1-tail<sp/>probability</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>z&gt;0,<sp/>1.0-zprob(z)<sp/>=<sp/>1-tail<sp/>probability</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>any<sp/>z,<sp/>2.0*(1.0-zprob(abs(z)))<sp/>=<sp/>2-tail<sp/>probability</highlight></codeline>
<codeline lineno="316"><highlight class="comment">Adapted<sp/>from<sp/>z.c<sp/>in<sp/>Gary<sp/>Perlman&apos;s<sp/>|Stat.</highlight></codeline>
<codeline lineno="317"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1ad92c3aea0684aa0a823d0d6be425c7e5" kindref="member">zprob</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>w,<sp/>prob;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Z_MAX<sp/>=<sp/>6.0;<sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>#<sp/>maximum<sp/>meaningful<sp/>z-value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>==<sp/>0.0)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>0.5<sp/>*<sp/>fabs(z);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;=<sp/>(Z_MAX<sp/>*<sp/>0.5))</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>y<sp/>*<sp/>y;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>((((((((0.000124818987<sp/>*<sp/>w<sp/>-<sp/>0.001075204047)<sp/>*<sp/>w<sp/>+<sp/>0.005198775019)<sp/>*<sp/>w<sp/>-<sp/>0.019198292004)<sp/>*<sp/>w<sp/>+</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.059054035642)<sp/>*</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>-</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.151968751364)<sp/>*</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>+</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.319152932694)<sp/>*</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>-</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.531923007300)<sp/>*</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>+</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.797884560593)<sp/>*</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>*<sp/>2.0;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>y<sp/>-<sp/>2.0;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(((((((((((((-0.000045255659<sp/>*<sp/>y<sp/>+<sp/>0.000152529290)<sp/>*<sp/>y<sp/>-<sp/>0.000019538132)<sp/>*<sp/>y<sp/>-<sp/>0.000676904986)<sp/>*<sp/>y<sp/>+</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.001390604284)<sp/>*</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>-</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.000794620820)<sp/>*</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>-</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.002034254874)<sp/>*</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.006549791214)<sp/>*</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>-</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.010557625006)<sp/>*</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.011630447319)<sp/>*</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>-</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.009279453341)<sp/>*</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.005353579108)<sp/>*</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>-</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.002141268741)<sp/>*</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.000535310849)<sp/>*</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.999936657524;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>prob<sp/>=<sp/>((x<sp/>+<sp/>1.0)<sp/>*<sp/>0.5);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>prob<sp/>=<sp/>((1.0<sp/>-<sp/>x)<sp/>*<sp/>0.5);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prob;</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1a9544baf6ef13e6338ff61ef3186c9c82" kindref="member">_exp</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>BIG<sp/>=<sp/>20.0;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>-BIG)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exp(x);</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="384"><highlight class="comment">Returns<sp/>the<sp/>(1-tailed)<sp/>probability<sp/>value<sp/>associated<sp/>with<sp/>the<sp/>provided</highlight></codeline>
<codeline lineno="385"><highlight class="comment">chi-square<sp/>value<sp/>and<sp/>df.<sp/><sp/>Adapted<sp/>from<sp/>chisq.c<sp/>in<sp/>Gary<sp/>Perlman&apos;s<sp/>|Stat.</highlight></codeline>
<codeline lineno="386"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1a83000924c2febb6a5c0471797f1a2b4d" kindref="member">chicdf</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>chisq,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>df)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>BIG<sp/>=<sp/>20.0;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacegeoda_1a0f16cae6541a1593e2c61524e654b4f7" kindref="member">pi</ref><sp/>=<sp/>3.141592653589793238463;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/>c,<sp/>e,<sp/>s,<sp/>y,<sp/>z;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>even<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>df<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chisq<sp/>&lt;=<sp/>0<sp/>||<sp/>df<sp/>&lt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.0;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>0.5<sp/>*<sp/>chisq;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(df<sp/>==<sp/>(k<sp/>*<sp/>2))<sp/>even<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(df<sp/>&gt;<sp/>1)<sp/>y<sp/>=<sp/><ref refid="mix_8cpp_1a9544baf6ef13e6338ff61ef3186c9c82" kindref="member">_exp</ref>(-a);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(even)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>2.0<sp/>*<sp/><ref refid="mix_8cpp_1ad92c3aea0684aa0a823d0d6be425c7e5" kindref="member">zprob</ref>(-sqrt(chisq));</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(df<sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>chisq1<sp/>=<sp/>0.5<sp/>*<sp/>(df<sp/>-<sp/>1.0);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(even)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&gt;<sp/>BIG)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(even)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>log(sqrt(pi));</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>log(a);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(z<sp/>&lt;=<sp/>chisq)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>log(z)<sp/>+<sp/>e;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>s<sp/>+<sp/><ref refid="mix_8cpp_1a9544baf6ef13e6338ff61ef3186c9c82" kindref="member">_exp</ref>(c<sp/>*<sp/>z<sp/>-<sp/>a<sp/>-<sp/>e);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>z<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(even)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>1.0<sp/>/<sp/>sqrt(pi)<sp/>/<sp/>sqrt(a);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(z<sp/>&lt;=<sp/>chisq)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>e<sp/>*<sp/>(a<sp/>/<sp/>float(z));</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>c<sp/>+<sp/>e;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z<sp/>=<sp/>z<sp/>+<sp/>1.0;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(c<sp/>*<sp/>y<sp/>+<sp/>s);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;sz);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="mix_8cpp_1a07075c7867e1a834fa77108e04482303" kindref="member">JarqueBera</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*e,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sigma2<sp/>=<sp/><ref refid="mix_8cpp_1ad84188fef41059470dc8867321ce5b7e" kindref="member">norm</ref>(e,<sp/>n);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;=<sp/>30)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>sigma2<sp/>=<sp/>sigma2<sp/>/<sp/>(n<sp/>-<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>unbiased<sp/>estimator<sp/>of<sp/>population<sp/>sig<sp/>sq.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>sigma2<sp/>=<sp/>sigma2<sp/>/<sp/>n;<sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>mean<sp/>square<sp/>of<sp/>sample<sp/>residuals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*m2e<sp/>=<sp/><ref refid="mix_8cpp_1ade3b1704b0fbd147c730e08ab85fd2a6" kindref="member">vproduct</ref>(e,<sp/>e,<sp/>n);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>skewness<sp/>=<sp/><ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref>(m2e,<sp/>e,<sp/>n)<sp/>/<sp/>n<sp/>/<sp/>pow(sigma2,<sp/>1.5);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>skewness<sp/>*=<sp/>skewness;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>kurtosis<sp/>=<sp/><ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref>(m2e,<sp/>m2e,<sp/>n)<sp/>/<sp/>n<sp/>/<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(sigma2);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>jb<sp/>=<sp/>n<sp/>*<sp/>(skewness<sp/>/<sp/>6.0<sp/>+<sp/>(<ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(kurtosis<sp/>-<sp/>3.0)<sp/>/<sp/>24.0));</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rslt<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[3];</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>rslt[0]<sp/>=<sp/>jb;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>rslt[1]<sp/>=<sp/>2.0;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>rslt[2]<sp/>=<sp/><ref refid="mix_8cpp_1ad43d7dfa4d017658b744b534aaaa9df7" kindref="member">gammp</ref>(1.0,<sp/>jb<sp/>/<sp/>2.0);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rslt[2]<sp/>=<sp/>chicdf(jb,2.0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rslt[3]<sp/>=<sp/>skewness;</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rslt[4]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rslt[5]<sp/>=<sp/>chicdf(skewness,1);</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rslt[6]<sp/>=<sp/>kurtosis;</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rslt[7]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rslt[8]<sp/>=<sp/>chicdf(kurtosis,1);</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rslt;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>local<sp/>JB<sp/>=<sp/>(r(N)/6)*((r(skewness)^2)+[(1/4)*(r(kurtosis)-3)^2])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1a8d6c7b80b63056009958afd0f1647aea" kindref="member">SymMatInverse</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>mt);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1a8d6c7b80b63056009958afd0f1647aea" kindref="member">SymMatInverse</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**mt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="mix_8cpp_1a78037708268846837daa3b2d83b7bc53" kindref="member">BP_Test</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*resid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>obs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**X,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nvar,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InclConst)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>e(resid,<sp/>obs,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>g(obs),<sp/>sqvar(obs);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*x<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[nvar];</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ns<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assign<sp/>x<sp/>=<sp/>X<sp/>*<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>x[0].<ref refid="class_dense_vector_1a97fb7da8dea1acb844b89cf5e74e7801" kindref="member">alloc</ref>(obs);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>obs;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>x[0].<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(j,<sp/>1.0);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>nvar;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InclConst)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x[i].<ref refid="class_dense_vector_1a56c1672237e0c92df4bf4aa883bdb4f4" kindref="member">absorb</ref>(X[i],<sp/>obs);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x[i].<ref refid="class_dense_vector_1a56c1672237e0c92df4bf4aa883bdb4f4" kindref="member">absorb</ref>(X[i<sp/>-<sp/>1],<sp/>obs);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>ns<sp/>=<sp/>x[i].<ref refid="class_dense_vector_1a8e5e9af36c71cfc5507fd8fac7bb02dd" kindref="member">norm</ref>();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>obs;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x[i].<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(j,<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(x[i].getValue(j)<sp/>/<sp/>sqrt(ns)));</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**cov<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*[nvar];</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nvar;<sp/>i++)<sp/><ref refid="mix_8h_1a4707176f2cd6eb4dc734fffb6cf10feb" kindref="member">alloc</ref>(cov[i],<sp/>nvar);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>SVD<sp/>to<sp/>compute<sp/>inverse(Z&apos;Z)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>dgesvd_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>jobu<sp/>=<sp/></highlight><highlight class="charliteral">&apos;S&apos;</highlight><highlight class="normal">,<sp/>jobvt<sp/>=<sp/></highlight><highlight class="charliteral">&apos;S&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>obs,<sp/>n<sp/>=<sp/>nvar;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lda<sp/>=<sp/>obs,<sp/>ldu<sp/>=<sp/>obs,<sp/>ldvt<sp/>=<sp/>nvar,<sp/>lwork<sp/>=<sp/>5<sp/>*<sp/>obs,<sp/>info<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[obs<sp/>*<sp/>nvar];</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*s<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[nvar];</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*u<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[ldu<sp/>*<sp/>nvar];</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vt<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[ldvt<sp/>*<sp/>nvar];</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*work<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[lwork];</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>obs;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nvar;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a[i<sp/>+<sp/>obs<sp/>*<sp/>j]<sp/>=<sp/>x[j].<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(i);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>__WXMAC__<sp/>to<sp/>call<sp/>vecLib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#ifdef<sp/>WORDS_BIGENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__WXMAC__MMM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><ref refid="mix_8cpp_1a032d14e2ba792af7b5338313223b20bb" kindref="member">dgesvd_</ref>(&amp;jobu,<sp/>&amp;jobvt,<sp/>&amp;m,<sp/>&amp;n,<sp/>a,<sp/>&amp;lda,<sp/>s,<sp/>u,<sp/>&amp;ldu,<sp/>vt,<sp/>&amp;ldvt,<sp/>work,<sp/>&amp;lwork,<sp/>&amp;info);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><ref refid="mix_8cpp_1a032d14e2ba792af7b5338313223b20bb" kindref="member">dgesvd_</ref>(&amp;jobu,<sp/>&amp;jobvt,<sp/>(integer<sp/>*)&amp;m,<sp/>(integer<sp/>*)&amp;n,<sp/>(doublereal<sp/>*)a,<sp/>(integer<sp/>*)&amp;lda,<sp/>(doublereal<sp/>*)s,</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(doublereal<sp/>*)u,<sp/>(integer<sp/>*)&amp;ldu,<sp/>(doublereal<sp/>*)vt,<sp/>(integer<sp/>*)&amp;ldvt,<sp/>(doublereal<sp/>*)work,<sp/>(integer<sp/>*)&amp;lwork,</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(integer<sp/>*)&amp;info);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!info)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(z&apos;z)^(-1)<sp/>=<sp/>VW^(-2)V&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nvar;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nvar;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>nvar;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cov[i][j]<sp/>+=<sp/>(vt[i<sp/>*<sp/>nvar<sp/>+<sp/>m]<sp/>*<sp/>vt[m<sp/>+<sp/>j<sp/>*<sp/>nvar])<sp/>/<sp/>(s[m]<sp/>*<sp/>s[m]);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mse<sp/>=<sp/>e.norm()<sp/>/<sp/>obs;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>gi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>obs;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e2<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(e.getValue(j));</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>g.setAt(j,<sp/>e2<sp/>-<sp/>mse);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>sqvar.setAt(j,<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(e2<sp/>-<sp/>mse));</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mean<sp/>=<sp/>sqvar.sum()<sp/>/<sp/>obs;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>gz(nvar),<sp/>gzizz(nvar);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nvar;<sp/>i++)<sp/>gz.setAt(i,<sp/>g.product(x[i]));<sp/><sp/></highlight><highlight class="comment">//<sp/>gz<sp/>=<sp/>g&apos;z<sp/>(1<sp/>x<sp/>expl)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>gz.squareTimesColumn(gzizz,<sp/>cov);<sp/><sp/></highlight><highlight class="comment">//<sp/>gzizz<sp/>=<sp/>g&apos;z<sp/>*<sp/>inv(cov)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bp<sp/>=<sp/>gz.product(gzizz);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bp<sp/>=<sp/>g&apos;z[(z&apos;z)^-1]z&apos;g</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rslt<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[6];</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>rslt[0]<sp/>=<sp/>1.<sp/>/<sp/>(2<sp/>*<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(mse))<sp/>*<sp/>bp;<sp/><sp/></highlight><highlight class="comment">//<sp/>Breusch-Pagan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>rslt[1]<sp/>=<sp/>InclConst<sp/>?<sp/>nvar<sp/>-<sp/>1<sp/>:<sp/>nvar;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>rslt[2]<sp/>=<sp/><ref refid="mix_8cpp_1ad43d7dfa4d017658b744b534aaaa9df7" kindref="member">gammp</ref>(rslt[1]<sp/>/<sp/>2.0,<sp/>rslt[0]<sp/>/<sp/>2.0);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>rslt[3]<sp/>=<sp/>(1.0<sp/>/<sp/>mean)<sp/>*<sp/>bp;<sp/><sp/></highlight><highlight class="comment">//<sp/>Koenker-Basset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>rslt[4]<sp/>=<sp/>rslt[1];</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>rslt[5]<sp/>=<sp/><ref refid="mix_8cpp_1ad43d7dfa4d017658b744b534aaaa9df7" kindref="member">gammp</ref>(rslt[1]<sp/>/<sp/>2.0,<sp/>rslt[3]<sp/>/<sp/>2.0);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><ref refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" kindref="member">release</ref>(&amp;x);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><ref refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" kindref="member">release</ref>(&amp;cov);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rslt;</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8cpp_1a28146b5c4f4af71620f15b38ad2c75aa" kindref="member">MC_Condition_Number</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**X,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expl)<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>0,<sp/>row<sp/>=<sp/>0,<sp/>column<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*x<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[dim];</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>expl;<sp/>i++)<sp/>x[i].absorb(X[i],<sp/>dim,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>expl;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>xn<sp/>=<sp/>x[i].<ref refid="class_dense_vector_1a8e5e9af36c71cfc5507fd8fac7bb02dd" kindref="member">norm</ref>();</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>dim;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x[i].<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(j,<sp/>x[i].getValue(j)<sp/>/<sp/>sqrt(xn));</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>CLAPACK<sp/>to<sp/>compute<sp/>the<sp/>largest<sp/>and<sp/>the<sp/>smallest<sp/>eigenvalues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>dspev_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>jobz<sp/>=<sp/></highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal">,<sp/>uplo<sp/>=<sp/></highlight><highlight class="charliteral">&apos;U&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>expl;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ldz<sp/>=<sp/>expl,<sp/>lwork<sp/>=<sp/>3<sp/>*<sp/>expl,<sp/>info<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*a<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[expl<sp/>*<sp/>(expl<sp/>+<sp/>1)<sp/>/<sp/>2];</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*s<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[expl];</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*z<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*work<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[lwork];</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>expl;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>row<sp/>+<sp/>1;<sp/>column<sp/>&lt;<sp/>expl;<sp/>column++)<sp/>a[row<sp/>+<sp/>column<sp/>*<sp/>(column<sp/>+<sp/>1)<sp/>/<sp/>2]<sp/>=<sp/>x[row].<ref refid="class_dense_vector_1a73a9483af1a14b8b8a6ef8ade3e8eb0d" kindref="member">product</ref>(x[column]);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>a[row<sp/>+<sp/>row<sp/>*<sp/>(row<sp/>+<sp/>1)<sp/>/<sp/>2]<sp/>=<sp/>x[row].<ref refid="mix_8cpp_1ad84188fef41059470dc8867321ce5b7e" kindref="member">norm</ref>();</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>__WXMAC__<sp/>to<sp/>call<sp/>vecLib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#ifdef<sp/>WORDS_BIGENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__WXMAC__MMM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><ref refid="mix_8cpp_1aa4fb43aa911fe694869514f2deb12656" kindref="member">dspev_</ref>(&amp;jobz,<sp/>&amp;uplo,<sp/>&amp;n,<sp/>a,<sp/>s,<sp/>z,<sp/>&amp;ldz,<sp/>work,<sp/>&amp;info);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><ref refid="mix_8cpp_1aa4fb43aa911fe694869514f2deb12656" kindref="member">dspev_</ref>(&amp;jobz,<sp/>&amp;uplo,<sp/>(integer<sp/>*)&amp;n,<sp/>(doublereal<sp/>*)a,<sp/>(doublereal<sp/>*)s,<sp/>(doublereal<sp/>*)z,<sp/>(integer<sp/>*)&amp;ldz,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(doublereal<sp/>*)work,<sp/>(integer<sp/>*)&amp;info);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!info)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>s[expl<sp/>-<sp/>1],<sp/>min<sp/>=<sp/>s[0];</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(max<sp/>/<sp/>min);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;error<sp/>in<sp/>computing<sp/>eigenvalues&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-999;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="mix_8cpp_1a1005094e4acd0a1f2587b816f163c760" kindref="member">WhiteTest</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>obs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nvar,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*resid,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**X,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InclConstant)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*double_ptr_type;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*r2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[obs];</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>jj<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(!InclConstant)<sp/>DevFromMean(obs,resid);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(1)<sp/>r2<sp/>=<sp/>Compute<sp/>e2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r2_bar<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>obs;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>r2[i]<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(resid[i]);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>r2_bar<sp/>+=<sp/>r2[i];</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>r2_bar<sp/>/=<sp/>obs;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(2)<sp/>define<sp/>(n*n<sp/>+<sp/>3n)/2<sp/>memory<sp/>location<sp/>for<sp/>w</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>df<sp/>=<sp/>InclConstant<sp/>?<sp/>(<ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(nvar<sp/>-<sp/>1)<sp/>+<sp/>3<sp/>*<sp/>(nvar<sp/>-<sp/>1))<sp/>/<sp/>2<sp/>:<sp/>(<ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(nvar)<sp/>+<sp/>3<sp/>*<sp/>nvar)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>double_ptr_type<sp/>*w<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>double_ptr_type[df<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>df;<sp/>i++)<sp/>w[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[obs];</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(3)<sp/>keep<sp/>original<sp/>X<sp/>into<sp/>w[1<sp/>..<sp/>nvar][]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix<sp/>=<sp/>InclConstant<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>nvar<sp/>+<sp/>ix;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(jj<sp/>=<sp/>0;<sp/>jj<sp/>&lt;<sp/>obs;<sp/>jj++)<sp/>w[0][jj]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InclConstant)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>nvar;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(jj<sp/>=<sp/>0;<sp/>jj<sp/>&lt;<sp/>obs;<sp/>jj++)<sp/>w[i][jj]<sp/>=<sp/>X[i][jj];</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nvar;<sp/>i++)</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(jj<sp/>=<sp/>0;<sp/>jj<sp/>&lt;<sp/>obs;<sp/>jj++)<sp/>w[i<sp/>+<sp/>1][jj]<sp/>=<sp/>X[i][jj];</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(4)<sp/>Create<sp/>cross<sp/>product<sp/>of<sp/>Xs<sp/>and<sp/>store<sp/>them<sp/>into<sp/>w[nvar<sp/>...<sp/>df][]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1<sp/>-<sp/>ix;<sp/>i<sp/>&lt;<sp/>nvar;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i;<sp/>j<sp/>&lt;<sp/>nvar;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(jj<sp/>=<sp/>0;<sp/>jj<sp/>&lt;<sp/>obs;<sp/>jj++)<sp/>w[k][jj]<sp/>=<sp/>X[i][jj]<sp/>*<sp/>X[j][jj];</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k++;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(5)<sp/>Compute<sp/>OLS,<sp/>r2<sp/>on<sp/>w</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>yw(r2,<sp/>obs,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>olsw(k);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*xw<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[k];</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>k;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>xw[cnt].<ref refid="class_dense_vector_1a56c1672237e0c92df4bf4aa883bdb4f4" kindref="member">absorb</ref>(w[cnt],<sp/>obs,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**cov<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*[k];</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*u<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[obs];</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>k;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>cov[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[k];</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(jj<sp/>=<sp/>0;<sp/>jj<sp/>&lt;<sp/>k;<sp/>jj++)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cov[i][jj]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rsl<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[3];</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>rsl[0]<sp/>=<sp/>df;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>rsl[1]<sp/>=<sp/>-99999;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>rsl[2]<sp/>=<sp/>-99999;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_m_l__im_8cpp_1abffb96af09f2ae3ec91960165c007bfe" kindref="member">ordinaryLS</ref>(yw,<sp/>xw,<sp/>cov,<sp/>u,<sp/>olsw))<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rsl;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s_u<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>obs;<sp/>i++)<sp/>s_u<sp/>+=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(r2[i]<sp/>-<sp/>r2_bar);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>rsl[1]<sp/>=<sp/>obs<sp/>*<sp/>(1<sp/>-<sp/>(<ref refid="mix_8cpp_1ad84188fef41059470dc8867321ce5b7e" kindref="member">norm</ref>(u,<sp/>obs)<sp/>/<sp/>s_u));</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>rsl[1]=<sp/>chicdf(rsl[0],df);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>rsl[2]<sp/>=<sp/><ref refid="mix_8cpp_1ad43d7dfa4d017658b744b534aaaa9df7" kindref="member">gammp</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(df)<sp/>/<sp/>2.0,<sp/>rsl[1]<sp/>/<sp/>2.0);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rsl;</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp"/>
  </compounddef>
</doxygen>
