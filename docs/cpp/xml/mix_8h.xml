<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="mix_8h" kind="file" language="C++">
    <compoundname>mix.h</compoundname>
    <includes local="no">math.h</includes>
    <includes local="no">fstream</includes>
    <includes local="no">iostream</includes>
    <includes local="no">utility</includes>
    <includedby refid="_dense_matrix_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/DenseMatrix.cpp</includedby>
    <includedby refid="_m_l__im_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp</includedby>
    <includedby refid="_power_lag_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/PowerLag.cpp</includedby>
    <includedby refid="_power_sym_lag_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/PowerSymLag.cpp</includedby>
    <includedby refid="_sparse_matrix_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/SparseMatrix.cpp</includedby>
    <includedby refid="_sparse_row_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/SparseRow.cpp</includedby>
    <includedby refid="_sparse_vector_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/SparseVector.cpp</includedby>
    <includedby refid="_weights_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/Weights.cpp</includedby>
    <includedby refid="dense-vector_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/dense-vector.cpp</includedby>
    <includedby refid="dense-vector_8h" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/dense-vector.h</includedby>
    <includedby refid="diagnostic-report_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/diagnostic-report.cpp</includedby>
    <includedby refid="mix_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp</includedby>
    <includedby refid="smile2_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/mix.h</label>
        <link refid="mix_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>fstream</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="2">
        <label>math.h</label>
      </node>
      <node id="5">
        <label>utility</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/DenseMatrix.cpp</label>
        <link refid="_dense_matrix_8cpp"/>
      </node>
      <node id="3">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp</label>
        <link refid="_m_l__im_8cpp"/>
      </node>
      <node id="12">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.h</label>
        <link refid="_m_l__im_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/PowerLag.cpp</label>
        <link refid="_power_lag_8cpp"/>
      </node>
      <node id="5">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/PowerSymLag.cpp</label>
        <link refid="_power_sym_lag_8cpp"/>
      </node>
      <node id="6">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/SparseMatrix.cpp</label>
        <link refid="_sparse_matrix_8cpp"/>
      </node>
      <node id="14">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/SparseMatrix.h</label>
        <link refid="_sparse_matrix_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/SparseRow.cpp</label>
        <link refid="_sparse_row_8cpp"/>
      </node>
      <node id="15">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/SparseRow.h</label>
        <link refid="_sparse_row_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/SparseVector.cpp</label>
        <link refid="_sparse_vector_8cpp"/>
      </node>
      <node id="9">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/Weights.cpp</label>
        <link refid="_weights_8cpp"/>
      </node>
      <node id="10">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/dense-vector.cpp</label>
        <link refid="dense-vector_8cpp"/>
      </node>
      <node id="11">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/dense-vector.h</label>
        <link refid="dense-vector_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/diagnostic-report.cpp</label>
        <link refid="diagnostic-report_8cpp"/>
      </node>
      <node id="16">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp</label>
        <link refid="mix_8cpp"/>
      </node>
      <node id="1">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/mix.h</label>
        <link refid="mix_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/reg-utils.h</label>
        <link refid="reg-utils_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp</label>
        <link refid="smile2_8cpp"/>
      </node>
    </invincdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="mix_8h_1ad000f07d044bbdd4abbfa2cfb094f0e4" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double ML_SMALL</definition>
        <argsstring></argsstring>
        <name>ML_SMALL</name>
        <initializer>= 1.0e-14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" line="10" column="14" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double GoldenRatio</definition>
        <argsstring></argsstring>
        <name>GoldenRatio</name>
        <initializer>= (sqrt((double)5) - 1) / 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" line="11" column="14" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double GoldenToo</definition>
        <argsstring></argsstring>
        <name>GoldenToo</name>
        <initializer>= 1 - <ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" line="11" column="27" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="mix_8h_1a89311a98397f9d6967d2cb10d5152d77" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double TOLERANCE</definition>
        <argsstring></argsstring>
        <name>TOLERANCE</name>
        <initializer>= 1.0e-14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" line="12" column="14" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" bodystart="12" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="mix_8h_1a80118369461f5ece56b6a6cc754a03c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double ndf</definition>
        <argsstring>(double t)</argsstring>
        <name>ndf</name>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" line="15" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="53" bodyend="53" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" declline="15" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="mix_8h_1a750fe9d40743b3365b7bb176325a8239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double nc</definition>
        <argsstring>(double x)</argsstring>
        <name>nc</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" line="18" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="21" bodyend="35" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" declline="18" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="mix_8h_1a61102eb8cbaede8e0bd27c851d710008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void error</definition>
        <argsstring>(const char *s, const char *s2=NULL)</argsstring>
        <name>error</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" line="29" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="55" bodyend="58" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" declline="29" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void release</definition>
        <argsstring>(X **p)</argsstring>
        <name>release</name>
        <param>
          <type>X **</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" line="32" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="mix_8h_1a4707176f2cd6eb4dc734fffb6cf10feb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void alloc</definition>
        <argsstring>(X *(&amp;p), const int sz)</argsstring>
        <name>alloc</name>
        <param>
          <type>X *&amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" line="38" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="mix_8h_1af548c249fa19a6ad9d14648e91ed8f26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void alloc</definition>
        <argsstring>(X *(&amp;p), const int sz, X init)</argsstring>
        <name>alloc</name>
        <param>
          <type>X *&amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>X</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" line="44" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="mix_8h_1aa298203c6e86eac70ac4a07936ae425b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double product</definition>
        <argsstring>(const double *v1, const double *v2, const int &amp;sz)</argsstring>
        <name>product</name>
        <param>
          <type>const double *</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" line="49" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="60" bodyend="64" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" declline="49" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="mix_8h_1ad84188fef41059470dc8867321ce5b7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double norm</definition>
        <argsstring>(const double *v, const int size)</argsstring>
        <name>norm</name>
        <param>
          <type>const double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" line="51" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="75" bodyend="89" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" declline="51" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="mix_8h_1a61ccd72f7e2d2f65912807eda4c8643c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double gauss</definition>
        <argsstring>()</argsstring>
        <name>gauss</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" line="54" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="92" bodyend="110" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" declline="54" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="mix_8h_1a76245581ea69a752b8bbcb373d751278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double normW</definition>
        <argsstring>(const double *v, const double *w, const int size)</argsstring>
        <name>normW</name>
        <param>
          <type>const double *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" line="56" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="112" bodyend="126" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" declline="56" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="mix_8h_1ad43d7dfa4d017658b744b534aaaa9df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double gammp</definition>
        <argsstring>(const double a, const double x)</argsstring>
        <name>gammp</name>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" line="59" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp" bodystart="284" bodyend="295" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" declline="59" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="mix_8h_1a93be3ea178994e7864988c7c7f2a0d2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void HeapSort</definition>
        <argsstring>(T *start, const int size)</argsstring>
        <name>HeapSort</name>
        <param>
          <type><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> *</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" line="68" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" bodystart="68" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="mix_8h_1a49f1830937b34041a2717f027cc6cbf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class K</type>
          </param>
          <param>
            <type>class W</type>
          </param>
        </templateparamlist>
        <type>W</type>
        <definition>W Find</definition>
        <argsstring>(std::pair&lt; K, W &gt; *start, const int size, const K &amp;key)</argsstring>
        <name>Find</name>
        <param>
          <type>std::pair&lt; K, W &gt; *</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const K &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" line="102" column="3" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h" bodystart="102" bodyend="115"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__GEODA_CENTER_MIX_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__GEODA_CENTER_MIX_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="mix_8h_1ad000f07d044bbdd4abbfa2cfb094f0e4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8h_1ad000f07d044bbdd4abbfa2cfb094f0e4" kindref="member">ML_SMALL</ref><sp/>=<sp/>1.0e-14;</highlight></codeline>
<codeline lineno="11" refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref><sp/>=<sp/>(sqrt((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)5)<sp/>-<sp/>1)<sp/>/<sp/>2,<sp/><ref refid="mix_8h_1a5b917b3da6542d12a1e5e3bfe9960303" kindref="member">GoldenToo</ref><sp/>=<sp/>1<sp/>-<sp/><ref refid="mix_8h_1a87b9a2609791aebb3dc88e2f45967115" kindref="member">GoldenRatio</ref>;</highlight></codeline>
<codeline lineno="12" refid="mix_8h_1a89311a98397f9d6967d2cb10d5152d77" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8h_1a89311a98397f9d6967d2cb10d5152d77" kindref="member">TOLERANCE</ref><sp/>=<sp/>1.0e-14;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>standard<sp/>normal<sp/>density<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8h_1a80118369461f5ece56b6a6cc754a03c7" kindref="member">ndf</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>standard<sp/>normal<sp/>cumulative<sp/>distribution<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8h_1a750fe9d40743b3365b7bb176325a8239" kindref="member">nc</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="21"><highlight class="comment">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="22"><highlight class="comment">inline<sp/>void<sp/>swap(T<sp/>&amp;<sp/>a,<sp/>T<sp/>&amp;<sp/>b)<sp/><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/>T<sp/>c<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="26"><highlight class="comment">}</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mix_8h_1a61102eb8cbaede8e0bd27c851d710008" kindref="member">error</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s2<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;</highlight></codeline>
<codeline lineno="32" refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" kindref="member">release</ref>(X<sp/>**p)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*p))<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>(*p);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>(*p)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;</highlight></codeline>
<codeline lineno="38" refid="mix_8h_1a4707176f2cd6eb4dc734fffb6cf10feb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mix_8h_1a4707176f2cd6eb4dc734fffb6cf10feb" kindref="member">alloc</ref>(X<sp/>*(&amp;p),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>X[sz];</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>sz;<sp/>++cnt)<sp/>p[cnt]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;</highlight></codeline>
<codeline lineno="44" refid="mix_8h_1af548c249fa19a6ad9d14648e91ed8f26" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mix_8h_1a4707176f2cd6eb4dc734fffb6cf10feb" kindref="member">alloc</ref>(X<sp/>*(&amp;p),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz,<sp/>X<sp/>init)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>X[sz];</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>sz;<sp/>++cnt)<sp/>p[cnt]<sp/>=<sp/>init;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8h_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;sz);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8h_1ad84188fef41059470dc8867321ce5b7e" kindref="member">norm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compute<sp/>standard<sp/>normal<sp/>deviate<sp/>using<sp/>Box-Muller<sp/><sp/>transformation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8h_1a61ccd72f7e2d2f65912807eda4c8643c" kindref="member">gauss</ref>();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8h_1a76245581ea69a752b8bbcb373d751278" kindref="member">normW</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compute<sp/>incomplete<sp/>gamma<sp/>function<sp/>--<sp/>numerical<sp/>resipies,<sp/>p.<sp/>172-4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="mix_8h_1ad43d7dfa4d017658b744b534aaaa9df7" kindref="member">gammp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="62"><highlight class="comment">HeapSort</highlight></codeline>
<codeline lineno="63"><highlight class="comment">Sorts<sp/>vector<sp/>in<sp/>the<sp/>ascending<sp/>order,<sp/>using<sp/>HeapSort.</highlight></codeline>
<codeline lineno="64"><highlight class="comment">Assumes<sp/>operator<sp/>&lt;<sp/>is<sp/>defined<sp/>and<sp/>operator<sp/>=<sp/>is<sp/>implemented.</highlight></codeline>
<codeline lineno="65"><highlight class="comment">For<sp/>basic<sp/>idea<sp/>see<sp/>Numerical<sp/>Recipes<sp/>in<sp/>C.,<sp/>p.247.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="68" refid="mix_8h_1a93be3ea178994e7864988c7c7f2a0d2f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="mix_8h_1a93be3ea178994e7864988c7c7f2a0d2f" kindref="member">HeapSort</ref>(<ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>half<sp/>=<sp/>size<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(half<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>to<sp/>sort;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>T<sp/>*<sp/>start<sp/>=<sp/>v.first();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*hire<sp/>=<sp/>start<sp/>+<sp/>half,<sp/>*boss,<sp/>*empl;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>hire<sp/>will<sp/>be<sp/>decremented<sp/>down<sp/>to<sp/>begin<sp/>during<sp/>the<sp/>&apos;hiring&apos;<sp/>(heap<sp/>creation).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*ir<sp/>=<sp/>&amp;start[size<sp/>-<sp/>1];<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>last<sp/>element<sp/>in<sp/>the<sp/>sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>rra;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ir<sp/>&gt;<sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hire<sp/>&gt;<sp/>start)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rra<sp/>=<sp/>*(--hire);<sp/><sp/></highlight><highlight class="comment">//<sp/>still<sp/>hiring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>retirement<sp/>and<sp/>promotion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rra<sp/>=<sp/>*ir;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>space<sp/>at<sp/>end<sp/>of<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ir--<sp/>=<sp/>*start;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>retire<sp/>the<sp/>top<sp/>of<sp/>the<sp/>heap<sp/>into<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>boss<sp/>=<sp/>hire;<sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>to<sp/>sift<sp/>down<sp/>rra<sp/>to<sp/>its<sp/>proper<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>empl<sp/>=<sp/>boss<sp/>+<sp/>(boss<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(++empl<sp/>&lt;=<sp/>ir)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(empl<sp/>&lt;<sp/>ir<sp/>&amp;&amp;<sp/>*empl<sp/>&lt;<sp/>*(empl<sp/>+<sp/>1))<sp/>++empl;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rra<sp/>&lt;<sp/>*empl)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>demote<sp/>rra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*boss<sp/>=<sp/>*empl;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boss<sp/>=<sp/>empl;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>empl<sp/>=<sp/>boss<sp/>+<sp/>(boss<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>empl<sp/>=<sp/>ir;<sp/><sp/></highlight><highlight class="comment">//<sp/>rra<sp/>is<sp/>already<sp/>in<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>*boss<sp/>=<sp/>rra;<sp/><sp/></highlight><highlight class="comment">//<sp/>i<sp/>is<sp/>right<sp/>place<sp/>for<sp/>rra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uses<sp/>dictionary<sp/>(array<sp/>of<sp/>pairs<sp/>sorted<sp/>in<sp/>the<sp/>in<sp/>creasing<sp/>order<sp/>of<sp/>key)<sp/>to<sp/>find</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>for<sp/>the<sp/>matching<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>W&gt;</highlight></codeline>
<codeline lineno="102" refid="mix_8h_1a49f1830937b34041a2717f027cc6cbf8" refkind="member"><highlight class="normal">W<sp/><ref refid="mix_8h_1a49f1830937b34041a2717f027cc6cbf8" kindref="member">Find</ref>(std::pair&lt;K,<sp/>W&gt;<sp/>*start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>K<sp/>&amp;key)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mid<sp/>=<sp/>size<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lower<sp/>=<sp/>0,<sp/>upper<sp/>=<sp/>size<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start[mid].first<sp/>!=<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start[mid].first<sp/>&lt;<sp/>key)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lower<sp/>=<sp/>mid<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start[mid].first<sp/>&gt;<sp/>key)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upper<sp/>=<sp/>mid<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>start[mid].second;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>(lower<sp/>+<sp/>upper)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>start[mid].second;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/xun/github/geoda-lib/src/cpp/regression/mix.h"/>
  </compounddef>
</doxygen>
