<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="smile2_8cpp" kind="file" language="C++">
    <compoundname>smile2.cpp</compoundname>
    <includes local="no">map</includes>
    <includes local="no">boost/unordered_map.hpp</includes>
    <includes refid="diagnostic-report_8h" local="yes">regression/diagnostic-report.h</includes>
    <includes refid="_m_l__im_8h" local="yes">regression/ML_im.h</includes>
    <includes refid="lite2_8h" local="yes">regression/lite2.h</includes>
    <includes refid="mix_8h" local="yes">regression/mix.h</includes>
    <includes refid="reg-utils_8h" local="yes">regression/reg-utils.h</includes>
    <includes refid="regression_8h" local="yes">regression/regression.h</includes>
    <includes refid="gal_8h" local="yes">weights/gal.h</includes>
    <incdepgraph>
      <node id="24">
        <label>geometry/geometry.h</label>
        <link refid="geometry_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Link.h</label>
        <link refid="_link_8h"/>
      </node>
      <node id="7">
        <label>regression/ML_im.h</label>
        <link refid="_m_l__im_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>regression/SparseMatrix.h</label>
        <link refid="_sparse_matrix_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>regression/SparseRow.h</label>
        <link refid="_sparse_row_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>SparseVector.h</label>
        <link refid="_sparse_vector_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>regression/dense-vector.h</label>
        <link refid="dense-vector_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>regression/diagnostic-report.h</label>
        <link refid="diagnostic-report_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>regression/lite2.h</label>
        <link refid="lite2_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>regression/mix.h</label>
        <link refid="mix_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>regression/reg-utils.h</label>
        <link refid="reg-utils_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>regression/regression.h</label>
        <link refid="regression_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp</label>
        <link refid="smile2_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>weights/gal.h</label>
        <link refid="gal_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>weights/weights.h</label>
        <link refid="weights_2_weights_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>algorithm</label>
      </node>
      <node id="25">
        <label>boost/geometry.hpp</label>
      </node>
      <node id="3">
        <label>boost/unordered_map.hpp</label>
      </node>
      <node id="19">
        <label>fstream</label>
      </node>
      <node id="22">
        <label>functional</label>
      </node>
      <node id="20">
        <label>iostream</label>
      </node>
      <node id="26">
        <label>limits</label>
      </node>
      <node id="9">
        <label>list</label>
      </node>
      <node id="2">
        <label>map</label>
      </node>
      <node id="18">
        <label>math.h</label>
      </node>
      <node id="28">
        <label>ostream</label>
      </node>
      <node id="10">
        <label>set</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="11">
        <label>utility</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="smile2_8cpp_1a8c05e96c512e86c2fc507220e0b402b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Lag</definition>
        <argsstring>(DenseVector &amp;lag, const DenseVector &amp;x, geoda::GalElement *g)</argsstring>
        <name>Lag</name>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>lag</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref> *</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" line="13" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" bodystart="13" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="smile2_8cpp_1a667a1fc5b92f51d96065e140a55dc422" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MakeFastLookupMat</definition>
        <argsstring>(geoda::GalElement *g, int dim, std::vector&lt; std::set&lt; int &gt; &gt; &amp;g_lookup)</argsstring>
        <name>MakeFastLookupMat</name>
        <param>
          <type><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>std::vector&lt; std::set&lt; int &gt; &gt; &amp;</type>
          <declname>g_lookup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" line="19" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" bodystart="19" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double T</definition>
        <argsstring>(geoda::GalElement *g, int dim)</argsstring>
        <name>T</name>
        <param>
          <type><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" line="28" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" bodystart="28" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="smile2_8cpp_1a482eca63b6e1d6af5305c22cce9a0213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Compute_RSLmLag</definition>
        <argsstring>(geoda::GalElement *g, double **cov, DenseVector y, DenseVector *x, DenseVector ols, double *resid, int dim, int expl, double *rst, double t)</argsstring>
        <name>Compute_RSLmLag</name>
        <param>
          <type><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>cov</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref></type>
          <declname>ols</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>expl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rst</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" line="104" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" bodystart="104" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="smile2_8cpp_1ab1d1cd8619b3d07507e37163aec82e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Compute_RSLmLagRobust</definition>
        <argsstring>(geoda::GalElement *g, double **cov, DenseVector y, DenseVector *x, DenseVector ols, double *resid, int dim, int expl, double *rst, double T21)</argsstring>
        <name>Compute_RSLmLagRobust</name>
        <param>
          <type><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>cov</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref></type>
          <declname>ols</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>expl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rst</declname>
        </param>
        <param>
          <type>double</type>
          <declname>T21</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" line="143" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" bodystart="143" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="smile2_8cpp_1a312b3c672f7471e41b2024f304eeb86e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Compute_MoranI</definition>
        <argsstring>(geoda::GalElement *g, double *resid, int dim, double *rst)</argsstring>
        <name>Compute_MoranI</name>
        <param>
          <type><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" line="187" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" bodystart="187" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="smile2_8cpp_1a9848ecba5be460e99011c5734a91cec7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ReportDenseVector</definition>
        <argsstring>(const std::string ttl, DenseVector *X, int n, int k)</argsstring>
        <name>ReportDenseVector</name>
        <param>
          <type>const std::string</type>
          <declname>ttl</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" line="210" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" bodystart="210" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="smile2_8cpp_1aa32897d547b28fc5eeb64cca5ec114db" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SymMatInverse</definition>
        <argsstring>(double **mt, const int dim)</argsstring>
        <name>SymMatInverse</name>
        <param>
          <type>double **</type>
          <declname>mt</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" line="223" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1128" bodyend="1162" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" declline="223" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="smile2_8cpp_1a487ea6e37ddfbdfc3a5f9ab40ab540e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Compute_MoranZ</definition>
        <argsstring>(geoda::GalElement *g, double **D, DenseVector *X, int n, int k, const double moranI)</argsstring>
        <name>Compute_MoranZ</name>
        <param>
          <type><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>D</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>moranI</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" line="225" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" bodystart="225" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="smile2_8cpp_1a7722b98263724f80e125119d39d080f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Compute_RSLmError</definition>
        <argsstring>(geoda::GalElement *g, double *resid, int dim, double *rst, double t)</argsstring>
        <name>Compute_RSLmError</name>
        <param>
          <type><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rst</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" line="351" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" bodystart="351" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="smile2_8cpp_1ace8cba07dfd80b2ecef8cef02cebe458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Compute_RSLmErrorRobust</definition>
        <argsstring>(geoda::GalElement *g, double **cov, DenseVector y, DenseVector *x, DenseVector ols, double *resid, int dim, int expl, double *rst, double T21)</argsstring>
        <name>Compute_RSLmErrorRobust</name>
        <param>
          <type><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>cov</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref></type>
          <declname>ols</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>expl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rst</declname>
        </param>
        <param>
          <type>double</type>
          <declname>T21</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" line="371" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" bodystart="371" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="smile2_8cpp_1aa23ce605769857f29b2361767b28712c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Compute_RSLmSarma</definition>
        <argsstring>(geoda::GalElement *g, double **cov, DenseVector y, DenseVector *x, DenseVector ols, double *resid, int dim, int expl, double *rst, double T21)</argsstring>
        <name>Compute_RSLmSarma</name>
        <param>
          <type><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref> *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>cov</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref></type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref></type>
          <declname>ols</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>expl</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rst</declname>
        </param>
        <param>
          <type>double</type>
          <declname>T21</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" line="414" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" bodystart="414" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="smile2_8cpp_1a16a2871850579c50c59f9c8e175c2a6c" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double log_likelihood</definition>
        <argsstring>(double ss, int n)</argsstring>
        <name>log_likelihood</name>
        <param>
          <type>double</type>
          <declname>ss</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" line="461" column="15" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1385" bodyend="1390" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" declline="461" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="smile2_8cpp_1accaab526c2f67bc4076786b8f1477c13" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double mic</definition>
        <argsstring>(const DenseVector &amp;resid, const DenseVector &amp;residW, const double rho, const double trace, const double trace2)</argsstring>
        <name>mic</name>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>residW</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>trace</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>trace2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" line="462" column="15" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="2357" bodyend="2368" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" declline="462" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="smile2_8cpp_1a10f53eac8da8e4374949379bf09e8db1" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cg</definition>
        <argsstring>(const SparseMatrix &amp;m, const double rho, const DenseVector &amp;rhs, DenseVector &amp;sol)</argsstring>
        <name>cg</name>
        <param>
          <type>const <ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" line="464" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1357" bodyend="1383" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" declline="464" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="smile2_8cpp_1a8d7ecde547bbec9b4b6feceb8aa839b4" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void run1</definition>
        <argsstring>(SparseMatrix &amp;w, const double rr, double &amp;trace, double &amp;trace2, double &amp;frobenius, double p_bar_min_fraction, double p_bar_max_fraction)</argsstring>
        <name>run1</name>
        <param>
          <type><ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rr</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>trace</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>trace2</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>frobenius</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p_bar_min_fraction</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p_bar_max_fraction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" line="466" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1441" bodyend="1513" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" declline="466" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="smile2_8cpp_1a9d752270e5a4b9cecd998fe44df06e3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DevFromMean</definition>
        <argsstring>(int nObs, double *RawData)</argsstring>
        <name>DevFromMean</name>
        <param>
          <type>int</type>
          <declname>nObs</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>RawData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" line="471" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" bodystart="471" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="smile2_8cpp_1a6cea067ff3be811e0c2d24b21c688010" prot="public" static="no" extern="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EGLS</definition>
        <argsstring>(const double lambda, const DenseVector &amp;y, const DenseVector *X, const SparseMatrix &amp;w, DenseVector &amp;egls)</argsstring>
        <name>EGLS</name>
        <param>
          <type>const double</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>egls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" line="875" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="2331" bodyend="2355" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" declline="875" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="smile2_8cpp_1a34beccf854252b640ecf4ce44858a2b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void residual</definition>
        <argsstring>(const DenseVector &amp;rhs, const DenseVector *X, const DenseVector &amp;ols, DenseVector &amp;resid)</argsstring>
        <name>residual</name>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>ols</declname>
        </param>
        <param>
          <type><ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" line="877" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="1201" bodyend="1206" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" declline="877" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="smile2_8cpp_1af97f999fb2af653bd906e768d5e3b100" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double mie</definition>
        <argsstring>(const DenseVector &amp;rsd, const DenseVector &amp;lag_resid, const double trace, const double trace2, const DenseVector &amp;y, const DenseVector *X, const SparseMatrix &amp;w, const int vars, const double lambda)</argsstring>
        <name>mie</name>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>rsd</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>lag_resid</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>trace</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>trace2</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="class_dense_vector" kindref="compound">DenseVector</ref> *</type>
          <declname>X</declname>
        </param>
        <param>
          <type>const <ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>vars</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" line="878" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp" bodystart="2370" bodyend="2462" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp" declline="878" declcolumn="8"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/unordered_map.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="diagnostic-report_8h" kindref="compound">regression/diagnostic-report.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_m_l__im_8h" kindref="compound">regression/ML_im.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lite2_8h" kindref="compound">regression/lite2.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mix_8h" kindref="compound">regression/mix.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="reg-utils_8h" kindref="compound">regression/reg-utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="regression_8h" kindref="compound">regression/regression.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gal_8h" kindref="compound">weights/gal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a8c05e96c512e86c2fc507220e0b402b0" kindref="member">Lag</ref>(<ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;lag,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;x,<sp/><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref><sp/>*g)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>x.<ref refid="class_dense_vector_1ab8cd31005d532650e2173b1f170a9e80" kindref="member">getSize</ref>();<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>lag.<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(cnt,<sp/>g[cnt].<ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(x.<ref refid="class_dense_vector_1a990ce6cb6f30a247cdfb1a53538ccb26" kindref="member">getThis</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>cnt));</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a667a1fc5b92f51d96065e140a55dc422" kindref="member">MakeFastLookupMat</ref>(<ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/>std::vector&lt;std::set&lt;int&gt;<sp/>&gt;<sp/>&amp;g_lookup)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>g_lookup.resize(dim);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>g[cnt].<ref refid="classgeoda_1_1_gal_element_1a9e32d1e75feb41f219804cbef680c2a1" kindref="member">Size</ref>();<sp/>++cp)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g_lookup[cnt].insert(g[cnt][cp]);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref>(<ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tr(W&apos;W+WW)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>=<sp/>tr(W&apos;W)<sp/>+<sp/>tr(WW)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>=<sp/>w&apos;_ij*w_ji<sp/>+<sp/>w_ij*w_ji</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>dim;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>w_ij<sp/>*<sp/>w_ji</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sum<sp/>+=<sp/>g[i][j]<sp/>*<sp/>g[j][i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref><sp/>+=<sp/>g[i].<ref refid="classgeoda_1_1_gal_element_1abd87a174cd6b72fca44cc62bff51c166" kindref="member">GetRW</ref>(j)<sp/>*<sp/>g[j].<ref refid="classgeoda_1_1_gal_element_1abd87a174cd6b72fca44cc62bff51c166" kindref="member">GetRW</ref>(i);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>dim;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>w&apos;_ij<sp/>*<sp/>w_ji</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sum<sp/>+=<sp/>g[j][i]<sp/>*<sp/>g[j][i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref><sp/>+=<sp/>g[j].<ref refid="classgeoda_1_1_gal_element_1abd87a174cd6b72fca44cc62bff51c166" kindref="member">GetRW</ref>(i)<sp/>*<sp/>g[j].<ref refid="classgeoda_1_1_gal_element_1abd87a174cd6b72fca44cc62bff51c166" kindref="member">GetRW</ref>(i);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>dim;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>w_ij<sp/>=<sp/>g[i].GetRW(j);</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>w_ji<sp/>=<sp/>g[j].GetRW(i);</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>w_ij<sp/>*<sp/>w_ji;</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>w_ji<sp/>*<sp/>w_ji;</highlight></codeline>
<codeline lineno="59"><highlight class="comment"></highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/>//<sp/>below<sp/>is<sp/>also<sp/>incorrect<sp/>when<sp/>handling<sp/>knn<sp/>weights<sp/>matrix</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/>int<sp/>cnt<sp/>=<sp/>0,<sp/>cp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/>for<sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>g[cnt].Size();<sp/>++cp)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>geoda_sqr(1.0/g[cnt].Size());</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>g[cnt].Size();<sp/>++cp)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(g_lookup[g[cnt][cp]].find(cnt)<sp/><sp/>!=<sp/>g_lookup[g[cnt][cp]].end())<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>check<sp/>if<sp/>transpose<sp/>element<sp/>exists<sp/>(ie,<sp/>non-zero)</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(1.0/g[cnt].Size()/g[<sp/>g[cnt][cp]<sp/>].Size());</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>21.738295484789607;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>original<sp/>version<sp/>of<sp/>T<sp/>computes<sp/>the<sp/>trace<sp/>of<sp/>W&apos;W<sp/>+<sp/>WW<sp/>where<sp/>W</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>the<sp/>row-standardized<sp/>version<sp/>of<sp/>the<sp/>weights<sp/>matrix<sp/>g.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>algorithm<sp/>is<sp/>correct<sp/>of<sp/>g<sp/>is<sp/>symmetric,<sp/>but<sp/>incorrect<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>computation<sp/>for<sp/>trace<sp/>WW<sp/>was<sp/>the<sp/>problem,<sp/>and<sp/>is<sp/>corrected<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>new<sp/>version<sp/>of<sp/>T<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>double<sp/>T(const<sp/>geoda::GalElement<sp/>*g,<sp/>int<sp/>dim)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>sum<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>int<sp/>cnt<sp/>=<sp/>0,<sp/>cp<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for<sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>g[cnt].Size();<sp/>++cp)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>geoda_sqr(1.0/g[cnt].Size())<sp/>+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1.0/g[cnt].Size()/g[<sp/>g[cnt].elt(cp)<sp/>].Size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>sum;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Performs<sp/>spatial<sp/>LAG<sp/>test<sp/>specification:<sp/>computes<sp/>RS<sp/>statistic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a482eca63b6e1d6af5305c22cce9a0213" kindref="member">Compute_RSLmLag</ref>(<ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**cov,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>y,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*x,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>ols,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*resid,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expl,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rst,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)<sp/><sp/></highlight><highlight class="comment">//<sp/>t<sp/>=<sp/>T(g,<sp/>dim,<sp/>g_lookup)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Y<sp/>=<sp/>y.<ref refid="class_dense_vector_1a990ce6cb6f30a247cdfb1a53538ccb26" kindref="member">getThis</ref>();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ee<sp/>=<sp/><ref refid="mix_8cpp_1ad84188fef41059470dc8867321ce5b7e" kindref="member">norm</ref>(resid,<sp/>dim);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sigma2<sp/>=<sp/>ee<sp/>/<sp/>(dim);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>lag(dim),<sp/>re(resid,<sp/>dim);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>lag.<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(cnt,<sp/>g[cnt].<ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(Y,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>cnt));<sp/><sp/></highlight><highlight class="comment">//<sp/>Wy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RS<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(re.product(lag)<sp/>/<sp/>sigma2);<sp/><sp/></highlight><highlight class="comment">//<sp/>[e&apos;Wy/sigma2]^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><ref refid="namespacegeoda_1a4bb896c1edfb733407f3bc834ef9b3dc" kindref="member">ols</ref>.timesMatrix(re,<sp/>x);<sp/><sp/></highlight><highlight class="comment">//<sp/>re<sp/>=<sp/>Xb<sp/>~<sp/>y_hat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a8c05e96c512e86c2fc507220e0b402b0" kindref="member">Lag</ref>(lag,<sp/>re,<sp/>g);<sp/><sp/></highlight><highlight class="comment">//<sp/>lag<sp/>=<sp/>WXb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>z(expl),<sp/>z2(expl);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>expl;<sp/>++cnt)<sp/>z.setAt(cnt,<sp/>x[cnt].product(lag));<sp/><sp/></highlight><highlight class="comment">//<sp/>z<sp/>=<sp/>X&apos;WXb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>z.squareTimesColumn(z2,<sp/>cov);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>z2<sp/>=<sp/>(X&apos;X)^(-1)X&apos;WXb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xMx<sp/>=<sp/>z.product(z2);<sp/><sp/></highlight><highlight class="comment">//<sp/>(WXb)&apos;X(X&apos;X)^(-1)X&apos;WXb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lag.norm<sp/>:<sp/>(WXb)&apos;(WXb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>(lag.<ref refid="class_dense_vector_1a8e5e9af36c71cfc5507fd8fac7bb02dd" kindref="member">norm</ref>()<sp/>-<sp/>xMx<sp/>+<sp/>t<sp/>*<sp/>sigma2)<sp/>/<sp/>sigma2;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>RS<sp/>/=<sp/>v;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RS_stat<sp/>=<sp/><ref refid="mix_8cpp_1ad43d7dfa4d017658b744b534aaaa9df7" kindref="member">gammp</ref>(0.5,<sp/>RS<sp/>*<sp/>0.5);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>rst[0]<sp/>=<sp/>RS;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>rst[1]<sp/>=<sp/>RS_stat;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Performs<sp/>Lag<sp/>Robus<sp/>test<sp/>specification:<sp/>computes<sp/>RS<sp/>statistic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1ab1d1cd8619b3d07507e37163aec82e11" kindref="member">Compute_RSLmLagRobust</ref>(<ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**cov,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>y,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*x,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>ols,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*resid,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expl,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rst,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T21)<sp/><sp/></highlight><highlight class="comment">//<sp/>T21<sp/>=<sp/>T(g,<sp/>dim,<sp/>g_lookup)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Y<sp/>=<sp/>y.<ref refid="class_dense_vector_1a990ce6cb6f30a247cdfb1a53538ccb26" kindref="member">getThis</ref>();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ee<sp/>=<sp/><ref refid="mix_8cpp_1ad84188fef41059470dc8867321ce5b7e" kindref="member">norm</ref>(resid,<sp/>dim);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sigma2<sp/>=<sp/>ee<sp/>/<sp/>(dim);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>Wy(dim),<sp/>We(dim),<sp/>e(resid,<sp/>dim);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>Wy.setAt(cnt,<sp/>g[cnt].<ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(Y,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>cnt));<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>We.setAt(cnt,<sp/>g[cnt].<ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(resid,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>cnt));<sp/><sp/></highlight><highlight class="comment">//<sp/>We</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RS1<sp/>=<sp/>e.product(Wy)<sp/>/<sp/>sigma2;<sp/><sp/></highlight><highlight class="comment">//<sp/>e&apos;Wy/sigma2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RS2<sp/>=<sp/>e.product(We)<sp/>/<sp/>sigma2;<sp/><sp/></highlight><highlight class="comment">//<sp/>e&apos;We/sigma2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RS<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(RS1<sp/>-<sp/>RS2);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><ref refid="namespacegeoda_1a4bb896c1edfb733407f3bc834ef9b3dc" kindref="member">ols</ref>.timesMatrix(e,<sp/>x);<sp/><sp/></highlight><highlight class="comment">//<sp/>e<sp/>=<sp/>Xb<sp/>~<sp/>y_hat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a8c05e96c512e86c2fc507220e0b402b0" kindref="member">Lag</ref>(Wy,<sp/>e,<sp/>g);<sp/><sp/></highlight><highlight class="comment">//<sp/>Wy<sp/>=<sp/>WXb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>z(expl),<sp/>z2(expl);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>expl;<sp/>++cnt)<sp/>z.setAt(cnt,<sp/>x[cnt].product(Wy));<sp/><sp/></highlight><highlight class="comment">//<sp/>z<sp/>=<sp/>X&apos;WXb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>z.squareTimesColumn(z2,<sp/>cov);<sp/><sp/></highlight><highlight class="comment">//<sp/>z2<sp/>=<sp/>(X&apos;X)^(-1)X&apos;WXb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>T11<sp/>=<sp/>(WXb)&apos;[I<sp/>-<sp/>X(X&apos;X)^(-1)X&apos;](WXb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(WXb)&apos;(WXb)<sp/>-<sp/>(WXb)&apos;(X(X&apos;X)^(-1)X&apos;)(WXb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wy.norm<sp/>:<sp/>(WXb)&apos;(WXb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>z.product(z2)<sp/>:<sp/>(WXb)&apos;(X(X&apos;X)^(-1)X&apos;)(WXb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T11<sp/>=<sp/>Wy.norm()<sp/>-<sp/>z.product(z2);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T1<sp/>=<sp/>T11<sp/>/<sp/>sigma2;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T2<sp/>=<sp/>1.0<sp/>/<sp/>(T1<sp/>+<sp/>T21);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>RS<sp/>/=<sp/>(1.0<sp/>/<sp/>T2<sp/>-<sp/>T21);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RS_stat<sp/>=<sp/><ref refid="mix_8cpp_1ad43d7dfa4d017658b744b534aaaa9df7" kindref="member">gammp</ref>(0.5,<sp/>RS<sp/>*<sp/>0.5);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>rst[0]<sp/>=<sp/>RS;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>rst[1]<sp/>=<sp/>RS_stat;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a312b3c672f7471e41b2024f304eeb86e" kindref="member">Compute_MoranI</ref>(<ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*resid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rst)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ee<sp/>=<sp/><ref refid="mix_8cpp_1ad84188fef41059470dc8867321ce5b7e" kindref="member">norm</ref>(resid,<sp/>dim);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sigma2<sp/>=<sp/>ee<sp/>/<sp/>(dim);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>re(resid,<sp/>dim,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>lag(re.getSize());</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SparseMatrix<sp/>orig(g,<sp/>dim);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>orig.rowStandardize();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>orig.matrixColumn(lag,<sp/>re);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>MoranI<sp/>=<sp/>re.product(<sp/>lag<sp/>)<sp/>/<sp/>ee;<sp/>//<sp/>[e&apos;We]<sp/>/<sp/>[ee]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>lag.<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(cnt,<sp/>g[cnt].<ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(resid,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>cnt));<sp/><sp/></highlight><highlight class="comment">//<sp/>We</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>re.setAt(cnt,<sp/>resid[cnt]);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MoranI<sp/>=<sp/>re.product(lag)<sp/>/<sp/>ee;<sp/><sp/></highlight><highlight class="comment">//<sp/>[e&apos;We]<sp/>/<sp/>[ee]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>M_stat<sp/>=<sp/><ref refid="mix_8cpp_1ad43d7dfa4d017658b744b534aaaa9df7" kindref="member">gammp</ref>(0.5,<sp/>fabs(MoranI)<sp/>*<sp/>0.5);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>rst[0]<sp/>=<sp/>MoranI;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>rst[1]<sp/>=<sp/>M_stat;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a9848ecba5be460e99011c5734a91cec7" kindref="member">ReportDenseVector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>ttl,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*X,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[222];</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>std::string<sp/>msg<sp/>=<sp/>ttl<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>k;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buf,<sp/></highlight><highlight class="stringliteral">&quot;(%f)&quot;</highlight><highlight class="normal">,<sp/>X[j].getValue(i));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/>std::string(buf);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(buf,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/>std::string(buf);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1aa32897d547b28fc5eeb64cca5ec114db" kindref="member">SymMatInverse</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**mt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a487ea6e37ddfbdfc3a5f9ab40ab540e2" kindref="member">Compute_MoranZ</ref>(<ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref><sp/>*g,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**D,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inverse([X&apos;X]),<sp/>size<sp/>k<sp/>by<sp/>k</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*X,<sp/><sp/></highlight><highlight class="comment">//<sp/>size<sp/>n<sp/>by<sp/>k,<sp/>including<sp/>constant<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>moranI)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref><sp/>W(g,<sp/>n);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>W.rowStandardize();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*weightedX<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[k];</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*weightedTX<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[k];</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*temp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[k];</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*matrixA<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[k];</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*matrixB1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[k];</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*matrixB2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[k];</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*matrixB3<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[k];</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>k;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>weightedTX[i].<ref refid="class_dense_vector_1a97fb7da8dea1acb844b89cf5e74e7801" kindref="member">alloc</ref>(n);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>W.WtTimesColumn(weightedTX[i],<sp/>X[i]);<sp/><sp/></highlight><highlight class="comment">//<sp/>WtX<sp/>=<sp/>W&apos;X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>weightedX[i].<ref refid="class_dense_vector_1a97fb7da8dea1acb844b89cf5e74e7801" kindref="member">alloc</ref>(n);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>W.matrixColumn(weightedX[i],<sp/>X[i]);<sp/><sp/></highlight><highlight class="comment">//<sp/>=<sp/>WX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>temp[i].<ref refid="class_dense_vector_1a97fb7da8dea1acb844b89cf5e74e7801" kindref="member">alloc</ref>(n);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>matrixA[i].<ref refid="class_dense_vector_1a97fb7da8dea1acb844b89cf5e74e7801" kindref="member">alloc</ref>(k);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>matrixB1[i].<ref refid="class_dense_vector_1a97fb7da8dea1acb844b89cf5e74e7801" kindref="member">alloc</ref>(k);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>matrixB2[i].<ref refid="class_dense_vector_1a97fb7da8dea1acb844b89cf5e74e7801" kindref="member">alloc</ref>(k);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>matrixB3[i].<ref refid="class_dense_vector_1a97fb7da8dea1acb844b89cf5e74e7801" kindref="member">alloc</ref>(k);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>sparse,<sp/>fast<sp/>lookup<sp/>version<sp/>of<sp/>W<sp/>using<sp/>hash<sp/>tables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>following<sp/>map<sp/>can<sp/>be<sp/>either<sp/>std::map<sp/>or<sp/>boost::unordered_map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unordered<sp/>map<sp/>is<sp/>a<sp/>hash<sp/>table<sp/>but<sp/>has<sp/>slower<sp/>iterator<sp/>access,<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>map<sp/>is<sp/>a<sp/>tree<sp/>but<sp/>has<sp/>a<sp/>fast<sp/>iterator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>std::vector&lt;boost::unordered_map&lt;int,<sp/>double&gt;<sp/>&gt;<sp/>W_map(n);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>W</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>std::vector&lt;boost::unordered_map&lt;int,<sp/>double&gt;<sp/>&gt;<sp/>Wt_map(n);<sp/><sp/></highlight><highlight class="comment">//<sp/>W&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>std::vector&lt;std::map&lt;int,<sp/>bool&gt;<sp/>&gt;<sp/>B(n);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>union<sp/>of<sp/>pattern<sp/>of<sp/>non-zeros<sp/>in<sp/>W<sp/>and<sp/>W&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_link" kindref="compound">Link</ref><sp/>*r<sp/>=<sp/>W.getRow(i).getNb();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb<sp/>=<sp/>0,<sp/>nb_sz<sp/>=<sp/>W.getRow(i).getSize();<sp/>nb<sp/>&lt;<sp/>nb_sz;<sp/>nb++)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>r[nb].<ref refid="class_link_1a4906d954e9177dcdf1b427ce82dc5625" kindref="member">getIx</ref>();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Wij<sp/>=<sp/>r[nb].<ref refid="class_link_1a42c7a68b36c8f5391673b0e4c16191fc" kindref="member">getWeight</ref>();</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>W_map[i][j]<sp/>=<sp/>Wij;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Wt_map[j][i]<sp/>=<sp/>Wij;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>B[i][j]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>B[j][i]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::unordered_map&lt;int,<sp/>double&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map&lt;int,<sp/>bool&gt;::iterator<sp/>B_it<sp/>=<sp/>B[i].begin();<sp/>B_it<sp/>!=<sp/>B[i].end();<sp/>++B_it)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>B_it-&gt;first;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>W_map[i].find(j);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Wij<sp/>=<sp/>(it<sp/>!=<sp/>W_map[i].end())<sp/>?<sp/>Wij<sp/>=<sp/>it-&gt;second<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>W_map[j].find(i);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Wji<sp/>=<sp/>(it<sp/>!=<sp/>W_map[j].end())<sp/>?<sp/>Wji<sp/>=<sp/>it-&gt;second<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(Wij<sp/>+<sp/>Wji);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>s<sp/>*=<sp/>0.5;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>=<sp/>(X&apos;X)^-1X&apos;WX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>k;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0;<sp/>l<sp/>&lt;<sp/>k;<sp/>l++)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>+=<sp/>D[i][l]<sp/>*<sp/>X[l].<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(j);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>temp[i].<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(j,<sp/>c);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>k;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0;<sp/>l<sp/>&lt;<sp/>n;<sp/>l++)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>+=<sp/>temp[i].<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(l)<sp/>*<sp/>weightedX[j].<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(l);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrixA[i].<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(j,<sp/>c);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tr<sp/>geoda_sqr(A)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trAA<sp/>=<sp/>0.0,<sp/>trA<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>k;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>trA<sp/>+=<sp/>matrixA[j].<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(j);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0;<sp/>l<sp/>&lt;<sp/>k;<sp/>l++)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trAA<sp/>+=<sp/>matrixA[j].<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(l)<sp/>*<sp/>matrixA[l].<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(j);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>computation<sp/>of<sp/>B<sp/>more<sp/>efficiently</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matrixB1,<sp/>matrixB2,<sp/>matrixB3<sp/>=<sp/>X&apos;WWX,<sp/>X&apos;WW&apos;X,<sp/>X&apos;W&apos;WX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>k;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>k;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b0<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b1<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b2<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>0;<sp/>l<sp/>&lt;<sp/>n;<sp/>l++)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b0<sp/>+=<sp/>weightedTX[i].<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(l)<sp/>*<sp/>weightedX[j].<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(l);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b1<sp/>+=<sp/>weightedTX[i].<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(l)<sp/>*<sp/>weightedTX[j].<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(l);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b2<sp/>+=<sp/>weightedX[i].<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(l)<sp/>*<sp/>weightedX[j].<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(l);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrixB1[i].<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(j,<sp/>b0);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrixB2[i].<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(j,<sp/>b1);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrixB3[i].<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(j,<sp/>b2);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trB1<sp/>=<sp/>0.0,<sp/>trB2<sp/>=<sp/>0.0,<sp/>trB3<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>k;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>k;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trB1<sp/>+=<sp/>(D[i][j]<sp/>*<sp/>matrixB1[j].<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(i));</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trB2<sp/>+=<sp/>(D[i][j]<sp/>*<sp/>matrixB2[j].<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(i));</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trB3<sp/>+=<sp/>(D[i][j]<sp/>*<sp/>matrixB3[j].<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(i));</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>trB1<sp/>will<sp/>be<sp/>used<sp/>twice</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trB<sp/>=<sp/>2<sp/>*<sp/>trB1<sp/>+<sp/>trB2<sp/>+<sp/>trB3;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>varI<sp/>=<sp/>(n<sp/>-<sp/>k)<sp/>*<sp/>(n<sp/>-<sp/>k<sp/>+<sp/>2.0)<sp/>/<sp/>(s<sp/>+<sp/>(2.0<sp/>*<sp/>trAA)<sp/>-<sp/>trB<sp/>-<sp/>(2.0<sp/>*<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(trA)<sp/>/<sp/>(n<sp/>-<sp/>k)));</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mI<sp/>=<sp/>trA<sp/>/<sp/>(n<sp/>-<sp/>k);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zvalue<sp/>=<sp/>(moranI<sp/>+<sp/>mI)<sp/>*<sp/>sqrt(varI);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>zvalue;</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Performs<sp/>spatial<sp/>error<sp/>test<sp/>specification:<sp/>computes<sp/>RS<sp/>statistic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>t<sp/>=<sp/><sp/>tr[(W&apos;+W)*W]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a7722b98263724f80e125119d39d080f1" kindref="member">Compute_RSLmError</ref>(<ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*resid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rst,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ee<sp/>=<sp/><ref refid="mix_8cpp_1ad84188fef41059470dc8867321ce5b7e" kindref="member">norm</ref>(resid,<sp/>dim);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sigma2<sp/>=<sp/>ee<sp/>/<sp/>(dim);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>lag(dim),<sp/>re(dim);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>lag.<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(cnt,<sp/>g[cnt].<ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(resid,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>cnt));<sp/><sp/></highlight><highlight class="comment">//<sp/>We</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>re.setAt(cnt,<sp/>resid[cnt]);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RS<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(re.product(lag)<sp/>/<sp/>sigma2);<sp/><sp/></highlight><highlight class="comment">//<sp/>[e&apos;We/sigma2]^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>RS<sp/>/=<sp/>t;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RS_stat<sp/>=<sp/><ref refid="mix_8cpp_1ad43d7dfa4d017658b744b534aaaa9df7" kindref="member">gammp</ref>(0.5,<sp/>RS<sp/>*<sp/>0.5);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>rst[0]<sp/>=<sp/>RS;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>rst[1]<sp/>=<sp/>RS_stat;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1ace8cba07dfd80b2ecef8cef02cebe458" kindref="member">Compute_RSLmErrorRobust</ref>(<ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**cov,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>y,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*x,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>ols,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*resid,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expl,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rst,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T21)<sp/><sp/></highlight><highlight class="comment">//<sp/>T21<sp/>=<sp/>T(g,<sp/>dim,<sp/>g_lookup)<sp/>tr[(W&apos;+W)*W]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Y<sp/>=<sp/>y.<ref refid="class_dense_vector_1a990ce6cb6f30a247cdfb1a53538ccb26" kindref="member">getThis</ref>();</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ee<sp/>=<sp/><ref refid="mix_8cpp_1ad84188fef41059470dc8867321ce5b7e" kindref="member">norm</ref>(resid,<sp/>dim);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sigma2<sp/>=<sp/>ee<sp/>/<sp/>(dim);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>Wy(dim),<sp/>We(dim),<sp/>e(resid,<sp/>dim);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>Wy.setAt(cnt,<sp/>g[cnt].<ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(Y,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>cnt));<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>We.setAt(cnt,<sp/>g[cnt].<ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(resid,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>cnt));<sp/><sp/></highlight><highlight class="comment">//<sp/>We</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RS1<sp/>=<sp/>e.product(Wy)<sp/>/<sp/>sigma2;<sp/><sp/></highlight><highlight class="comment">//<sp/>e&apos;Wy/sigma2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RS2<sp/>=<sp/>e.product(We)<sp/>/<sp/>sigma2;<sp/><sp/></highlight><highlight class="comment">//<sp/>e&apos;We/sigma2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><ref refid="namespacegeoda_1a4bb896c1edfb733407f3bc834ef9b3dc" kindref="member">ols</ref>.timesMatrix(e,<sp/>x);<sp/><sp/></highlight><highlight class="comment">//<sp/>e<sp/>=<sp/>Xb<sp/>~<sp/>y_hat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a8c05e96c512e86c2fc507220e0b402b0" kindref="member">Lag</ref>(Wy,<sp/>e,<sp/>g);<sp/><sp/></highlight><highlight class="comment">//<sp/>Wy<sp/>=<sp/>WXb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>z(expl),<sp/>z2(expl);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>expl;<sp/>++cnt)<sp/>z.setAt(cnt,<sp/>x[cnt].product(Wy));<sp/><sp/></highlight><highlight class="comment">//<sp/>z<sp/>=<sp/>X&apos;WXb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>z.squareTimesColumn(z2,<sp/>cov);<sp/><sp/></highlight><highlight class="comment">//<sp/>z2<sp/>=<sp/>(X&apos;X)^(-1)X&apos;WXb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>T11<sp/>=<sp/>(WXb)&apos;[I<sp/>-<sp/>X(X&apos;X)^(-1)X&apos;](WXb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(WXb)&apos;(WXb)<sp/>-<sp/>(WXb)&apos;(X(X&apos;X)^(-1)X&apos;)(WXb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wy.norm<sp/>:<sp/>(WXb)&apos;(WXb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>z.product(z2)<sp/>:<sp/>(WXb)&apos;(X(X&apos;X)^(-1)X&apos;)(WXb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T11<sp/>=<sp/>Wy.norm()<sp/>-<sp/>z.product(z2);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T1<sp/>=<sp/>T11<sp/>/<sp/>sigma2;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T2<sp/>=<sp/>1.0<sp/>/<sp/>(T1<sp/>+<sp/>T21);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RS<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(RS2<sp/>-<sp/>(RS1<sp/>*<sp/>T2<sp/>*<sp/>T21))<sp/>/<sp/>(T21<sp/>-<sp/>(T21<sp/>*<sp/>T21<sp/>*<sp/>T2));</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RS_stat<sp/>=<sp/><ref refid="mix_8cpp_1ad43d7dfa4d017658b744b534aaaa9df7" kindref="member">gammp</ref>(0.5,<sp/>RS<sp/>*<sp/>0.5);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>rst[0]<sp/>=<sp/>RS;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>rst[1]<sp/>=<sp/>RS_stat;</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1aa23ce605769857f29b2361767b28712c" kindref="member">Compute_RSLmSarma</ref>(<ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**cov,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>y,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*x,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>ols,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*resid,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expl,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rst,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T21)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Y<sp/>=<sp/>y.<ref refid="class_dense_vector_1a990ce6cb6f30a247cdfb1a53538ccb26" kindref="member">getThis</ref>();</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ee<sp/>=<sp/><ref refid="mix_8cpp_1ad84188fef41059470dc8867321ce5b7e" kindref="member">norm</ref>(resid,<sp/>dim);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sigma2<sp/>=<sp/>ee<sp/>/<sp/>(dim);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>Wy(dim),<sp/>We(dim),<sp/>e(resid,<sp/>dim);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>Wy.setAt(cnt,<sp/>g[cnt].<ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(Y,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>cnt));<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>We.setAt(cnt,<sp/>g[cnt].<ref refid="_m_l__im_8cpp_1af390dec85bc4a923009201735aeff2e3" kindref="member">SpatialLag</ref>(resid,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>cnt));<sp/><sp/></highlight><highlight class="comment">//<sp/>We</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RS1<sp/>=<sp/>e.product(Wy)<sp/>/<sp/>sigma2;<sp/><sp/></highlight><highlight class="comment">//<sp/>e&apos;Wy/sigma2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RS2<sp/>=<sp/>e.product(We)<sp/>/<sp/>sigma2;<sp/><sp/></highlight><highlight class="comment">//<sp/>e&apos;We/sigma2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><ref refid="namespacegeoda_1a4bb896c1edfb733407f3bc834ef9b3dc" kindref="member">ols</ref>.timesMatrix(e,<sp/>x);<sp/><sp/></highlight><highlight class="comment">//<sp/>e<sp/>=<sp/>Xb<sp/>~<sp/>y_hat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a8c05e96c512e86c2fc507220e0b402b0" kindref="member">Lag</ref>(Wy,<sp/>e,<sp/>g);<sp/><sp/></highlight><highlight class="comment">//<sp/>Wy<sp/>=<sp/>WXb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>z(expl),<sp/>z2(expl);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>expl;<sp/>++cnt)<sp/>z.setAt(cnt,<sp/>x[cnt].product(Wy));<sp/><sp/></highlight><highlight class="comment">//<sp/>z<sp/>=<sp/>X&apos;WXb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>z.squareTimesColumn(z2,<sp/>cov);<sp/><sp/></highlight><highlight class="comment">//<sp/>z2<sp/>=<sp/>(X&apos;X)^(-1)X&apos;WXb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>T11<sp/>=<sp/>(WXb)&apos;[I<sp/>-<sp/>X(X&apos;X)^(-1)X&apos;](WXb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(WXb)&apos;(WXb)<sp/>-<sp/>(WXb)&apos;(X(X&apos;X)^(-1)X&apos;)(WXb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wy.norm<sp/>:<sp/>(WXb)&apos;(WXb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>z.product(z2)<sp/>:<sp/>(WXb)&apos;(X(X&apos;X)^(-1)X&apos;)(WXb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T11<sp/>=<sp/>Wy.norm()<sp/>-<sp/>z.product(z2);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T1<sp/>=<sp/>T11<sp/>/<sp/>sigma2;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T2<sp/>=<sp/>1.0<sp/>/<sp/>(T1<sp/>+<sp/>T21);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RS<sp/>=<sp/>(<ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(RS1<sp/>-<sp/>RS2)<sp/>/<sp/>(1.0<sp/>/<sp/>T2<sp/>-<sp/>T21))<sp/>+<sp/>(RS2<sp/>*<sp/>RS2<sp/>/<sp/>T21);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RS_stat<sp/>=<sp/><ref refid="mix_8cpp_1ad43d7dfa4d017658b744b534aaaa9df7" kindref="member">gammp</ref>(1.0,<sp/>RS<sp/>*<sp/>0.5);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>rst[0]<sp/>=<sp/>RS;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>rst[1]<sp/>=<sp/>RS_stat;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/>OLS<sp/>computes<sp/>Ordinary<sp/>Least<sp/>Squares<sp/>estimates<sp/>and<sp/>places<sp/>output<sp/>in<sp/>result</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/>Performs<sp/>spatial<sp/>error<sp/>test<sp/>specification:<sp/>computes<sp/>RS<sp/>statistic</highlight></codeline>
<codeline lineno="459"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a16a2871850579c50c59f9c8e175c2a6c" kindref="member">log_likelihood</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ss,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1accaab526c2f67bc4076786b8f1477c13" kindref="member">mic</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;resid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;residW,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trace,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trace2);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a10f53eac8da8e4374949379bf09e8db1" kindref="member">cg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref><sp/>&amp;m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;rhs,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;sol);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a8d7ecde547bbec9b4b6feceb8aa839b4" kindref="member">run1</ref>(<ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref><sp/>&amp;w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;trace,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;trace2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;frobenius,</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p_bar_min_fraction,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p_bar_max_fraction);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1aa32897d547b28fc5eeb64cca5ec114db" kindref="member">SymMatInverse</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**mt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a9d752270e5a4b9cecd998fe44df06e3f" kindref="member">DevFromMean</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nObs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*RawData)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sumX<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>nObs;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>sumX<sp/>+=<sp/>RawData[cnt];</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>meanX<sp/>=<sp/>sumX<sp/>/<sp/>nObs;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>nObs;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>RawData[cnt]<sp/>-=<sp/>meanX;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="comment">//<sp/>yuntien:<sp/>August<sp/>2005</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Regression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacegeoda_1a046ab13ed91fac538448c1b58fbe55a5" kindref="member">geoda::classicalRegression</ref>(<ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_obs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**X,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expl,<sp/><ref refid="class_diagnostic_report" kindref="compound">DiagnosticReport</ref><sp/>*dr,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InclConstant,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_moranz,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>do_white_test)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>df<sp/>=<sp/>(dim<sp/>-<sp/>expl);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>y(Y,<sp/>dim,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/><ref refid="namespacegeoda_1a4bb896c1edfb733407f3bc834ef9b3dc" kindref="member">ols</ref>(expl);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*x<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[expl<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>j<sp/>=<sp/>0,<sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>expl;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>x[cnt].<ref refid="class_dense_vector_1a56c1672237e0c92df4bf4aa883bdb4f4" kindref="member">absorb</ref>(X[cnt],<sp/>dim,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**cov<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*[expl],<sp/>**ocov<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*[expl];</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>expl;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mix_8h_1a4707176f2cd6eb4dc734fffb6cf10feb" kindref="member">alloc</ref>(cov[i],<sp/>expl);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mix_8h_1a4707176f2cd6eb4dc734fffb6cf10feb" kindref="member">alloc</ref>(ocov[i],<sp/>expl);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*resid<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[dim];</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>OLS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_m_l__im_8cpp_1abffb96af09f2ae3ec91960165c007bfe" kindref="member">ordinaryLS</ref>(y,<sp/>x,<sp/>cov,<sp/>resid,<sp/>ols))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>store<sp/>the<sp/>coefficients<sp/>into<sp/>the<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ee<sp/>=<sp/><ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref>(resid,<sp/>resid,<sp/>dim);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sigma2<sp/>=<sp/>ee<sp/>/<sp/>df;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**D<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*[expl];</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>expl;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a0a7986c12f1f731f394dd74553a47b61" kindref="member">SetCoeff</ref>(cnt,<sp/><ref refid="namespacegeoda_1a4bb896c1edfb733407f3bc834ef9b3dc" kindref="member">ols</ref>.getValue(cnt));</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a1a9dd8f1d05abbdaed21c00087720566" kindref="member">SetStdError</ref>(cnt,<sp/>sqrt(cov[cnt][cnt]<sp/>*<sp/>sigma2));</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zval<sp/>=<sp/>dr-&gt;<ref refid="class_diagnostic_report_1a9d3c9a481c7739a2d2e9a56712263f9a" kindref="member">GetCoefficient</ref>(cnt)<sp/>/<sp/>dr-&gt;<ref refid="class_diagnostic_report_1a2694dcbea746374732bce5098547360f" kindref="member">GetStdError</ref>(cnt);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1aa1f9b9a166b2bd6b075c4a3cfb6c7561" kindref="member">SetZValue</ref>(cnt,<sp/>zval);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tcdf<sp/>=<sp/>df<sp/>/<sp/>(df<sp/>+<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(dr-&gt;<ref refid="class_diagnostic_report_1a11d1f36abd60048fb9acccb574b8ef57" kindref="member">GetZValue</ref>(cnt)));</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a3735aed39c3a86388423ae1f94ea7993" kindref="member">SetProbVal</ref>(cnt,<sp/><ref refid="mix_8cpp_1aa080882f1a6cd79504eeb331dfdd692f" kindref="member">betai</ref>(df<sp/>/<sp/>2.0,<sp/>0.5,<sp/>tcdf));</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>D[cnt]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[expl];</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>expl;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>D[cnt][j]<sp/>=<sp/>cov[cnt][j]<sp/>*<sp/>sigma2;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a2be0efaf2573f42c12f58ef292f665f4" kindref="member">SetCovar</ref>(cnt,<sp/>j,<sp/>D[cnt][j]);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>y_hat(dim);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>expl;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>y_hat.addTimes(x[i],<sp/><ref refid="namespacegeoda_1a4bb896c1edfb733407f3bc834ef9b3dc" kindref="member">ols</ref>.getValue(i));</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>residuals<sp/>and<sp/>y_hat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a64bbd57b53172b4a9070394342d96fc9" kindref="member">SetResidual</ref>(i,<sp/>resid[i]);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a614e6e1264c986e41828494e5bae8185" kindref="member">SetYHat</ref>(i,<sp/>y_hat.getValue(i));</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>diagnostics<sp/>for<sp/>spatial<sp/>dependence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rst<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[2];</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t<sp/>=<sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref>(g,<sp/>dim);<sp/><sp/></highlight><highlight class="comment">//<sp/>tr[(W&apos;+W)*W]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="smile2_8cpp_1a7722b98263724f80e125119d39d080f1" kindref="member">Compute_RSLmError</ref>(g,<sp/>resid,<sp/>dim,<sp/>rst,<sp/>t);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a274034434f61f30cb3d9f18181104198" kindref="member">SetLmError</ref>(0,<sp/>1.0);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a274034434f61f30cb3d9f18181104198" kindref="member">SetLmError</ref>(1,<sp/>rst[0]);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a274034434f61f30cb3d9f18181104198" kindref="member">SetLmError</ref>(2,<sp/>rst[1]);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="smile2_8cpp_1ace8cba07dfd80b2ecef8cef02cebe458" kindref="member">Compute_RSLmErrorRobust</ref>(g,<sp/>cov,<sp/>y,<sp/>x,<sp/>ols,<sp/>resid,<sp/>dim,<sp/>expl,<sp/>rst,<sp/>t);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a96b56a7ca2ed12065b7e630855545122" kindref="member">SetLmErrRobust</ref>(0,<sp/>1.0);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a96b56a7ca2ed12065b7e630855545122" kindref="member">SetLmErrRobust</ref>(1,<sp/>rst[0]);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a96b56a7ca2ed12065b7e630855545122" kindref="member">SetLmErrRobust</ref>(2,<sp/>rst[1]);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="smile2_8cpp_1a482eca63b6e1d6af5305c22cce9a0213" kindref="member">Compute_RSLmLag</ref>(g,<sp/>cov,<sp/>y,<sp/>x,<sp/>ols,<sp/>resid,<sp/>dim,<sp/>expl,<sp/>rst,<sp/>t);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a4511af8a00d96e5a399ac5f5ae8bccf1" kindref="member">SetLmLag</ref>(0,<sp/>1.0);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a4511af8a00d96e5a399ac5f5ae8bccf1" kindref="member">SetLmLag</ref>(1,<sp/>rst[0]);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a4511af8a00d96e5a399ac5f5ae8bccf1" kindref="member">SetLmLag</ref>(2,<sp/>rst[1]);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="smile2_8cpp_1ab1d1cd8619b3d07507e37163aec82e11" kindref="member">Compute_RSLmLagRobust</ref>(g,<sp/>cov,<sp/>y,<sp/>x,<sp/>ols,<sp/>resid,<sp/>dim,<sp/>expl,<sp/>rst,<sp/>t);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a46cb20da3ba5556afc11cbe5f6419fc0" kindref="member">SetLmLagRobust</ref>(0,<sp/>1.0);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a46cb20da3ba5556afc11cbe5f6419fc0" kindref="member">SetLmLagRobust</ref>(1,<sp/>rst[0]);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a46cb20da3ba5556afc11cbe5f6419fc0" kindref="member">SetLmLagRobust</ref>(2,<sp/>rst[1]);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="smile2_8cpp_1aa23ce605769857f29b2361767b28712c" kindref="member">Compute_RSLmSarma</ref>(g,<sp/>cov,<sp/>y,<sp/>x,<sp/>ols,<sp/>resid,<sp/>dim,<sp/>expl,<sp/>rst,<sp/>t);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a1f34a435ba6bac3f83c1de4878d9b3f3" kindref="member">SetLmSarma</ref>(0,<sp/>2.0);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a1f34a435ba6bac3f83c1de4878d9b3f3" kindref="member">SetLmSarma</ref>(1,<sp/>rst[0]);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a1f34a435ba6bac3f83c1de4878d9b3f3" kindref="member">SetLmSarma</ref>(2,<sp/>rst[1]);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="smile2_8cpp_1a312b3c672f7471e41b2024f304eeb86e" kindref="member">Compute_MoranI</ref>(g,<sp/>resid,<sp/>dim,<sp/>rst);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1ab47cccb1ae4e8b57ec74980c96d98a06" kindref="member">SetMoranI</ref>(0,<sp/>rst[0]);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_moranz)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MoranZ<sp/>=<sp/><ref refid="smile2_8cpp_1a487ea6e37ddfbdfc3a5f9ab40ab540e2" kindref="member">Compute_MoranZ</ref>(g,<sp/>cov,<sp/>x,<sp/>dim,<sp/>expl,<sp/>rst[0]);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1ab47cccb1ae4e8b57ec74980c96d98a06" kindref="member">SetMoranI</ref>(1,<sp/>MoranZ);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1ab47cccb1ae4e8b57ec74980c96d98a06" kindref="member">SetMoranI</ref>(2,<sp/>2.0<sp/>*<sp/>(1.0<sp/>-<sp/><ref refid="mix_8cpp_1a750fe9d40743b3365b7bb176325a8239" kindref="member">nc</ref>(fabs(MoranZ))));</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><ref refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" kindref="member">release</ref>(&amp;D);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sigma2ml<sp/>=<sp/>ee<sp/>/<sp/>dim;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a35eb396db55403504598ea3784337553" kindref="member">SetSigSq</ref>(sigma2);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a9b5f116b11faedf3f2c16efdcb602e3f" kindref="member">SetSigSqLm</ref>(sigma2ml);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>expl;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ybar<sp/>=<sp/>y.<ref refid="class_dense_vector_1a1514f30675ed794898c718970d0950a5" kindref="member">sum</ref>()<sp/>/<sp/>n;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>R2;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!InclConstant)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e_bar<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>cnt++)<sp/>e_bar<sp/>+=<sp/>resid[cnt];</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>e_bar<sp/>/=<sp/>dim;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="smile2_8cpp_1a9d752270e5a4b9cecd998fe44df06e3f" kindref="member">DevFromMean</ref>(dim,<sp/>resid);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e2<sp/>=<sp/><ref refid="mix_8cpp_1ad84188fef41059470dc8867321ce5b7e" kindref="member">norm</ref>(resid,<sp/>dim);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>n;<sp/>cnt++)<sp/>sum_y<sp/>+=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(y.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt)<sp/>-<sp/>e_bar);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>R2<sp/>=<sp/>1.0<sp/>-<sp/>(e2<sp/>/<sp/>(sum_y));</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>n;<sp/>cnt++)<sp/>sum_y<sp/>+=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(y.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt)<sp/>-<sp/>ybar);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>R2<sp/>=<sp/>1.0<sp/>-<sp/>(ee<sp/>/<sp/>sum_y);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(R2)<sp/>&gt;<sp/>1.0<sp/>||<sp/>R2<sp/>&lt;<sp/>0)<sp/>R2<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a33f736b69c2606c580c1abe142635f70" kindref="member">SetR2Fit</ref>(R2);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a2f2fdcaf83cc411d9e6573fd6da87c80" kindref="member">SetR2Adjust</ref>(1.0<sp/>-<sp/>((n<sp/>-<sp/>1)<sp/>*<sp/>((1.0<sp/>-<sp/>R2)<sp/>/<sp/>(n<sp/>-<sp/>k))));</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lik<sp/>=<sp/>-1.0<sp/>*<sp/>((n<sp/>/<sp/>2.0)<sp/>*<sp/>(log(2.0<sp/>*<sp/>M_PI))<sp/>+<sp/>(n<sp/>/<sp/>2.0)<sp/>*<sp/>log((ee<sp/>/<sp/>n))<sp/>+<sp/>(ee<sp/>/<sp/>(2.0<sp/>*<sp/>(ee<sp/>/<sp/>n))));</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1ad65c171f683f2009ab21db50c3702758" kindref="member">SetLIK</ref>(lik);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a49967000d2df7381f881c9546bef433f" kindref="member">SetAIC</ref>(-2.0<sp/>*<sp/>lik<sp/>+<sp/>2.0<sp/>*<sp/>k);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>Akaike<sp/>AIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1acce9c2f0131d5b6908698440a3eec6c6" kindref="member">SetSC</ref>(-2.0<sp/>*<sp/>lik<sp/>+<sp/>k<sp/>*<sp/>log((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)n));<sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>Schwartz<sp/>SC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f_value;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>f_value<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(dr-&gt;<ref refid="class_diagnostic_report_1a11d1f36abd60048fb9acccb574b8ef57" kindref="member">GetZValue</ref>(0));<sp/><sp/></highlight><highlight class="comment">//<sp/>F<sp/>test<sp/>when<sp/>k=1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>f_value<sp/>=<sp/>(R2<sp/>/<sp/>(k<sp/>-<sp/>1.))<sp/>/<sp/>((1.<sp/>-<sp/>R2)<sp/>/<sp/>(n<sp/>-<sp/>k));<sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>F-test<sp/>when<sp/>k&gt;1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a5a5f9ac0c5d486af0dc3440df6885b00" kindref="member">SetFTest</ref>(f_value);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a878ea9d1f0c61e949c3c9acc022edfbc" kindref="member">SetFTestProb</ref>(<ref refid="mix_8cpp_1a874a8df8d170dc6b12a6b75b13586259" kindref="member">fprob</ref>(k<sp/>-<sp/>1,<sp/>n<sp/>-<sp/>k,<sp/>f_value));<sp/><sp/></highlight><highlight class="comment">//<sp/>Prob<sp/>of<sp/>F-test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1ae70f0d62e8e6c8bae55ae18e65ab9e18" kindref="member">SetRSS</ref>(ee);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a2250888f639c610f2a2c7b57b64b46be" kindref="member">SetCondNumber</ref>(<ref refid="mix_8cpp_1a28146b5c4f4af71620f15b38ad2c75aa" kindref="member">MC_Condition_Number</ref>(X,<sp/>n,<sp/>k));</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*jb<sp/>=<sp/><ref refid="mix_8cpp_1a07075c7867e1a834fa77108e04482303" kindref="member">JarqueBera</ref>(resid,<sp/>dim,<sp/>expl);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a66f2212e596429c1fd83cd297141f9bd" kindref="member">SetJBTest</ref>(0,<sp/>2.0);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a66f2212e596429c1fd83cd297141f9bd" kindref="member">SetJBTest</ref>(1,<sp/>jb[0]);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a66f2212e596429c1fd83cd297141f9bd" kindref="member">SetJBTest</ref>(2,<sp/>jb[2]);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>int<sp/>wdf=<sp/>InclConstant<sp/>?<sp/>(geoda_sqr(k-1)+3*(k-1))/2<sp/>:<sp/>(geoda_sqr(k)+3*k)/2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>release(&amp;resid);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>resid<sp/>=<sp/>dr-&gt;<ref refid="class_diagnostic_report_1ad737d4d4f2c0adc56a05c8c79f6285f2" kindref="member">GetResidual</ref>();</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(do_white_test)<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*white<sp/>=<sp/><ref refid="mix_8cpp_1a1005094e4acd0a1f2587b816f163c760" kindref="member">WhiteTest</ref>(dim,<sp/>expl,<sp/>resid,<sp/>X,<sp/>InclConstant);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a8c4186cbc36bd76761685239fb7a4537" kindref="member">SetWhiteTest</ref>(0,<sp/>white[0]);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a8c4186cbc36bd76761685239fb7a4537" kindref="member">SetWhiteTest</ref>(1,<sp/>white[1]);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a8c4186cbc36bd76761685239fb7a4537" kindref="member">SetWhiteTest</ref>(2,<sp/>white[2]);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>resid<sp/>=<sp/>dr-&gt;GetResidual();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*bp<sp/>=<sp/><ref refid="mix_8cpp_1a78037708268846837daa3b2d83b7bc53" kindref="member">BP_Test</ref>(resid,<sp/>dim,<sp/>X,<sp/>expl,<sp/>InclConstant);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bp<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1aee246f95d4baa77f9e59e62173aa3c31" kindref="member">SetBPTest</ref>(0,<sp/>expl);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1aee246f95d4baa77f9e59e62173aa3c31" kindref="member">SetBPTest</ref>(1,<sp/>-1.0);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1aee246f95d4baa77f9e59e62173aa3c31" kindref="member">SetBPTest</ref>(2,<sp/>-1.0);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a0f72246d8ec4a7ddf029ba1b0d3d894e" kindref="member">SetKBTest</ref>(0,<sp/>expl);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a0f72246d8ec4a7ddf029ba1b0d3d894e" kindref="member">SetKBTest</ref>(1,<sp/>-1.0);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a0f72246d8ec4a7ddf029ba1b0d3d894e" kindref="member">SetKBTest</ref>(2,<sp/>-1.0);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1aee246f95d4baa77f9e59e62173aa3c31" kindref="member">SetBPTest</ref>(0,<sp/>bp[1]);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1aee246f95d4baa77f9e59e62173aa3c31" kindref="member">SetBPTest</ref>(1,<sp/>bp[0]);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1aee246f95d4baa77f9e59e62173aa3c31" kindref="member">SetBPTest</ref>(2,<sp/>bp[2]);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a0f72246d8ec4a7ddf029ba1b0d3d894e" kindref="member">SetKBTest</ref>(0,<sp/>bp[4]);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a0f72246d8ec4a7ddf029ba1b0d3d894e" kindref="member">SetKBTest</ref>(1,<sp/>bp[3]);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a0f72246d8ec4a7ddf029ba1b0d3d894e" kindref="member">SetKBTest</ref>(2,<sp/>bp[5]);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><ref refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" kindref="member">release</ref>(&amp;cov);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><ref refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" kindref="member">release</ref>(&amp;x);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacegeoda_1adfb8a07e712725c0d9a11bb5650123d5" kindref="member">geoda::spatialLagRegression</ref>(<ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_obs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**X,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deps,<sp/><ref refid="class_diagnostic_report" kindref="compound">DiagnosticReport</ref><sp/>*dr,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InclConstant)<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*double_ptr_type;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>y(Y,<sp/>dim,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>*x<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[deps];</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0,<sp/>row<sp/>=<sp/>0,<sp/>column<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>deps;<sp/>++cnt)<sp/>x[cnt].absorb(X[cnt],<sp/>dim,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>LogLike<sp/>=<sp/>0,<sp/>initRho<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>initRho<sp/>=<sp/><ref refid="_m_l__im_8cpp_1ad963ff06d974576297ba8f5940e7275b" kindref="member">SimulationLag</ref>(g,<sp/>num_obs,<sp/>41,<sp/>0.31,<sp/>Y,<sp/>X,<sp/>deps,<sp/>!InclConstant,<sp/>&amp;LogLike,<sp/>0,<sp/>0.1);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref><sp/>orig(g,<sp/>dim);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**cov<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*[deps];</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*resid<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[n];</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*residW<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[n];</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>deps;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>cov[row]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[deps];</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>0;<sp/>column<sp/>&lt;<sp/>deps;<sp/>column++)<sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cov[row][column]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>lag(y.<ref refid="class_dense_vector_1ab8cd31005d532650e2173b1f170a9e80" kindref="member">getSize</ref>()),<sp/><ref refid="namespacegeoda_1a4bb896c1edfb733407f3bc834ef9b3dc" kindref="member">ols</ref>(deps),<sp/>ols_lag(deps),<sp/>beta(deps);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>xbeta2(n);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>orig.rowStandardize();</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>orig.matrixColumn(lag,<sp/>y);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>orig.makeStdSymmetric();</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1abffb96af09f2ae3ec91960165c007bfe" kindref="member">ordinaryLS</ref>(y,<sp/>x,<sp/>cov,<sp/>resid,<sp/>ols);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>likOLS<sp/>=<sp/><ref refid="smile2_8cpp_1a16a2871850579c50c59f9c8e175c2a6c" kindref="member">log_likelihood</ref>(<ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref>(resid,<sp/>resid,<sp/>n),<sp/>n);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1abffb96af09f2ae3ec91960165c007bfe" kindref="member">ordinaryLS</ref>(lag,<sp/>x,<sp/>cov,<sp/>residW,<sp/>ols_lag);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>r(resid,<sp/>n),<sp/>rw(residW,<sp/>n);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trace,<sp/>trace2,<sp/>fr;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a8d7ecde547bbec9b4b6feceb8aa839b4" kindref="member">run1</ref>(orig,<sp/>initRho,<sp/>trace,<sp/>trace2,<sp/>fr,<sp/>0.1,<sp/>0.55);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>correction<sp/>for<sp/>rho:<sp/><sp/>m</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>final<sp/>rho:<sp/>finRho</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m<sp/>=<sp/><ref refid="smile2_8cpp_1accaab526c2f67bc4076786b8f1477c13" kindref="member">mic</ref>(r,<sp/>rw,<sp/>initRho,<sp/>trace,<sp/>trace2);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>finRho<sp/>=<sp/>initRho<sp/>-<sp/>m;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a8d7ecde547bbec9b4b6feceb8aa839b4" kindref="member">run1</ref>(orig,<sp/>finRho,<sp/>trace,<sp/>trace2,<sp/>fr,<sp/>0.55,<sp/>1);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>approximate<sp/>computational<sp/>error:<sp/>m</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/><ref refid="smile2_8cpp_1accaab526c2f67bc4076786b8f1477c13" kindref="member">mic</ref>(r,<sp/>rw,<sp/>finRho,<sp/>trace,<sp/>trace2);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>beta.minusTimes(ols,<sp/>ols_lag,<sp/>finRho);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>xbeta(n),<sp/>rfin(n);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vr<sp/>=<sp/>0;<sp/>vr<sp/>&lt;<sp/>deps;<sp/>++vr)<sp/>xbeta.addTimes(x[vr],<sp/>beta.getValue(vr));</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>rfin.copy(r);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>rfin.addTimes(rw,<sp/>-finRho);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sigma2<sp/>=<sp/>rfin.norm()<sp/>/<sp/>n;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>autoregressive<sp/>variable<sp/>is<sp/>the<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>double_ptr_type<sp/>*info_matrix<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>double_ptr_type[deps<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>deps<sp/>+<sp/>2;<sp/>++cnt)<sp/>info_matrix[cnt]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[deps<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ed2L/dbdb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>deps;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>cnt<sp/>+<sp/>1;<sp/>rc<sp/>&lt;<sp/>deps;<sp/>++rc)</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>info_matrix[cnt][rc]<sp/>=<sp/>info_matrix[rc][cnt]<sp/>=<sp/>x[cnt].<ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref>(x[rc])<sp/>/<sp/>sigma2;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>info_matrix[cnt][cnt]<sp/>=<sp/>x[cnt].<ref refid="class_dense_vector_1a8e5e9af36c71cfc5507fd8fac7bb02dd" kindref="member">norm</ref>()<sp/>/<sp/>sigma2;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ed2L/dbdr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>rhs(n),<sp/>sol(n),<sp/>works(n);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>n;<sp/>++cnt)<sp/>rhs.setAt(cnt,<sp/>xbeta.getValue(cnt)<sp/>*<sp/>orig.getScale()[cnt]);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>orig.matrixColumn(xbeta2,xbeta);<sp/>?<sp/>Xb<sp/>/<sp/>[I-rW]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a10f53eac8da8e4374949379bf09e8db1" kindref="member">cg</ref>(orig,<sp/>finRho,<sp/>rhs,<sp/>sol);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>orig.matrixColumn(works,<sp/>sol);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>scale<sp/>sol<sp/>back<sp/>to<sp/>make<sp/>it<sp/>equal<sp/>to<sp/>(I-rW)^(-1)Xbeta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>sol.setAt(cnt,<sp/>sol.getValue(cnt)<sp/>/<sp/>orig.getScale()[cnt]);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>residuals<sp/>&amp;<sp/>predicted<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a64bbd57b53172b4a9070394342d96fc9" kindref="member">SetResidual</ref>(cnt,<sp/>rfin.getValue(cnt));</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a614e6e1264c986e41828494e5bae8185" kindref="member">SetYHat</ref>(cnt,<sp/>sol.getValue(cnt));</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1addc664dac8461571af43e92fb5754cc9" kindref="member">SetPredErr</ref>(cnt,<sp/>Y[cnt]<sp/>-<sp/>sol.getValue(cnt));</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>n;<sp/>++cnt)<sp/>works.setAt(cnt,<sp/>works.getValue(cnt)<sp/>/<sp/>orig.getScale()[cnt]);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>deps;<sp/>++cnt)<sp/>info_matrix[cnt][deps]<sp/>=<sp/>info_matrix[deps][cnt]<sp/>=<sp/>x[cnt].<ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref>(works)<sp/>/<sp/>sigma2;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ed2L/dr2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ss<sp/>=<sp/>works.norm()<sp/>/<sp/>sigma2;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>info_matrix[deps][deps]<sp/>=<sp/>trace2<sp/>+<sp/>fr<sp/>+<sp/>ss;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>info_matrix[deps<sp/>+<sp/>1][deps<sp/>+<sp/>1]<sp/>=<sp/>0.5<sp/>*<sp/>n<sp/>/<sp/>sigma2<sp/>/<sp/>sigma2;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>deps;<sp/>++cnt)<sp/>info_matrix[deps<sp/>+<sp/>1][cnt]<sp/>=<sp/>info_matrix[cnt][deps<sp/>+<sp/>1]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>info_matrix[deps<sp/>+<sp/>1][deps]<sp/>=<sp/>info_matrix[deps][deps<sp/>+<sp/>1]<sp/>=<sp/>trace<sp/>/<sp/>sigma2;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="smile2_8cpp_1aa32897d547b28fc5eeb64cca5ec114db" kindref="member">SymMatInverse</ref>(info_matrix,<sp/>deps<sp/>+<sp/>2))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>df<sp/>=<sp/>(n<sp/>-<sp/>(deps<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Lag<sp/>Coefficient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ste<sp/>=<sp/>sqrt(info_matrix[deps][deps]);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a0a7986c12f1f731f394dd74553a47b61" kindref="member">SetCoeff</ref>(0,<sp/>finRho);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a1a9dd8f1d05abbdaed21c00087720566" kindref="member">SetStdError</ref>(0,<sp/>ste);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1aa1f9b9a166b2bd6b075c4a3cfb6c7561" kindref="member">SetZValue</ref>(0,<sp/>finRho<sp/>/<sp/>ste);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a3735aed39c3a86388423ae1f94ea7993" kindref="member">SetProbVal</ref>(0,<sp/>2.0<sp/>*<sp/>(1.0<sp/>-<sp/><ref refid="mix_8cpp_1a750fe9d40743b3365b7bb176325a8239" kindref="member">nc</ref>(fabs(finRho<sp/>/<sp/>ste))));</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>1;<sp/>cnt<sp/>&lt;=<sp/>deps;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>std<sp/>=<sp/>sqrt(info_matrix[cnt<sp/>-<sp/>1][cnt<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coe<sp/>=<sp/>beta.getValue(cnt<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sta<sp/>=<sp/>coe<sp/>/<sp/>std;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a0a7986c12f1f731f394dd74553a47b61" kindref="member">SetCoeff</ref>(cnt,<sp/>coe);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a1a9dd8f1d05abbdaed21c00087720566" kindref="member">SetStdError</ref>(cnt,<sp/>std);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1aa1f9b9a166b2bd6b075c4a3cfb6c7561" kindref="member">SetZValue</ref>(cnt,<sp/>sta);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a3735aed39c3a86388423ae1f94ea7993" kindref="member">SetProbVal</ref>(cnt,<sp/>2.0<sp/>*<sp/>(1.0<sp/>-<sp/><ref refid="mix_8cpp_1a750fe9d40743b3365b7bb176325a8239" kindref="member">nc</ref>(fabs(sta))));</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>deps<sp/>+<sp/>1;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>cnt;<sp/>j<sp/>&lt;<sp/>deps<sp/>+<sp/>1;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a2be0efaf2573f42c12f58ef292f665f4" kindref="member">SetCovar</ref>(cnt,<sp/>j,<sp/>info_matrix[cnt][j]);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a2be0efaf2573f42c12f58ef292f665f4" kindref="member">SetCovar</ref>(j,<sp/>cnt,<sp/>info_matrix[j][cnt]);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fitting<sp/>Information</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/><sp/><sp/>(for<sp/>each<sp/>variable<sp/>there<sp/>will<sp/>be<sp/>COEFF,<sp/>SDEV,<sp/>t-Stat,<sp/>Prob)</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/><sp/><sp/>+5<sp/>:<sp/>R2,<sp/>Sq.Corr,<sp/>LIK,<sp/>AIC,<sp/>SC</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/><sp/><sp/>+2<sp/>:<sp/>SIG-SQ,<sp/>SIG-SQ<sp/>std-error</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>deps<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ybar<sp/>=<sp/>y.<ref refid="class_dense_vector_1a1514f30675ed794898c718970d0950a5" kindref="member">sum</ref>()<sp/>/<sp/>n;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_y2<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>R2;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ee<sp/>=<sp/>sigma2<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!InclConstant)<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e_bar<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>n;<sp/>cnt++)<sp/>e_bar<sp/>+=<sp/>rfin.getValue(cnt);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>e_bar<sp/>/=<sp/>n;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>n;<sp/>cnt++)<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e2<sp/>+=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(rfin.getValue(cnt)<sp/>-<sp/>e_bar);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum_y2<sp/>+=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(y.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt));</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>R2<sp/>=<sp/>1.0<sp/>-<sp/>(e2<sp/>/<sp/>sum_y2);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>sum_y2<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>n;<sp/>cnt++)<sp/>sum_y2<sp/>+=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(y.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt)<sp/>-<sp/>ybar);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>R2<sp/>=<sp/>1.0<sp/>-<sp/>(ee<sp/>/<sp/>sum_y2);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(R2)<sp/>&gt;<sp/>1.0<sp/>||<sp/>R2<sp/>&lt;<sp/>0)<sp/>R2<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a33f736b69c2606c580c1abe142635f70" kindref="member">SetR2Fit</ref>(R2);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a2f2fdcaf83cc411d9e6573fd6da87c80" kindref="member">SetR2Adjust</ref>(1.0<sp/>-<sp/>((n<sp/>-<sp/>1)<sp/>*<sp/>((1.0<sp/>-<sp/>R2)<sp/>/<sp/>(n<sp/>-<sp/>k))));</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lik<sp/>=<sp/>LogLike;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>double<sp/>const<sp/>lik<sp/>=<sp/>-1.0*((n/2.0)*(log(2.0*M_PI))+(n/2.0)*log((ee/n))+(ee/(2.0*(ee/n))));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>aic<sp/>=<sp/>-2.0<sp/>*<sp/>lik<sp/>+<sp/>2.0<sp/>*<sp/>k;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>Akaike<sp/>AIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sc<sp/>=<sp/>-2.0<sp/>*<sp/>lik<sp/>+<sp/>k<sp/>*<sp/>log((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)n);<sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>Schwartz<sp/>SC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1ad65c171f683f2009ab21db50c3702758" kindref="member">SetLIK</ref>(lik);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a49967000d2df7381f881c9546bef433f" kindref="member">SetAIC</ref>(aic);<sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>Akaike<sp/>AIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1acce9c2f0131d5b6908698440a3eec6c6" kindref="member">SetSC</ref>(sc);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>Schwartz<sp/>SC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a35eb396db55403504598ea3784337553" kindref="member">SetSigSq</ref>(sigma2);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>LRtest<sp/>=<sp/>2.0<sp/>*<sp/>(lik<sp/>-<sp/>likOLS);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a6e3c1b0fbf95eec8a2ee7c2c739f3468" kindref="member">SetLR_Test</ref>(0,<sp/>1.0);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a6e3c1b0fbf95eec8a2ee7c2c739f3468" kindref="member">SetLR_Test</ref>(1,<sp/>LRtest);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1a6e3c1b0fbf95eec8a2ee7c2c739f3468" kindref="member">SetLR_Test</ref>(2,<sp/><ref refid="mix_8cpp_1ad43d7dfa4d017658b744b534aaaa9df7" kindref="member">gammp</ref>(0.5,<sp/>LRtest<sp/>*<sp/>0.5));</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>resid<sp/>=<sp/>rfin.getThis();</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*bp<sp/>=<sp/><ref refid="mix_8cpp_1a78037708268846837daa3b2d83b7bc53" kindref="member">BP_Test</ref>(resid,<sp/>n,<sp/>X,<sp/>k<sp/>-<sp/>1,<sp/>InclConstant);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bp<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1aee246f95d4baa77f9e59e62173aa3c31" kindref="member">SetBPTest</ref>(0,<sp/>k<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1aee246f95d4baa77f9e59e62173aa3c31" kindref="member">SetBPTest</ref>(1,<sp/>0.0);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1aee246f95d4baa77f9e59e62173aa3c31" kindref="member">SetBPTest</ref>(2,<sp/>-1.0);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1aee246f95d4baa77f9e59e62173aa3c31" kindref="member">SetBPTest</ref>(0,<sp/>bp[1]);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1aee246f95d4baa77f9e59e62173aa3c31" kindref="member">SetBPTest</ref>(1,<sp/>bp[0]);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>dr-&gt;<ref refid="class_diagnostic_report_1aee246f95d4baa77f9e59e62173aa3c31" kindref="member">SetBPTest</ref>(2,<sp/>bp[2]);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/><sp/><sp/>double<sp/>w<sp/>=<sp/>(n-1.0)*geoda_sqr(finRho)<sp/>/<sp/>(1.0-geoda_sqr(finRho));</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/><sp/><sp/>dr-&gt;SetWaldTest(0,k-1);</highlight></codeline>
<codeline lineno="868"><highlight class="comment"><sp/><sp/><sp/>dr-&gt;SetWaldTest(1,<sp/>w);</highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/><sp/><sp/>dr-&gt;SetWaldTest(2,gammp((k-1)/2.0,w/2.0));</highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a6cea067ff3be811e0c2d24b21c688010" kindref="member">EGLS</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref><sp/>&amp;w,</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;egls);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a34beccf854252b640ecf4ce44858a2b3" kindref="member">residual</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;rhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;ols,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;resid);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1af97f999fb2af653bd906e768d5e3b100" kindref="member">mie</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;rsd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;lag_resid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trace,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trace2,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*X,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref><sp/>&amp;w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vars,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacegeoda_1ae49e5bd07a139851237271c9b85ba6ba" kindref="member">geoda::spatialErrorRegression</ref>(<ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref><sp/>*g,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_obs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**XX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deps,<sp/><ref refid="class_diagnostic_report" kindref="compound">DiagnosticReport</ref><sp/>*rr,</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>InclConstant)<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*double_ptr_type;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>y(Y,<sp/>dim,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>*X<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[deps];</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0,<sp/>row<sp/>=<sp/>0,<sp/>column<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>deps;<sp/>++cnt)<sp/>X[cnt].absorb(XX[cnt],<sp/>dim,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*beta;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>LogLike<sp/>=<sp/>0,<sp/>initLambda<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>initLambda<sp/>=<sp/><ref refid="_m_l__im_8cpp_1a90f6c29107697753d666114cd5c734b5" kindref="member">SimulationError</ref>(g,<sp/>num_obs,<sp/>100,<sp/>0.31,<sp/>Y,<sp/>XX,<sp/>deps,<sp/>beta,<sp/>!InclConstant,<sp/>&amp;LogLike,<sp/>0.0,<sp/>0.1);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><ref refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" kindref="member">release</ref>(&amp;beta);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**cov<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*[deps],<sp/>*e_ols<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[n];</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(row<sp/>=<sp/>0;<sp/>row<sp/>&lt;<sp/>deps;<sp/>row++)<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>cov[row]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[deps];</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(column<sp/>=<sp/>0;<sp/>column<sp/>&lt;<sp/>deps;<sp/>column++)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cov[row][column]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/><ref refid="namespacegeoda_1a4bb896c1edfb733407f3bc834ef9b3dc" kindref="member">ols</ref>(deps);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><ref refid="_m_l__im_8cpp_1abffb96af09f2ae3ec91960165c007bfe" kindref="member">ordinaryLS</ref>(y,<sp/>X,<sp/>cov,<sp/>e_ols,<sp/>ols);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>likOLS<sp/>=<sp/><ref refid="smile2_8cpp_1a16a2871850579c50c59f9c8e175c2a6c" kindref="member">log_likelihood</ref>(<ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref>(e_ols,<sp/>e_ols,<sp/>n),<sp/>n);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>be<sp/>appropriate<sp/>to<sp/>check<sp/>if<sp/>spatial<sp/>weights<sp/>is<sp/>symmetric</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>we<sp/>have<sp/>indepenedent<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>similarity<sp/>transfortmation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><ref refid="class_sparse_matrix" kindref="compound">SparseMatrix</ref><sp/>orig(g,<sp/>dim);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>orig.rowStandardize();</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trace,<sp/>trace2,<sp/>fr;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>egls(deps),<sp/>resid(dim),<sp/>rsd(dim),<sp/>lag_resid(dim);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a6cea067ff3be811e0c2d24b21c688010" kindref="member">EGLS</ref>(initLambda,<sp/>y,<sp/>X,<sp/>orig,<sp/>egls);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a34beccf854252b640ecf4ce44858a2b3" kindref="member">residual</ref>(y,<sp/>X,<sp/>egls,<sp/>resid);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>orig.IminusRhoThis(initLambda,<sp/>resid,<sp/>rsd);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/>orig.matrixColumn(lag_resid,<sp/>resid);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sigma2<sp/>=<sp/>rsd.norm()<sp/>/<sp/>dim;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>orig.makeStdSymmetric();</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a8d7ecde547bbec9b4b6feceb8aa839b4" kindref="member">run1</ref>(orig,<sp/>initLambda,<sp/>trace,<sp/>trace2,<sp/>fr,<sp/>0.1,<sp/>0.55);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>orig.makeRowStd();</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>correction<sp/>for<sp/>lambda:<sp/>m</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>final<sp/>lambda:<sp/>finLambda</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m<sp/>=<sp/><ref refid="smile2_8cpp_1af97f999fb2af653bd906e768d5e3b100" kindref="member">mie</ref>(rsd,<sp/>lag_resid,<sp/>trace,<sp/>trace2,<sp/>y,<sp/>X,<sp/>orig,<sp/>deps,<sp/>initLambda);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda<sp/>=<sp/>initLambda<sp/>-<sp/>m;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>orig.makeStdSymmetric();</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a8d7ecde547bbec9b4b6feceb8aa839b4" kindref="member">run1</ref>(orig,<sp/>lambda,<sp/>trace,<sp/>trace2,<sp/>fr,<sp/>0.55,<sp/>1);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>orig.makeRowStd();</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a6cea067ff3be811e0c2d24b21c688010" kindref="member">EGLS</ref>(lambda,<sp/>y,<sp/>X,<sp/>orig,<sp/>egls);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a34beccf854252b640ecf4ce44858a2b3" kindref="member">residual</ref>(y,<sp/>X,<sp/>egls,<sp/>resid);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>orig.IminusRhoThis(lambda,<sp/>resid,<sp/>rsd);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>orig.matrixColumn(lag_resid,<sp/>resid);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>sigma2<sp/>=<sp/>rsd.norm()<sp/>/<sp/>dim;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>approximate<sp/>computational<sp/>error<sp/>for<sp/>lambda:<sp/>m;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/><ref refid="smile2_8cpp_1af97f999fb2af653bd906e768d5e3b100" kindref="member">mie</ref>(rsd,<sp/>lag_resid,<sp/>trace,<sp/>trace2,<sp/>y,<sp/>X,<sp/>orig,<sp/>deps,<sp/>lambda);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>orig.makeStdSymmetric();</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>error_info(finLambda,<sp/>orig,<sp/>trace2,<sp/>fr,<sp/>X,<sp/>sigma2,<sp/>egls,<sp/>NULL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Error_info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vars<sp/>=<sp/>egls.getSize();</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>xbeta(dim);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vr<sp/>=<sp/>0;<sp/>vr<sp/>&lt;<sp/>vars;<sp/>++vr)<sp/>xbeta.addTimes(X[vr],<sp/>egls.getValue(vr));</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>rr-&gt;SetResidual(cnt,rsd.getValue(cnt));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1addc664dac8461571af43e92fb5754cc9" kindref="member">SetPredErr</ref>(cnt,<sp/>Y[cnt]<sp/>-<sp/>xbeta.getValue(cnt));</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1a64bbd57b53172b4a9070394342d96fc9" kindref="member">SetResidual</ref>(cnt,<sp/>Y[cnt]<sp/>-<sp/>xbeta.getValue(cnt)<sp/>-<sp/>(lambda<sp/>*<sp/>lag_resid.getValue(cnt)));</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1a614e6e1264c986e41828494e5bae8185" kindref="member">SetYHat</ref>(cnt,<sp/>xbeta.getValue(cnt));</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>autoregressive<sp/>variable<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>double_ptr_type<sp/>*info_matrix<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>double_ptr_type[vars<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars<sp/>+<sp/>2;<sp/>++cnt)<sp/>info_matrix[cnt]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[vars<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>d2L/dbdl<sp/>and<sp/>d2L/dbds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>info_matrix[cnt][vars]<sp/>=<sp/>info_matrix[vars][cnt]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>info_matrix[cnt][vars<sp/>+<sp/>1]<sp/>=<sp/>info_matrix[vars<sp/>+<sp/>1][cnt]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>d2L/dl2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>info_matrix[vars][vars]<sp/>=<sp/>trace2<sp/>+<sp/>fr;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>d2L/dbdb&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>*lag_X<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref>[vars],<sp/>works(dim);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>lag_X[cnt].<ref refid="class_dense_vector_1a97fb7da8dea1acb844b89cf5e74e7801" kindref="member">alloc</ref>(dim);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>orig.scaleUp(works,<sp/>X[cnt]);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>orig.IminusRhoThis(lambda,<sp/>works,<sp/>lag_X[cnt]);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>orig.scaleDown(lag_X[cnt]);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>info_matrix[cnt][cnt]<sp/>=<sp/>lag_X[cnt].<ref refid="class_dense_vector_1a8e5e9af36c71cfc5507fd8fac7bb02dd" kindref="member">norm</ref>()<sp/>/<sp/>sigma2;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>cnt<sp/>+<sp/>1;<sp/>rc<sp/>&lt;<sp/>vars;<sp/>++rc)<sp/>{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>info_matrix[cnt][rc]<sp/>=<sp/>info_matrix[rc][cnt]<sp/>=<sp/>lag_X[cnt].<ref refid="class_dense_vector_1a73a9483af1a14b8b8a6ef8ade3e8eb0d" kindref="member">product</ref>(lag_X[rc])<sp/>/<sp/>sigma2;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>d2L/ds2ds2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>info_matrix[vars<sp/>+<sp/>1][vars<sp/>+<sp/>1]<sp/>=<sp/>0.5<sp/>*<sp/>dim<sp/>/<sp/>sigma2<sp/>/<sp/>sigma2;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars;<sp/>++cnt)<sp/>info_matrix[vars<sp/>+<sp/>1][cnt]<sp/>=<sp/>info_matrix[cnt][vars<sp/>+<sp/>1]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>d2L/ds2dl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>info_matrix[vars][vars<sp/>+<sp/>1]<sp/>=<sp/>info_matrix[vars<sp/>+<sp/>1][vars]<sp/>=<sp/>trace<sp/>/<sp/>sigma2;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><ref refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" kindref="member">release</ref>(&amp;lag_X);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>vars;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ybar<sp/>=<sp/>y.<ref refid="class_dense_vector_1a1514f30675ed794898c718970d0950a5" kindref="member">sum</ref>()<sp/>/<sp/>n;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_y2<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>R2;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ee<sp/>=<sp/>rsd.norm();</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!InclConstant)<sp/>{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e_bar<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>n;<sp/>cnt++)<sp/>e_bar<sp/>+=<sp/>rsd.getValue(cnt);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>e_bar<sp/>/=<sp/>n;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>n;<sp/>cnt++)<sp/>{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e2<sp/>+=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(rsd.getValue(cnt)<sp/>-<sp/>e_bar);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum_y2<sp/>+=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(y.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt));</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>R2<sp/>=<sp/>1.0<sp/>-<sp/>(e2<sp/>/<sp/>sum_y2);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>sum_y2<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>n;<sp/>cnt++)<sp/>sum_y2<sp/>+=<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(y.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(cnt)<sp/>-<sp/>ybar);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>R2<sp/>=<sp/>1.0<sp/>-<sp/>(ee<sp/>/<sp/>sum_y2);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(R2)<sp/>&gt;<sp/>1.0<sp/>||<sp/>R2<sp/>&lt;<sp/>0)<sp/>R2<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1a33f736b69c2606c580c1abe142635f70" kindref="member">SetR2Fit</ref>(R2);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1a2f2fdcaf83cc411d9e6573fd6da87c80" kindref="member">SetR2Adjust</ref>(1.0<sp/>-<sp/>((n<sp/>-<sp/>1)<sp/>*<sp/>((1.0<sp/>-<sp/>R2)<sp/>/<sp/>(n<sp/>-<sp/>k))));</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lik<sp/>=<sp/>LogLike;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>double<sp/>const<sp/>lik<sp/>=<sp/>-1.0*((n/2.0)*(log(2.0*M_PI))+(n/2.0)*log((ee/n))+(ee/(2.0*(ee/n))));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>aic<sp/>=<sp/>-2.0<sp/>*<sp/>lik<sp/>+<sp/>2.0<sp/>*<sp/>k;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>Akaike<sp/>AIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sc<sp/>=<sp/>-2.0<sp/>*<sp/>lik<sp/>+<sp/>k<sp/>*<sp/>log((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)n);<sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>Schwartz<sp/>SC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1ad65c171f683f2009ab21db50c3702758" kindref="member">SetLIK</ref>(lik);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1a49967000d2df7381f881c9546bef433f" kindref="member">SetAIC</ref>(aic);<sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>Akaike<sp/>AIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1acce9c2f0131d5b6908698440a3eec6c6" kindref="member">SetSC</ref>(sc);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>Schwartz<sp/>SC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>LRtest<sp/>=<sp/>2.0<sp/>*<sp/>(lik<sp/>-<sp/>likOLS);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1a6e3c1b0fbf95eec8a2ee7c2c739f3468" kindref="member">SetLR_Test</ref>(0,<sp/>1.0);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1a6e3c1b0fbf95eec8a2ee7c2c739f3468" kindref="member">SetLR_Test</ref>(1,<sp/>LRtest);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1a6e3c1b0fbf95eec8a2ee7c2c739f3468" kindref="member">SetLR_Test</ref>(2,<sp/><ref refid="mix_8cpp_1ad43d7dfa4d017658b744b534aaaa9df7" kindref="member">gammp</ref>(0.5,<sp/>LRtest<sp/>*<sp/>0.5));</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1a35eb396db55403504598ea3784337553" kindref="member">SetSigSq</ref>(sigma2);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>invert<sp/>information<sp/>matrix<sp/>in<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="smile2_8cpp_1aa32897d547b28fc5eeb64cca5ec114db" kindref="member">SymMatInverse</ref>(info_matrix,<sp/>vars<sp/>+<sp/>2))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>std<sp/>=<sp/>sqrt(info_matrix[cnt][cnt]);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zval<sp/>=<sp/>egls.getValue(cnt)<sp/>/<sp/>std;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1a0a7986c12f1f731f394dd74553a47b61" kindref="member">SetCoeff</ref>(cnt,<sp/>egls.getValue(cnt));</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1a1a9dd8f1d05abbdaed21c00087720566" kindref="member">SetStdError</ref>(cnt,<sp/>std);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1aa1f9b9a166b2bd6b075c4a3cfb6c7561" kindref="member">SetZValue</ref>(cnt,<sp/>zval);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1a3735aed39c3a86388423ae1f94ea7993" kindref="member">SetProbVal</ref>(cnt,<sp/>2.0<sp/>*<sp/>(1.0<sp/>-<sp/><ref refid="mix_8cpp_1a750fe9d40743b3365b7bb176325a8239" kindref="member">nc</ref>(fabs(zval))));</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ste<sp/>=<sp/>sqrt(info_matrix[vars][vars]);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zval<sp/>=<sp/>lambda<sp/>/<sp/>ste;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1a0a7986c12f1f731f394dd74553a47b61" kindref="member">SetCoeff</ref>(cnt,<sp/>lambda);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1a1a9dd8f1d05abbdaed21c00087720566" kindref="member">SetStdError</ref>(cnt,<sp/>ste);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1aa1f9b9a166b2bd6b075c4a3cfb6c7561" kindref="member">SetZValue</ref>(cnt,<sp/>zval);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1a3735aed39c3a86388423ae1f94ea7993" kindref="member">SetProbVal</ref>(cnt,<sp/>2.0<sp/>*<sp/>(1.0<sp/>-<sp/><ref refid="mix_8cpp_1a750fe9d40743b3365b7bb176325a8239" kindref="member">nc</ref>(fabs(zval))));</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars<sp/>+<sp/>1;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>cnt;<sp/>j<sp/>&lt;<sp/>vars<sp/>+<sp/>1;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1a2be0efaf2573f42c12f58ef292f665f4" kindref="member">SetCovar</ref>(cnt,<sp/>j,<sp/>info_matrix[cnt][j]);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1a2be0efaf2573f42c12f58ef292f665f4" kindref="member">SetCovar</ref>(j,<sp/>cnt,<sp/>info_matrix[j][cnt]);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*r<sp/>=<sp/>rsd.getThis();</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*bp<sp/>=<sp/><ref refid="mix_8cpp_1a78037708268846837daa3b2d83b7bc53" kindref="member">BP_Test</ref>(r,<sp/>n,<sp/>XX,<sp/>k,<sp/>InclConstant);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bp<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1aee246f95d4baa77f9e59e62173aa3c31" kindref="member">SetBPTest</ref>(0,<sp/>k<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1aee246f95d4baa77f9e59e62173aa3c31" kindref="member">SetBPTest</ref>(1,<sp/>0.0);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1aee246f95d4baa77f9e59e62173aa3c31" kindref="member">SetBPTest</ref>(2,<sp/>-1.0);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1aee246f95d4baa77f9e59e62173aa3c31" kindref="member">SetBPTest</ref>(0,<sp/>bp[1]);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1aee246f95d4baa77f9e59e62173aa3c31" kindref="member">SetBPTest</ref>(1,<sp/>bp[0]);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1aee246f95d4baa77f9e59e62173aa3c31" kindref="member">SetBPTest</ref>(2,<sp/>bp[2]);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>(n<sp/>-<sp/>1.0)<sp/>*<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(lambda)<sp/>/<sp/>(1.0<sp/>-<sp/><ref refid="_m_l__im_8cpp_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>(lambda));</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1a4816036a23e294f52eb2821fbd236b22" kindref="member">SetWaldTest</ref>(0,<sp/>k<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1a4816036a23e294f52eb2821fbd236b22" kindref="member">SetWaldTest</ref>(1,<sp/>w);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>rr-&gt;<ref refid="class_diagnostic_report_1a4816036a23e294f52eb2821fbd236b22" kindref="member">SetWaldTest</ref>(2,<sp/><ref refid="mix_8cpp_1ad43d7dfa4d017658b744b534aaaa9df7" kindref="member">gammp</ref>((k<sp/>-<sp/>1)<sp/>/<sp/>2.0,<sp/>w<sp/>/<sp/>2.0));</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>vars<sp/>+<sp/>2;<sp/>++cnt)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>info_matrix[cnt];</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>info_matrix;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>info_matrix<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp"/>
  </compounddef>
</doxygen>
