<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_power_lag_8h" kind="file" language="C++">
    <compoundname>PowerLag.h</compoundname>
    <includes refid="lite2_8h" local="yes">lite2.h</includes>
    <includedby refid="_m_l__im_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp</includedby>
    <includedby refid="_power_lag_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/PowerLag.cpp</includedby>
    <includedby refid="_power_sym_lag_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/PowerSymLag.cpp</includedby>
    <includedby refid="_power_sym_lag_8h" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/PowerSymLag.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/PowerLag.h</label>
        <link refid="_power_lag_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>lite2.h</label>
        <link refid="lite2_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ostream</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp</label>
        <link refid="_m_l__im_8cpp"/>
      </node>
      <node id="3">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/PowerLag.cpp</label>
        <link refid="_power_lag_8cpp"/>
      </node>
      <node id="1">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/PowerLag.h</label>
        <link refid="_power_lag_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/PowerSymLag.cpp</label>
        <link refid="_power_sym_lag_8cpp"/>
      </node>
      <node id="5">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/PowerSymLag.h</label>
        <link refid="_power_sym_lag_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/polym.h</label>
        <link refid="polym_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_power_lag" prot="public">PowerLag</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="_power_lag_8h_1a15d397a6439196ca8dfc13a97984460f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RowMultiply</definition>
        <argsstring>(Iterator&lt; VALUE &gt; row, Iterator&lt; WMap &gt; mt, Vector&lt; VALUE &gt; &amp;product)</argsstring>
        <name>RowMultiply</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref> &gt;</type>
          <declname>row</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type><ref refid="class_vector" kindref="compound">Vector</ref>&lt; <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref> &gt; &amp;</type>
          <declname>product</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/PowerLag.h" line="13" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/PowerLag.h" bodystart="13" bodyend="26"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__GEODA_CENTER_POWER_LAG_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__GEODA_CENTER_POWER_LAG_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lite2_8h" kindref="compound">lite2.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7"><highlight class="comment">RowMultiply</highlight></codeline>
<codeline lineno="8"><highlight class="comment">product<sp/>is<sp/>a<sp/>row-vector,<sp/>that<sp/>results<sp/>from<sp/>vector<sp/>(row)<sp/>and</highlight></codeline>
<codeline lineno="9"><highlight class="comment">sparse<sp/>matrix<sp/>(mt)<sp/>multiplication.</highlight></codeline>
<codeline lineno="10"><highlight class="comment">Assumes<sp/>all<sp/>objects<sp/>already<sp/>exist.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>&lt;class<sp/>R&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="_power_lag_8h_1a15d397a6439196ca8dfc13a97984460f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_power_lag_8h_1a15d397a6439196ca8dfc13a97984460f" kindref="member">RowMultiply</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;VALUE&gt;</ref><sp/>row,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt,<sp/><ref refid="class_vector" kindref="compound">Vector&lt;VALUE&gt;</ref><sp/>&amp;<ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref>)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>dim<sp/>=<sp/>mt.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref>.reset();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>dim;<sp/>++cp)<sp/><ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref><sp/>&lt;&lt;<sp/>0;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>mt;<sp/>++mt,<sp/>++row)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>RowValue<sp/>=<sp/>*row;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RowValue)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_vector_1a12449554072b5e05998c3e5607dcc2e3" kindref="member">WMap::input_iterator</ref><sp/>it<sp/>=<sp/>(*mt)();<sp/>it;<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref>[(*it).first]<sp/>+=<sp/>(*it).second<sp/>*<sp/>RowValue;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="29"><highlight class="comment">PowerLag</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>&lt;class<sp/>R&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="class_power_lag" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_power_lag_1a7b26d068a2fe166b38ab9ed307b95cb2" kindref="member">PowerLag</ref><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><ref refid="class_power_lag_1a7b26d068a2fe166b38ab9ed307b95cb2" kindref="member">PowerLag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>matrix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>vsize);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="class_power_lag_1aac78c8b85bf9e9b2cebe0101be5238e5" kindref="member">Init</ref>();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_power_lag_1a5191b9966745f7d382fd21f5b454c227" kindref="member">AdvanceLag</ref>();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="class_power_lag_1a8bc05997c93fa811849c5ed9e77dd4c9" kindref="member">SparseRowLag</ref>();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="class_power_lag_1ab241075e258a1f4d8470562fd7e2b780" kindref="member">SparseColumnLag</ref>();</highlight></codeline>
<codeline lineno="40" refid="class_power_lag_1a45e047a78001ff390ae483f9e42ea3a4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="class_power_lag_1a45e047a78001ff390ae483f9e42ea3a4" kindref="member">DenseRowLag</ref>()<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>LastWasRow<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_power_lag_8h_1a15d397a6439196ca8dfc13a97984460f" kindref="member">RowMultiply</ref>(RowLag(),<sp/>mt,<sp/>Row);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a7dd6ec971b6f46098cb10e81b3fb0e9c" kindref="member">Product</ref>(Row(),<sp/>ColumnLag());</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="class_power_lag_1a2123f6e5fb5372b11590e2bd9cf0baee" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="class_power_lag_1a2123f6e5fb5372b11590e2bd9cf0baee" kindref="member">DenseColumnLag</ref>()<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>LastWasRow<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1af2d4a6e9c58b3995943f051b2b709bb1" kindref="member">ColumnMultiply</ref>(ColumnLag(),<sp/>mt,<sp/>Column);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_power_lag_1a5191b9966745f7d382fd21f5b454c227" kindref="member">AdvanceLag</ref>();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a7dd6ec971b6f46098cb10e81b3fb0e9c" kindref="member">Product</ref>(RowLag(),<sp/>ColumnLag());</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="class_power_lag_1aba86f6228fe473b73c264c8dc92da290" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="class_power_lag_1aba86f6228fe473b73c264c8dc92da290" kindref="member">ComputeLag</ref>()<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NonZero.count()<sp/>&lt;<sp/>LongLength)<sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>sparse<sp/>lag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LastWasRow<sp/>?<sp/><ref refid="class_power_lag_1ab241075e258a1f4d8470562fd7e2b780" kindref="member">SparseColumnLag</ref>()<sp/>:<sp/><ref refid="class_power_lag_1a8bc05997c93fa811849c5ed9e77dd4c9" kindref="member">SparseRowLag</ref>();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!LongInit)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LastWasRow)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_power_lag_1ab241075e258a1f4d8470562fd7e2b780" kindref="member">SparseColumnLag</ref>();<sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>time<sp/>do<sp/>sparse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>Dim;<sp/>++cnt)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(OrderLag[cnt]<sp/>!=<sp/>LastOrder)<sp/>RowLag[cnt]<sp/>=<sp/>ColumnLag[cnt]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LongInit<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LastWasRow<sp/>?<sp/><ref refid="class_power_lag_1a2123f6e5fb5372b11590e2bd9cf0baee" kindref="member">DenseColumnLag</ref>()<sp/>:<sp/><ref refid="class_power_lag_1a45e047a78001ff390ae483f9e42ea3a4" kindref="member">DenseRowLag</ref>();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>RowLag,<sp/>Row,<sp/>ColumnLag,<sp/>Column;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="class_vector" kindref="compound">Vector&lt;INDEX&gt;</ref><sp/>OrderLag,<sp/>Order,<sp/>NonZero;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>LastWasRow,<sp/>LongInit;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>LastOrder,<sp/>Dim,<sp/>LongLength;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/xun/github/geoda-lib/src/cpp/regression/PowerLag.h"/>
  </compounddef>
</doxygen>
