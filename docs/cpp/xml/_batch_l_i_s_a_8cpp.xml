<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_batch_l_i_s_a_8cpp" kind="file" language="C++">
    <compoundname>BatchLISA.cpp</compoundname>
    <includes refid="_batch_l_i_s_a_8h" local="yes">BatchLISA.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">time.h</includes>
    <includes refid="geoda-weight_8h" local="yes">weights/geoda-weight.h</includes>
    <includes refid="_geo_da_set_8h" local="yes">lisa/GeoDaSet.h</includes>
    <includes local="no">boost/bind.hpp</includes>
    <includes local="no">boost/system/config.hpp</includes>
    <includes local="no">boost/thread.hpp</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/xun/github/geoda-lib/src/cpp/lisa/BatchLISA.cpp</label>
        <link refid="_batch_l_i_s_a_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>BatchLISA.h</label>
        <link refid="_batch_l_i_s_a_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>lisa/GeoDaSet.h</label>
        <link refid="_geo_da_set_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>weights/geoda-weight.h</label>
        <link refid="geoda-weight_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>boost/bind.hpp</label>
      </node>
      <node id="13">
        <label>boost/system/config.hpp</label>
      </node>
      <node id="14">
        <label>boost/thread.hpp</label>
      </node>
      <node id="3">
        <label>cstdint</label>
      </node>
      <node id="4">
        <label>list</label>
      </node>
      <node id="7">
        <label>math.h</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="11">
        <label>string.h</label>
      </node>
      <node id="8">
        <label>time.h</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>Xun<sp/>Li<sp/>on<sp/>2019-06-05.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_batch_l_i_s_a_8h" kindref="compound">BatchLISA.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="geoda-weight_8h" kindref="compound">weights/geoda-weight.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_geo_da_set_8h" kindref="compound">lisa/GeoDaSet.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__NO_THREAD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__USE_PTHREAD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/bind.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/system/config.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/thread.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">batchlisa_thread_args<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>BatchLISA*<sp/>lisa;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>uint64_t<sp/>seed_start;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>batchlisa_thread_helper(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>voidArgs)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>batchlisa_thread_args*<sp/>args<sp/>=<sp/>(batchlisa_thread_args*)voidArgs;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>args-&gt;lisa-&gt;CalcPseudoP_range(args-&gt;start,<sp/>args-&gt;end,<sp/>args-&gt;seed_start);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="class_batch_l_i_s_a_1a63f499cde5d347aa148e7ff02a5b3379" kindref="member">BatchLISA::BatchLISA</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_obs,<sp/><ref refid="class_geo_da_weight" kindref="compound">GeoDaWeight</ref>*<sp/>w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;bool&gt;<sp/>&gt;&amp;<sp/>_undefs,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_significance_cutoff,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_nCPUs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_perm,<sp/>uint64_t<sp/>_last_seed)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>nCPUs(_nCPUs),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_obs(num_obs),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>row_standardize(true),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>permutations(_perm),</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>significance_cutoff(_significance_cutoff),</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>user_sig_cutoff(0),</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>has_undefined(false),</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>has_isolates(w-&gt;HasIsolates()),</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calc_significances(true),</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_seed_used(_last_seed),</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reuse_last_seed(true),</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>weights(w),</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>undefs(_undefs)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SetSignificanceFilter(1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="class_batch_l_i_s_a_1aa4239554d60029952c2b095db1ab50fa" kindref="member">BatchLISA::~BatchLISA</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1afc0199862116962406688e23d9cb8eec" kindref="member">BatchLISA::Run</ref>()<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="class_batch_l_i_s_a_1a35a6414f3ed4f44e5828e68bcc0f9160" kindref="member">sig_local_vec</ref>.resize(<ref refid="class_batch_l_i_s_a_1addfa51ca3a3e1869edcd2342c5bf50f0" kindref="member">num_batch</ref>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="class_batch_l_i_s_a_1ac7d1f7d2ef8d4e236c7c3df80773df5f" kindref="member">sig_cat_vec</ref>.resize(<ref refid="class_batch_l_i_s_a_1addfa51ca3a3e1869edcd2342c5bf50f0" kindref="member">num_batch</ref>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><ref refid="class_batch_l_i_s_a_1a48ff3a6e4742c47a97699d555ed44155" kindref="member">cluster_vec</ref>.resize(<ref refid="class_batch_l_i_s_a_1addfa51ca3a3e1869edcd2342c5bf50f0" kindref="member">num_batch</ref>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><ref refid="class_batch_l_i_s_a_1aa25fa791b1d3cfb2c9dd1d3f3b8a3bf1" kindref="member">lag_vec</ref>.resize(<ref refid="class_batch_l_i_s_a_1addfa51ca3a3e1869edcd2342c5bf50f0" kindref="member">num_batch</ref>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><ref refid="class_batch_l_i_s_a_1ae1592bab99cab0a3cb937fb0edccf184" kindref="member">lisa_vec</ref>.resize(<ref refid="class_batch_l_i_s_a_1addfa51ca3a3e1869edcd2342c5bf50f0" kindref="member">num_batch</ref>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_batch_l_i_s_a_1addfa51ca3a3e1869edcd2342c5bf50f0" kindref="member">num_batch</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_batch_l_i_s_a_1a35a6414f3ed4f44e5828e68bcc0f9160" kindref="member">sig_local_vec</ref>[i].resize(<ref refid="class_batch_l_i_s_a_1acfa114b6646825683aa75107e95d3e77" kindref="member">num_obs</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_batch_l_i_s_a_1ac7d1f7d2ef8d4e236c7c3df80773df5f" kindref="member">sig_cat_vec</ref>[i].resize(<ref refid="class_batch_l_i_s_a_1acfa114b6646825683aa75107e95d3e77" kindref="member">num_obs</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_batch_l_i_s_a_1a48ff3a6e4742c47a97699d555ed44155" kindref="member">cluster_vec</ref>[i].resize(<ref refid="class_batch_l_i_s_a_1acfa114b6646825683aa75107e95d3e77" kindref="member">num_obs</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_batch_l_i_s_a_1aa25fa791b1d3cfb2c9dd1d3f3b8a3bf1" kindref="member">lag_vec</ref>[i].resize(<ref refid="class_batch_l_i_s_a_1acfa114b6646825683aa75107e95d3e77" kindref="member">num_obs</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_batch_l_i_s_a_1ae1592bab99cab0a3cb937fb0edccf184" kindref="member">lisa_vec</ref>[i].resize(<ref refid="class_batch_l_i_s_a_1acfa114b6646825683aa75107e95d3e77" kindref="member">num_obs</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="class_batch_l_i_s_a_1a8eee5f68e8274762ff9aa69ab4902d0f" kindref="member">nn_vec</ref>.resize(<ref refid="class_batch_l_i_s_a_1acfa114b6646825683aa75107e95d3e77" kindref="member">num_obs</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_batch_l_i_s_a_1acfa114b6646825683aa75107e95d3e77" kindref="member">num_obs</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_batch_l_i_s_a_1a8eee5f68e8274762ff9aa69ab4902d0f" kindref="member">nn_vec</ref>[i]<sp/>=<sp/><ref refid="class_batch_l_i_s_a_1aa652dafdede6fe0792d434db2f1d0010" kindref="member">weights</ref>-&gt;GetNbrSize(i);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="class_batch_l_i_s_a_1a912364a71106968ed77f4f4b17122f81" kindref="member">ComputeLoalSA</ref>();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_batch_l_i_s_a_1a161b0aa92fd69f547d225283039174f5" kindref="member">calc_significances</ref>)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_batch_l_i_s_a_1af4ba7dffdb88a6edb74cfb17103bf4cd" kindref="member">CalcPseudoP</ref>();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1ab0ca50fa4fd73926f8e99144cc609536" kindref="member">BatchLISA::SetSignificanceFilter</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filter_id)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter_id<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>user<sp/>input<sp/>cutoff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_batch_l_i_s_a_1a039f5ad06b7098574cae5e133449dee2" kindref="member">significance_filter</ref><sp/>=<sp/>filter_id;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>0:<sp/>&gt;0.05<sp/>1:<sp/>0.05,<sp/>2:<sp/>0.01,<sp/>3:<sp/>0.001,<sp/>4:<sp/>0.0001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter_id<sp/>&lt;<sp/>1<sp/>||<sp/>filter_id<sp/>&gt;<sp/>4)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><ref refid="class_batch_l_i_s_a_1a039f5ad06b7098574cae5e133449dee2" kindref="member">significance_filter</ref><sp/>=<sp/>filter_id;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter_id<sp/>==<sp/>1)<sp/><ref refid="class_batch_l_i_s_a_1aae887eeb8b3fd9a42ef60c399de53bc7" kindref="member">significance_cutoff</ref><sp/>=<sp/>0.05;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter_id<sp/>==<sp/>2)<sp/><ref refid="class_batch_l_i_s_a_1aae887eeb8b3fd9a42ef60c399de53bc7" kindref="member">significance_cutoff</ref><sp/>=<sp/>0.01;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter_id<sp/>==<sp/>3)<sp/><ref refid="class_batch_l_i_s_a_1aae887eeb8b3fd9a42ef60c399de53bc7" kindref="member">significance_cutoff</ref><sp/>=<sp/>0.001;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter_id<sp/>==<sp/>4)<sp/><ref refid="class_batch_l_i_s_a_1aae887eeb8b3fd9a42ef60c399de53bc7" kindref="member">significance_cutoff</ref><sp/>=<sp/>0.0001;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a7e6aac14436d0ebaa717e596b6db909a" kindref="member">BatchLISA::GetSignificanceFilter</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a039f5ad06b7098574cae5e133449dee2" kindref="member">significance_filter</ref>;<sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1ad0e884d33d8a01b6606f83fc9fb94169" kindref="member">BatchLISA::GetSignificanceCutoff</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1aae887eeb8b3fd9a42ef60c399de53bc7" kindref="member">significance_cutoff</ref>;<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a6a7b354a62bf1812e6d633481299f854" kindref="member">BatchLISA::SetSignificanceCutoff</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>{<sp/><ref refid="class_batch_l_i_s_a_1aae887eeb8b3fd9a42ef60c399de53bc7" kindref="member">significance_cutoff</ref><sp/>=<sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a261bbb74d46f4fd628506d51e99d4d74" kindref="member">BatchLISA::GetUserCutoff</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a73066ebb119363b95cea0fcfb246e5ad" kindref="member">user_sig_cutoff</ref>;<sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1aa273824fa66082932a8988e8a8b2102d" kindref="member">BatchLISA::SetUserCutoff</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>{<sp/><ref refid="class_batch_l_i_s_a_1a73066ebb119363b95cea0fcfb246e5ad" kindref="member">user_sig_cutoff</ref><sp/>=<sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a6684f63321d322bf1cc3d8107049b976" kindref="member">BatchLISA::GetFDR</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_p,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bound<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&lt;<sp/>0<sp/>||<sp/>idx<sp/>&gt;=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="class_batch_l_i_s_a_1a35a6414f3ed4f44e5828e68bcc0f9160" kindref="member">sig_local_vec</ref>.size()<sp/>-<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fdr<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>False<sp/>Discovery<sp/>Rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>pvals<sp/>=<sp/><ref refid="class_batch_l_i_s_a_1a35a6414f3ed4f44e5828e68bcc0f9160" kindref="member">sig_local_vec</ref>[idx];<sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>all<sp/>p-values<sp/>from<sp/>smallest<sp/>to<sp/>largets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>std::sort(pvals.begin(),<sp/>pvals.end());</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i_0<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>stop<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p_start<sp/>=<sp/>current_p;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!stop)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>i_0<sp/>that<sp/>corresponds<sp/>to<sp/>p<sp/>=<sp/>alpha</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/><ref refid="class_batch_l_i_s_a_1acfa114b6646825683aa75107e95d3e77" kindref="member">num_obs</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pvals[i]<sp/>&gt;=<sp/>p_start)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i_0<sp/>==<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i_0<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i_0<sp/>&lt;<sp/>0)<sp/>stop<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>p*<sp/>=<sp/>i_0<sp/>x<sp/>alpha<sp/>/<sp/>N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>p_start<sp/>=<sp/>i_0<sp/>*<sp/>current_p<sp/>/<sp/>(double)<ref refid="class_batch_l_i_s_a_1acfa114b6646825683aa75107e95d3e77" kindref="member">num_obs</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i_0<sp/>&lt;<sp/>0)<sp/>p_start<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>fdr<sp/>=<sp/>p_start;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fdr;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a6a212260baeee4c914bb9752627508ef" kindref="member">BatchLISA::GetBO</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_p)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>bo;<sp/>//Bonferroni<sp/>bound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bonferroni_bound<sp/>=<sp/>current_p<sp/>/<sp/>(double)<ref refid="class_batch_l_i_s_a_1acfa114b6646825683aa75107e95d3e77" kindref="member">num_obs</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bonferroni_bound;</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1aa54c7033fee3b3477f5ab7f3d4203433" kindref="member">BatchLISA::GetNumPermutations</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1aa68604b747006dc0da9dd22a4276ec2e" kindref="member">permutations</ref>;<sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1ac62c00856e07ed02a886ca146809b5fd" kindref="member">BatchLISA::SetNumPermutations</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val)<sp/>{<sp/><ref refid="class_batch_l_i_s_a_1aa68604b747006dc0da9dd22a4276ec2e" kindref="member">permutations</ref><sp/>=<sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">uint64_t<sp/><ref refid="class_batch_l_i_s_a_1a48922390f1e7f318efd693c3ccd4b463" kindref="member">BatchLISA::GetLastUsedSeed</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a58da92a3ad297dd294b8631395d3e2e6" kindref="member">last_seed_used</ref>;<sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a0234412dac2672683fb26900285c62ea" kindref="member">BatchLISA::IsReuseLastSeed</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a8306280cca5606aa7b2365bef3db69e5" kindref="member">reuse_last_seed</ref>;<sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1afd8ed58b76ae0679e574abc28ef49b26" kindref="member">BatchLISA::SetReuseLastSeed</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reuse)<sp/>{<sp/><ref refid="class_batch_l_i_s_a_1a8306280cca5606aa7b2365bef3db69e5" kindref="member">reuse_last_seed</ref><sp/>=<sp/>reuse;<sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a6b0349e58232f861fb9f22438ebc669b" kindref="member">BatchLISA::SetLastUsedSeed</ref>(uint64_t<sp/>seed)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><ref refid="class_batch_l_i_s_a_1a8306280cca5606aa7b2365bef3db69e5" kindref="member">reuse_last_seed</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><ref refid="class_batch_l_i_s_a_1a58da92a3ad297dd294b8631395d3e2e6" kindref="member">last_seed_used</ref><sp/>=<sp/>seed;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1acb8fafedd7b86af1be217ffb2d25305d" kindref="member">BatchLISA::GetHasIsolates</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a7903dcf217bf1b854772b5b0bfaafb64" kindref="member">has_isolates</ref>;<sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a3f77fd90f006297c210a034c43c88e92" kindref="member">BatchLISA::GetHasUndefined</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a135f1b1f9e6ec0f81f579b2685ee007f" kindref="member">has_undefined</ref>;<sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1af4ba7dffdb88a6edb74cfb17103bf4cd" kindref="member">BatchLISA::CalcPseudoP</ref>()<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_batch_l_i_s_a_1a161b0aa92fd69f547d225283039174f5" kindref="member">calc_significances</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="class_batch_l_i_s_a_1a206db1935f2bcfe824a0a213839c0510" kindref="member">CalcPseudoP_threaded</ref>();</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a206db1935f2bcfe824a0a213839c0510" kindref="member">BatchLISA::CalcPseudoP_threaded</ref>()<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__USE_PTHREAD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_batch_l_i_s_a_1a772e893eb6919dbb8a904d2b9cc293cb" kindref="member">nCPUs</ref><sp/>&lt;=<sp/>0)<sp/><ref refid="class_batch_l_i_s_a_1a772e893eb6919dbb8a904d2b9cc293cb" kindref="member">nCPUs</ref><sp/>=<sp/>boost::thread::hardware_concurrency();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>boost::thread_group<sp/>threadPool;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>pthread_t*<sp/>threadPool<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>pthread_t[<ref refid="class_batch_l_i_s_a_1a772e893eb6919dbb8a904d2b9cc293cb" kindref="member">nCPUs</ref>];</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">batchlisa_thread_args*<sp/>args<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>batchlisa_thread_args[<ref refid="class_batch_l_i_s_a_1a772e893eb6919dbb8a904d2b9cc293cb" kindref="member">nCPUs</ref>];</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>divide<sp/>up<sp/>work<sp/>according<sp/>to<sp/>number<sp/>of<sp/>observations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>number<sp/>of<sp/>CPUs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>work_chunk<sp/>=<sp/><ref refid="class_batch_l_i_s_a_1acfa114b6646825683aa75107e95d3e77" kindref="member">num_obs</ref><sp/>/<sp/><ref refid="class_batch_l_i_s_a_1a772e893eb6919dbb8a904d2b9cc293cb" kindref="member">nCPUs</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(work_chunk<sp/>==<sp/>0)<sp/>work_chunk<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>obs_start<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>obs_end<sp/>=<sp/>obs_start<sp/>+<sp/>work_chunk;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quotient<sp/>=<sp/><ref refid="class_batch_l_i_s_a_1acfa114b6646825683aa75107e95d3e77" kindref="member">num_obs</ref><sp/>/<sp/><ref refid="class_batch_l_i_s_a_1a772e893eb6919dbb8a904d2b9cc293cb" kindref="member">nCPUs</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remainder<sp/>=<sp/><ref refid="class_batch_l_i_s_a_1acfa114b6646825683aa75107e95d3e77" kindref="member">num_obs</ref><sp/>%<sp/><ref refid="class_batch_l_i_s_a_1a772e893eb6919dbb8a904d2b9cc293cb" kindref="member">nCPUs</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tot_threads<sp/>=<sp/>(quotient<sp/>&gt;<sp/>0)<sp/>?<sp/><ref refid="class_batch_l_i_s_a_1a772e893eb6919dbb8a904d2b9cc293cb" kindref="member">nCPUs</ref><sp/>:<sp/>remainder;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_batch_l_i_s_a_1a8306280cca5606aa7b2365bef3db69e5" kindref="member">reuse_last_seed</ref>)<sp/><ref refid="class_batch_l_i_s_a_1a58da92a3ad297dd294b8631395d3e2e6" kindref="member">last_seed_used</ref><sp/>=<sp/>time(0);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tot_threads;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>remainder)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>i<sp/>*<sp/>(quotient<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>a<sp/>+<sp/>quotient;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>remainder<sp/>*<sp/>(quotient<sp/>+<sp/>1)<sp/>+<sp/>(i<sp/>-<sp/>remainder)<sp/>*<sp/>quotient;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>a<sp/>+<sp/>quotient<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>seed_start<sp/>=<sp/><ref refid="class_batch_l_i_s_a_1a58da92a3ad297dd294b8631395d3e2e6" kindref="member">last_seed_used</ref><sp/>+<sp/>a;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>uint64_t<sp/>seed_end<sp/>=<sp/>seed_start<sp/>+<sp/>((uint64_t)<sp/>(b-a));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__USE_PTHREAD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::thread*<sp/>worker<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>boost::thread(boost::bind(&amp;<ref refid="class_batch_l_i_s_a_1a01346ac98a9204ed99d2a0d9dc2a0595" kindref="member">BatchLISA::CalcPseudoP_range</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>a,<sp/>b,<sp/>seed_start));</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>threadPool.add_thread(worker);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>args[i].lisa<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>args[i].start<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>args[i].end<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>args[i].seed_start<sp/>=<sp/>seed_start;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pthread_create(&amp;threadPool[i],<sp/>NULL,<sp/>&amp;batchlisa_thread_helper,<sp/>&amp;args[i]))<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Thread<sp/>create<sp/>failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__USE_PTHREAD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>threadPool.join_all();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="class_batch_l_i_s_a_1a772e893eb6919dbb8a904d2b9cc293cb" kindref="member">nCPUs</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_join(threadPool[j],<sp/>NULL);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>args;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>threadPool;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a01346ac98a9204ed99d2a0d9dc2a0595" kindref="member">BatchLISA::CalcPseudoP_range</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>obs_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>obs_end,<sp/>uint64_t<sp/>seed_start)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>GeoDaSet<sp/>workPermutation(<ref refid="class_batch_l_i_s_a_1acfa114b6646825683aa75107e95d3e77" kindref="member">num_obs</ref>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_rand<sp/>=<sp/><ref refid="class_batch_l_i_s_a_1acfa114b6646825683aa75107e95d3e77" kindref="member">num_obs</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bool<sp/>perm_valid<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numNeighbors;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>obs_start;<sp/>cnt<sp/>&lt;=<sp/>obs_end;<sp/>cnt++)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>numNeighbors<sp/>=<sp/><ref refid="class_batch_l_i_s_a_1aa652dafdede6fe0792d434db2f1d0010" kindref="member">weights</ref>-&gt;GetNbrSize(cnt);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numNeighbors<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>0;<sp/>v<sp/>&lt;<sp/><ref refid="class_batch_l_i_s_a_1addfa51ca3a3e1869edcd2342c5bf50f0" kindref="member">num_batch</ref>;<sp/>++v)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_batch_l_i_s_a_1ac7d1f7d2ef8d4e236c7c3df80773df5f" kindref="member">sig_cat_vec</ref>[v][cnt]<sp/>=<sp/>5;<sp/><sp/></highlight><highlight class="comment">//<sp/>neighborless<sp/>cat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;double&gt;<sp/>&gt;<sp/>permutedSA(<ref refid="class_batch_l_i_s_a_1addfa51ca3a3e1869edcd2342c5bf50f0" kindref="member">num_batch</ref>);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_batch_l_i_s_a_1addfa51ca3a3e1869edcd2342c5bf50f0" kindref="member">num_batch</ref>;<sp/>++i)<sp/>permutedSA[i].resize(<ref refid="class_batch_l_i_s_a_1aa68604b747006dc0da9dd22a4276ec2e" kindref="member">permutations</ref>);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>perm<sp/>=<sp/>0;<sp/>perm<sp/>&lt;<sp/><ref refid="class_batch_l_i_s_a_1aa68604b747006dc0da9dd22a4276ec2e" kindref="member">permutations</ref>;<sp/>perm++)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rand<sp/>=<sp/>0,<sp/>newRandom;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rng_val;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(rand<sp/>&lt;<sp/>numNeighbors)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>computing<sp/>&apos;perfect&apos;<sp/>permutation<sp/>of<sp/>given<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rng_val<sp/>=<sp/>geoda::ThomasWangHashDouble(seed_start++)<sp/>*<sp/>max_rand;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>is<sp/>needed<sp/>to<sp/>fix<sp/>issue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://github.com/GeoDaCenter/geoda/issues/488</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newRandom<sp/>=<sp/>(int)(rng_val<sp/>&lt;<sp/>0.0<sp/>?<sp/>ceil(rng_val<sp/>-<sp/>0.5)<sp/>:<sp/>floor(rng_val<sp/>+<sp/>0.5));</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newRandom<sp/>!=<sp/>cnt<sp/>&amp;&amp;<sp/>!workPermutation.Belongs(newRandom)<sp/>&amp;&amp;<sp/><ref refid="class_batch_l_i_s_a_1aa652dafdede6fe0792d434db2f1d0010" kindref="member">weights</ref>-&gt;GetNbrSize(newRandom)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>workPermutation.Push(newRandom);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rand++;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>permNeighbors(numNeighbors);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>numNeighbors;<sp/>cp++)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>permNeighbors[cp]<sp/>=<sp/>workPermutation.Pop();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_batch_l_i_s_a_1a7ed3bc7770e54c05637c1ab43fd86690" kindref="member">PermLocalSA</ref>(cnt,<sp/>perm,<sp/>permNeighbors,<sp/>permutedSA);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>countLarger<sp/>=<sp/><ref refid="class_batch_l_i_s_a_1a936e4be0882cd88adf07c6053ef2d6f4" kindref="member">CountLargerSA</ref>(cnt,<sp/>permutedSA);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>0;<sp/>v<sp/>&lt;<sp/><ref refid="class_batch_l_i_s_a_1addfa51ca3a3e1869edcd2342c5bf50f0" kindref="member">num_batch</ref>;<sp/>++v)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_sigLocal<sp/>=<sp/>(countLarger[v]<sp/>+<sp/>1.0)<sp/>/<sp/>(<ref refid="class_batch_l_i_s_a_1aa68604b747006dc0da9dd22a4276ec2e" kindref="member">permutations</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;significance&apos;<sp/>of<sp/>local<sp/>sa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_sigLocal<sp/>&lt;=<sp/>0.0001)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_batch_l_i_s_a_1ac7d1f7d2ef8d4e236c7c3df80773df5f" kindref="member">sig_cat_vec</ref>[v][cnt]<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_sigLocal<sp/>&lt;=<sp/>0.001)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_batch_l_i_s_a_1ac7d1f7d2ef8d4e236c7c3df80773df5f" kindref="member">sig_cat_vec</ref>[v][cnt]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_sigLocal<sp/>&lt;=<sp/>0.01)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_batch_l_i_s_a_1ac7d1f7d2ef8d4e236c7c3df80773df5f" kindref="member">sig_cat_vec</ref>[v][cnt]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_sigLocal<sp/>&lt;=<sp/>0.05)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_batch_l_i_s_a_1ac7d1f7d2ef8d4e236c7c3df80773df5f" kindref="member">sig_cat_vec</ref>[v][cnt]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_batch_l_i_s_a_1ac7d1f7d2ef8d4e236c7c3df80773df5f" kindref="member">sig_cat_vec</ref>[v][cnt]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_batch_l_i_s_a_1abd135602bbc27fbeaf18f4284c185995" kindref="member">undefs</ref>[v][cnt])<sp/><ref refid="class_batch_l_i_s_a_1ac7d1f7d2ef8d4e236c7c3df80773df5f" kindref="member">sig_cat_vec</ref>[v][cnt]<sp/>=<sp/>6;<sp/><sp/></highlight><highlight class="comment">//<sp/>undefined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_batch_l_i_s_a_1a35a6414f3ed4f44e5828e68bcc0f9160" kindref="member">sig_local_vec</ref>[v][cnt]<sp/>=<sp/>_sigLocal;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>observations<sp/>with<sp/>no<sp/>neighbors<sp/>get<sp/>marked<sp/>as<sp/>isolates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>undefined<sp/>should<sp/>be<sp/>marked<sp/>as<sp/>well,<sp/>however,<sp/>since<sp/>undefined_cat<sp/>has<sp/>covered<sp/>undefined<sp/>category,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>handle<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="class_batch_l_i_s_a_1af21c99ed8a15fc79fae2debe76da6dd4" kindref="member">BatchLISA::GetDefaultCategories</ref>()<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>cats;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>cats.push_back(</highlight><highlight class="stringliteral">&quot;p<sp/>=<sp/>0.05&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>cats.push_back(</highlight><highlight class="stringliteral">&quot;p<sp/>=<sp/>0.01&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>cats.push_back(</highlight><highlight class="stringliteral">&quot;p<sp/>=<sp/>0.001&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>cats.push_back(</highlight><highlight class="stringliteral">&quot;p<sp/>=<sp/>0.0001&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cats;</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="class_batch_l_i_s_a_1a963b68a3a3772360cd04539fc17f29a8" kindref="member">BatchLISA::GetDefaultCutoffs</ref>()<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>cutoffs;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>cutoffs.push_back(0.05);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>cutoffs.push_back(0.01);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>cutoffs.push_back(0.001);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>cutoffs.push_back(0.0001);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cutoffs;</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="class_batch_l_i_s_a_1ab1d543fade2290fff4f48b4be2171e1f" kindref="member">BatchLISA::GetLocalSignificanceValues</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a35a6414f3ed4f44e5828e68bcc0f9160" kindref="member">sig_local_vec</ref>[idx];<sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="class_batch_l_i_s_a_1a64668148f4f1ed44c3ee726de14cfbd0" kindref="member">BatchLISA::GetClusterIndicators</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a48ff3a6e4742c47a97699d555ed44155" kindref="member">cluster_vec</ref>[idx];<sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="class_batch_l_i_s_a_1a258ee2b3d9694d11718c0c1fde55d497" kindref="member">BatchLISA::GetSigCatIndicators</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1ac7d1f7d2ef8d4e236c7c3df80773df5f" kindref="member">sig_cat_vec</ref>[idx];<sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="class_batch_l_i_s_a_1a5c150d16af001c658004c762c54a30ae" kindref="member">BatchLISA::GetNumNeighbors</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a8eee5f68e8274762ff9aa69ab4902d0f" kindref="member">nn_vec</ref>;<sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="class_batch_l_i_s_a_1a651ee834f2d0efc183f72361a478808c" kindref="member">BatchLISA::GetSpatialLagValues</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1aa25fa791b1d3cfb2c9dd1d3f3b8a3bf1" kindref="member">lag_vec</ref>[idx];<sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="class_batch_l_i_s_a_1ac56c5feca4a69226e04ece590847d2ff" kindref="member">BatchLISA::GetLISAValues</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1ae1592bab99cab0a3cb937fb0edccf184" kindref="member">lisa_vec</ref>[idx];<sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1ae13f7fd84d0a792c18125e5e3cc4efcc" kindref="member">BatchLISA::IsRowStandardize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a049f7565501a8242b3d5efa97932557a" kindref="member">row_standardize</ref>;<sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1ae78b2179938f8e1ed1223456da74c160" kindref="member">BatchLISA::SetRowStandardize</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rowStandardize)<sp/>{<sp/><ref refid="class_batch_l_i_s_a_1a049f7565501a8242b3d5efa97932557a" kindref="member">row_standardize</ref><sp/>=<sp/>rowStandardize;<sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a2179250821133e59d7d68acec85c2f4c" kindref="member">BatchLISA::GetNumThreads</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a772e893eb6919dbb8a904d2b9cc293cb" kindref="member">nCPUs</ref>;<sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a9718111864edefff4faba880bef21704" kindref="member">BatchLISA::SetNumThreads</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_threads)<sp/>{<sp/><ref refid="class_batch_l_i_s_a_1a772e893eb6919dbb8a904d2b9cc293cb" kindref="member">nCPUs</ref><sp/>=<sp/>n_threads;<sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="class_batch_l_i_s_a_1a1ffb1f2bc4c7ac2aa1e58135aa9e1209" kindref="member">BatchLISA::GetLabels</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a25b06a3d5d9d1ef551607671d10a352f" kindref="member">labels</ref>;<sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="class_batch_l_i_s_a_1afc2fbced26a6154cabdd82ce68fe21e0" kindref="member">BatchLISA::GetColors</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_batch_l_i_s_a_1a7b23e882e584108cd4748fee1f034d42" kindref="member">colors</ref>;<sp/>}</highlight></codeline>
    </programlisting>
    <location file="/Users/xun/github/geoda-lib/src/cpp/lisa/BatchLISA.cpp"/>
  </compounddef>
</doxygen>
