<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="contiguity-weights_8cpp" kind="file" language="C++">
    <compoundname>contiguity-weights.cpp</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">boost/geometry/geometries/box.hpp</includes>
    <includes local="no">boost/geometry/index/rtree.hpp</includes>
    <includes local="no">boost/unordered_map.hpp</includes>
    <includes local="no">iostream</includes>
    <includes local="no">set</includes>
    <includes local="no">stack</includes>
    <includes local="no">vector</includes>
    <includes refid="geometry_8h" local="yes">geometry/geometry.h</includes>
    <includes refid="gal_8h" local="yes">weights/gal.h</includes>
    <includes refid="partition_8h" local="yes">weights/partition.h</includes>
    <includes refid="weights_2_weights_8h" local="yes">weights/weights.h</includes>
    <includes refid="jc__voronoi_8h" local="yes">utils/jc_voronoi.h</includes>
    <incdepgraph>
      <node id="10">
        <label>geometry/geometry.h</label>
        <link refid="geometry_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>utils/jc_voronoi.h</label>
        <link refid="jc__voronoi_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/xun/github/geoda-lib/src/cpp/weights/contiguity-weights.cpp</label>
        <link refid="contiguity-weights_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>weights/gal.h</label>
        <link refid="gal_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>weights/partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>weights/weights.h</label>
        <link refid="weights_2_weights_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="20">
        <label>assert.h</label>
      </node>
      <node id="11">
        <label>boost/geometry.hpp</label>
      </node>
      <node id="3">
        <label>boost/geometry/geometries/box.hpp</label>
      </node>
      <node id="4">
        <label>boost/geometry/index/rtree.hpp</label>
      </node>
      <node id="5">
        <label>boost/unordered_map.hpp</label>
      </node>
      <node id="15">
        <label>functional</label>
      </node>
      <node id="6">
        <label>iostream</label>
      </node>
      <node id="12">
        <label>limits</label>
      </node>
      <node id="16">
        <label>map</label>
      </node>
      <node id="21">
        <label>math.h</label>
      </node>
      <node id="7">
        <label>set</label>
      </node>
      <node id="8">
        <label>stack</label>
      </node>
      <node id="22">
        <label>stddef.h</label>
      </node>
      <node id="23">
        <label>stdlib.h</label>
      </node>
      <node id="13">
        <label>string</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_point2_d" prot="public">Point2D</innerclass>
    <innerclass refid="struct_point2_d_hash" prot="public">Point2DHash</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="contiguity-weights_8cpp_1a0a844252781ff4bf094a1a15c5c182bd" prot="public" static="no">
        <name>JC_VORONOI_IMPLEMENTATION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/weights/contiguity-weights.cpp" line="15" column="9" bodyfile="/Users/xun/github/geoda-lib/src/cpp/weights/contiguity-weights.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="contiguity-weights_8cpp_1a14fed8abcf4a849da385ab679409c055" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string jcv_point_str</definition>
        <argsstring>(const jcv_point &amp;pt)</argsstring>
        <name>jcv_point_str</name>
        <param>
          <type>const <ref refid="jc__voronoi_8h_1a7f4dcdffe3318ec1307e9b680ce05fe4" kindref="member">jcv_point</ref> &amp;</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/weights/contiguity-weights.cpp" line="37" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/weights/contiguity-weights.cpp" bodystart="37" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="contiguity-weights_8cpp_1affbe65d01d3c099de51da6d4b44d9734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string jcv_edge_str</definition>
        <argsstring>(const jcv_graphedge *edge)</argsstring>
        <name>jcv_edge_str</name>
        <param>
          <type>const <ref refid="jc__voronoi_8h_1a2eb469b4802dbc3964403c88c4c2cbd6" kindref="member">jcv_graphedge</ref> *</type>
          <declname>edge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/weights/contiguity-weights.cpp" line="43" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/weights/contiguity-weights.cpp" bodystart="43" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="contiguity-weights_8cpp_1a7c211c4277171ed6519dbf4d41b338af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void make_higher_ord_contiguity</definition>
        <argsstring>(size_t distance, size_t obs, geoda::GalElement *weights, bool cummulative)</argsstring>
        <name>make_higher_ord_contiguity</name>
        <param>
          <type>size_t</type>
          <declname>distance</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>obs</declname>
        </param>
        <param>
          <type><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref> *</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cummulative</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add higher order neighbors up to (and including) distance. If cummulative true, then include lower orders as well. Otherwise, only include elements on frontier. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/weights/contiguity-weights.cpp" line="77" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/weights/contiguity-weights.cpp" bodystart="77" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="contiguity-weights_8cpp_1a35460b853c89ae48ea55ca85d9e1569a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref> *</type>
        <definition>geoda::GalElement * neighbors_to_gal</definition>
        <argsstring>(std::vector&lt; std::set&lt; int &gt; &gt; &amp;nbr_map)</argsstring>
        <name>neighbors_to_gal</name>
        <param>
          <type>std::vector&lt; std::set&lt; int &gt; &gt; &amp;</type>
          <declname>nbr_map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/weights/contiguity-weights.cpp" line="117" column="19" bodyfile="/Users/xun/github/geoda-lib/src/cpp/weights/contiguity-weights.cpp" bodystart="117" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="contiguity-weights_8cpp_1a9678c4cad67849fdd8aa1d6b0520a30f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; unsigned int &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; unsigned int &gt; &gt; convert_to_weights</definition>
        <argsstring>(const std::vector&lt; std::set&lt; int &gt; &gt; &amp;nbr_map, unsigned int order_contiguity=1, bool include_lower_order=false)</argsstring>
        <name>convert_to_weights</name>
        <param>
          <type>const std::vector&lt; std::set&lt; int &gt; &gt; &amp;</type>
          <declname>nbr_map</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>order_contiguity</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>include_lower_order</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/weights/contiguity-weights.cpp" line="132" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/weights/contiguity-weights.cpp" bodystart="132" bodyend="163"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/geometry/geometries/box.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/geometry/index/rtree.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/unordered_map.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stack&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="geometry_8h" kindref="compound">geometry/geometry.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gal_8h" kindref="compound">weights/gal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="partition_8h" kindref="compound">weights/partition.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="weights_2_weights_8h" kindref="compound">weights/weights.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JC_VORONOI_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>wish<sp/>to<sp/>use<sp/>doubles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>JCV_REAL_TYPE<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>JCV_ATAN2<sp/>atan2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>JCV_FLT_MAX<sp/>1.7976931348623157E+30</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="jc__voronoi_8h" kindref="compound">utils/jc_voronoi.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="struct_point2_d" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_point2_d" kindref="compound">Point2D</ref><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_point2_d_1a42fcad8b63853b1136e6207ace6d555e" kindref="member">x</ref>,<sp/><ref refid="struct_point2_d_1a55747be726950fdcba27c1ad032bfdf1" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_point2_d_1a45a0f385548a34db126e25fa774057e5" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_point2_d" kindref="compound">Point2D</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_point2_d_1a42fcad8b63853b1136e6207ace6d555e" kindref="member">x</ref><sp/>==<sp/>other.<ref refid="struct_point2_d_1a42fcad8b63853b1136e6207ace6d555e" kindref="member">x</ref><sp/>&amp;&amp;<sp/><ref refid="struct_point2_d_1a55747be726950fdcba27c1ad032bfdf1" kindref="member">y</ref><sp/>==<sp/>other.<ref refid="struct_point2_d_1a55747be726950fdcba27c1ad032bfdf1" kindref="member">y</ref>;<sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal">};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Custom<sp/>hash<sp/>function<sp/>for<sp/>Point2D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="struct_point2_d_hash" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_point2_d_hash" kindref="compound">Point2DHash</ref><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>std::size_t<sp/><ref refid="struct_point2_d_hash_1ac4347326d68035772fc25c4a84dbe083" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_point2_d" kindref="compound">Point2D</ref>&amp;<sp/>p)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Combine<sp/>hashes<sp/>of<sp/>x<sp/>and<sp/>y<sp/>using<sp/>bit<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>h1<sp/>=<sp/>std::hash&lt;double&gt;{}(p.<ref refid="struct_point2_d_1a42fcad8b63853b1136e6207ace6d555e" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>h2<sp/>=<sp/>std::hash&lt;double&gt;{}(p.<ref refid="struct_point2_d_1a55747be726950fdcba27c1ad032bfdf1" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h1<sp/>^<sp/>(h2<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal">};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">std::string<sp/><ref refid="contiguity-weights_8cpp_1a14fed8abcf4a849da385ab679409c055" kindref="member">jcv_point_str</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="jc__voronoi_8h_1a7f4dcdffe3318ec1307e9b680ce05fe4" kindref="member">jcv_point</ref>&amp;<sp/>pt)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/>pt.<ref refid="struct__jcv__point_1a2bed5e1c6148d676bb38d0616810c4f9" kindref="member">x</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pt.<ref refid="struct__jcv__point_1af568d5018baddc1dd1201cd188af39f8" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">std::string<sp/><ref refid="contiguity-weights_8cpp_1affbe65d01d3c099de51da6d4b44d9734" kindref="member">jcv_edge_str</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="jc__voronoi_8h_1a2eb469b4802dbc3964403c88c4c2cbd6" kindref="member">jcv_graphedge</ref>*<sp/>edge)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><ref refid="jc__voronoi_8h_1adf3f9d7c9b8b63b4537db4843afc562f" kindref="member">jcv_real</ref><sp/>x0<sp/>=<sp/>std::min(edge-&gt;<ref refid="struct__jcv__graphedge_1aa471bf8739860ecfa6c56343ee33eff3" kindref="member">pos</ref>[0].<ref refid="struct__jcv__point_1a2bed5e1c6148d676bb38d0616810c4f9" kindref="member">x</ref>,<sp/>edge-&gt;<ref refid="struct__jcv__graphedge_1aa471bf8739860ecfa6c56343ee33eff3" kindref="member">pos</ref>[0].<ref refid="struct__jcv__point_1a2bed5e1c6148d676bb38d0616810c4f9" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><ref refid="jc__voronoi_8h_1adf3f9d7c9b8b63b4537db4843afc562f" kindref="member">jcv_real</ref><sp/>x1<sp/>=<sp/>std::max(edge-&gt;<ref refid="struct__jcv__graphedge_1aa471bf8739860ecfa6c56343ee33eff3" kindref="member">pos</ref>[1].<ref refid="struct__jcv__point_1a2bed5e1c6148d676bb38d0616810c4f9" kindref="member">x</ref>,<sp/>edge-&gt;<ref refid="struct__jcv__graphedge_1aa471bf8739860ecfa6c56343ee33eff3" kindref="member">pos</ref>[1].<ref refid="struct__jcv__point_1a2bed5e1c6148d676bb38d0616810c4f9" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="jc__voronoi_8h_1adf3f9d7c9b8b63b4537db4843afc562f" kindref="member">jcv_real</ref><sp/>y0<sp/>=<sp/>std::min(edge-&gt;<ref refid="struct__jcv__graphedge_1aa471bf8739860ecfa6c56343ee33eff3" kindref="member">pos</ref>[0].<ref refid="struct__jcv__point_1af568d5018baddc1dd1201cd188af39f8" kindref="member">y</ref>,<sp/>edge-&gt;<ref refid="struct__jcv__graphedge_1aa471bf8739860ecfa6c56343ee33eff3" kindref="member">pos</ref>[0].<ref refid="struct__jcv__point_1af568d5018baddc1dd1201cd188af39f8" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><ref refid="jc__voronoi_8h_1adf3f9d7c9b8b63b4537db4843afc562f" kindref="member">jcv_real</ref><sp/>y1<sp/>=<sp/>std::max(edge-&gt;<ref refid="struct__jcv__graphedge_1aa471bf8739860ecfa6c56343ee33eff3" kindref="member">pos</ref>[1].<ref refid="struct__jcv__point_1af568d5018baddc1dd1201cd188af39f8" kindref="member">y</ref>,<sp/>edge-&gt;<ref refid="struct__jcv__graphedge_1aa471bf8739860ecfa6c56343ee33eff3" kindref="member">pos</ref>[1].<ref refid="struct__jcv__point_1af568d5018baddc1dd1201cd188af39f8" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>y0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>y1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacegeoda_1a233abf7e4dc61081091d7df14a06dfde" kindref="member">geoda::points_equals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="geometry_8h_1a4955b56f005be86f2d38486958dba53b" kindref="member">point_type</ref>&amp;<sp/>p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="geometry_8h_1a4955b56f005be86f2d38486958dba53b" kindref="member">point_type</ref>&amp;<sp/>p2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>precision_threshold)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(fabs(p1.get&lt;0&gt;()<sp/>-<sp/>p2.get&lt;0&gt;())<sp/>&lt;=<sp/>precision_threshold)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fabs(p1.get&lt;1&gt;()<sp/>-<sp/>p2.get&lt;1&gt;())<sp/>&lt;=<sp/>precision_threshold);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacegeoda_1a3421fa10f62574abd53248505424dcdc" kindref="member">geoda::bbox_intersects</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="geometry_8h_1a7d32eb4d5272ffdaf1a4c210691779fb" kindref="member">box_type</ref>&amp;<sp/>b1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="geometry_8h_1a7d32eb4d5272ffdaf1a4c210691779fb" kindref="member">box_type</ref>&amp;<sp/>b2)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>min_corner<sp/>and<sp/>max_corner<sp/>of<sp/>b1<sp/>intersects<sp/>with<sp/>min_corner<sp/>and<sp/>max_corner<sp/>of<sp/>b2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1_min<sp/>=<sp/>b1.min_corner().get&lt;0&gt;();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1_max<sp/>=<sp/>b1.max_corner().get&lt;0&gt;();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1_min<sp/>=<sp/>b1.min_corner().get&lt;1&gt;();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1_max<sp/>=<sp/>b1.max_corner().get&lt;1&gt;();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x2_min<sp/>=<sp/>b2.min_corner().get&lt;0&gt;();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x2_max<sp/>=<sp/>b2.max_corner().get&lt;0&gt;();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y2_min<sp/>=<sp/>b2.min_corner().get&lt;1&gt;();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y2_max<sp/>=<sp/>b2.max_corner().get&lt;1&gt;();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>not_intersects<sp/>=<sp/>(x1_min<sp/>&gt;<sp/>x2_max<sp/>||<sp/>x1_max<sp/>&lt;<sp/>x2_min<sp/>||<sp/>y1_min<sp/>&gt;<sp/>y2_max<sp/>||<sp/>y1_max<sp/>&lt;<sp/>y2_min);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!not_intersects;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="contiguity-weights_8cpp_1a7c211c4277171ed6519dbf4d41b338af" kindref="member">make_higher_ord_contiguity</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>distance,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>obs,<sp/><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref>*<sp/>weights,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cummulative)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obs<sp/>&lt;<sp/>1<sp/>||<sp/>distance<sp/>&lt;=<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;unsigned<sp/>int&gt;&gt;<sp/>X(obs);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>obs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::set&lt;unsigned<sp/>int&gt;&gt;<sp/>n_at_d(distance<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>n_at_d[0].insert(i);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0,<sp/>sz<sp/>=<sp/>weights[i].Size();<sp/>j<sp/>&lt;<sp/>sz;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n_at_d[1].insert(weights[i][j]);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>2;<sp/>d<sp/>&lt;=<sp/>distance;<sp/>++d)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::set&lt;unsigned<sp/>int&gt;::const_iterator<sp/>it<sp/>=<sp/>n_at_d[d<sp/>-<sp/>1].begin();<sp/>it<sp/>!=<sp/>n_at_d[d<sp/>-<sp/>1].end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0,<sp/>sz<sp/>=<sp/>weights[*it].Size();<sp/>j<sp/>&lt;<sp/>sz;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbr<sp/>=<sp/>weights[*it][j];</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_at_d[d<sp/>-<sp/>1].find(nbr)<sp/>==<sp/>n_at_d[d<sp/>-<sp/>1].end()<sp/>&amp;&amp;<sp/>n_at_d[d<sp/>-<sp/>2].find(nbr)<sp/>==<sp/>n_at_d[d<sp/>-<sp/>2].end())<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_at_d[d].insert(nbr);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz_Xi<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>(cummulative<sp/>?<sp/>1<sp/>:<sp/>distance);<sp/>d<sp/>&lt;=<sp/>distance;<sp/>++d)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sz_Xi<sp/>+=<sp/>n_at_d[d].size();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>X[i].resize(sz_Xi);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>(cummulative<sp/>?<sp/>1<sp/>:<sp/>distance);<sp/>d<sp/>&lt;=<sp/>distance;<sp/>++d)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::set&lt;unsigned<sp/>int&gt;::const_iterator<sp/>it<sp/>=<sp/>n_at_d[d].begin();<sp/>it<sp/>!=<sp/>n_at_d[d].end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X[i][cnt++]<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>sort(X[i].begin(),<sp/>X[i].end(),<sp/>std::greater&lt;unsigned<sp/>int&gt;());</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>obs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>weights[i].<ref refid="classgeoda_1_1_gal_element_1a062a8436c7aa13ad72479e0e84933941" kindref="member">SetSizeNbrs</ref>(X[i].size());</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0,<sp/>sz<sp/>=<sp/>X[i].size();<sp/>j<sp/>&lt;<sp/>sz;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>weights[i].<ref refid="classgeoda_1_1_gal_element_1a3c01c70b047ac2dbd712951b4f28bb60" kindref="member">SetNbr</ref>(j,<sp/>X[i][j]);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref>*<sp/><ref refid="contiguity-weights_8cpp_1a35460b853c89ae48ea55ca85d9e1569a" kindref="member">neighbors_to_gal</ref>(std::vector&lt;std::set&lt;int&gt;&gt;&amp;<sp/>nbr_map)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbr_map.size()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref>*<sp/>gal<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref>[nbr_map.size()];</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gal)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>iend<sp/>=<sp/>nbr_map.size();<sp/>i<sp/>&lt;<sp/>iend;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>gal[i].<ref refid="classgeoda_1_1_gal_element_1a062a8436c7aa13ad72479e0e84933941" kindref="member">SetSizeNbrs</ref>(nbr_map[i].size());</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::set&lt;int&gt;::iterator<sp/>it<sp/>=<sp/>nbr_map[i].begin();<sp/>it<sp/>!=<sp/>nbr_map[i].end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gal[i].<ref refid="classgeoda_1_1_gal_element_1a3c01c70b047ac2dbd712951b4f28bb60" kindref="member">SetNbr</ref>(cnt++,<sp/>*it);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gal;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>New<sp/>utility<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">std::vector&lt;std::vector&lt;unsigned<sp/>int&gt;&gt;<sp/><ref refid="contiguity-weights_8cpp_1a9678c4cad67849fdd8aa1d6b0520a30f" kindref="member">convert_to_weights</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::set&lt;int&gt;&gt;&amp;<sp/>nbr_map,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order_contiguity<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>include_lower_order<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_obs<sp/>=<sp/>nbr_map.size();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>GAL<sp/>from<sp/>neighbor<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref>*<sp/>gal<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref>[num_obs];</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_obs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>gal[i].<ref refid="classgeoda_1_1_gal_element_1a062a8436c7aa13ad72479e0e84933941" kindref="member">SetSizeNbrs</ref>(nbr_map[i].size());</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbr<sp/>:<sp/>nbr_map[i])<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gal[i].<ref refid="classgeoda_1_1_gal_element_1a3c01c70b047ac2dbd712951b4f28bb60" kindref="member">SetNbr</ref>(cnt++,<sp/>nbr);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>higher<sp/>order<sp/>contiguity<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order_contiguity<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="contiguity-weights_8cpp_1a7c211c4277171ed6519dbf4d41b338af" kindref="member">make_higher_ord_contiguity</ref>(order_contiguity,<sp/>num_obs,<sp/>gal,<sp/>include_lower_order);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>to<sp/>result<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;unsigned<sp/>int&gt;&gt;<sp/>result_vec(num_obs);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_obs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>result_vec[i].reserve(gal[i].Size());</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>gal[i].<ref refid="classgeoda_1_1_gal_element_1a9e32d1e75feb41f219804cbef680c2a1" kindref="member">Size</ref>();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result_vec[i].push_back(gal[i][j]);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>gal;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result_vec;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">std::vector&lt;std::vector&lt;unsigned<sp/>int&gt;&gt;<sp/><ref refid="namespacegeoda_1a12bde1832774f498f050b0626d625c56" kindref="member">geoda::simple_polygon_queen_weights</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgeoda_1_1_geometry_collection" kindref="compound">geoda::GeometryCollection</ref>&amp;<sp/>geoms,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order_contiguity,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>include_lower_order)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;simple_polygon_queen_weights<sp/>1&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>dictionary<sp/>using<sp/>the<sp/>points<sp/>of<sp/>the<sp/>polygon<sp/>as<sp/>keys<sp/>and<sp/>the<sp/>polygon<sp/>indexes<sp/>as<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>boost::unordered_map&lt;double,<sp/>boost::unordered_map&lt;double,<sp/>std::set&lt;int&gt;&gt;&gt;<sp/>point_to_polygon;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>int&gt;&amp;<sp/>sizes<sp/>=<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1ae918c6023877c8b4b0d4b2cae0cd44d7" kindref="member">sizes</ref>;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>int&gt;&amp;<sp/>parts<sp/>=<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1a6b093922e9b1b191b4c2f865e030e067" kindref="member">parts</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>part_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_points<sp/>=<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1aa4b142edec07a60c3ccebebd75ec1807" kindref="member">x</ref>.size();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_all_parts<sp/>=<sp/>parts.size();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_polys<sp/>=<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1ac84ddf06ab4559e822276f376a24f41f" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_polys;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_parts<sp/>=<sp/>sizes[i];</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inner_parts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>part_index;<sp/>j<sp/>&lt;<sp/>part_index<sp/>+<sp/>num_parts;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>parts[j];</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>j<sp/>==<sp/>num_all_parts<sp/>-<sp/>1<sp/>?<sp/>num_points<sp/>:<sp/>parts[j<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>start;<sp/>k<sp/>&lt;<sp/>end;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lat<sp/>=<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1a21cd35c83e2c8f83c3cd9ca918a39d76" kindref="member">y</ref>[k],<sp/>lng<sp/>=<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1aa4b142edec07a60c3ccebebd75ec1807" kindref="member">x</ref>[k];</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point_to_polygon[lng][lat].insert(i);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>offset<sp/>the<sp/>index<sp/>to<sp/>visit<sp/>parts[]:<sp/>an<sp/>empty<sp/>polygon<sp/>(num_parts==0)<sp/>should<sp/>offset<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset_part<sp/>=<sp/>num_parts<sp/>==<sp/>0<sp/>?<sp/>1<sp/>:<sp/>num_parts;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>part_index<sp/>+=<sp/>offset_part;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;simple_polygon_queen_weights<sp/>2&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>neighbor<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>std::vector&lt;std::set&lt;int&gt;&gt;<sp/>nbr_map(geoms.<ref refid="classgeoda_1_1_geometry_collection_1ac84ddf06ab4559e822276f376a24f41f" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iterate<sp/>through<sp/>the<sp/>point_to_polygon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>boost::unordered_map&lt;double,<sp/>boost::unordered_map&lt;double,<sp/>std::set&lt;int&gt;&gt;&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>point_to_polygon.begin();<sp/>it<sp/>!=<sp/>point_to_polygon.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::unordered_map&lt;double,<sp/>std::set&lt;int&gt;&gt;&amp;<sp/>lng_to_polys<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::unordered_map&lt;double,<sp/>std::set&lt;int&gt;&gt;::iterator<sp/>jt;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(jt<sp/>=<sp/>lng_to_polys.begin();<sp/>jt<sp/>!=<sp/>lng_to_polys.end();<sp/>++jt)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;int&gt;&amp;<sp/>polys<sp/>=<sp/>jt-&gt;second;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterator<sp/>through<sp/>the<sp/>polys<sp/>from<sp/>begin<sp/>to<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::set&lt;int&gt;::iterator<sp/>kt<sp/>=<sp/>polys.begin();<sp/>kt<sp/>!=<sp/>polys.end();<sp/>++kt)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterator<sp/>through<sp/>polys<sp/>from<sp/>kt+1<sp/>to<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::set&lt;int&gt;::iterator<sp/>lt<sp/>=<sp/>std::next(kt);<sp/>lt<sp/>!=<sp/>polys.end();<sp/>++lt)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*kt<sp/>!=<sp/>*lt)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbr_map[*kt].insert(*lt);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbr_map[*lt].insert(*kt);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;simple_polygon_queen_weights<sp/>3&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="contiguity-weights_8cpp_1a9678c4cad67849fdd8aa1d6b0520a30f" kindref="member">convert_to_weights</ref>(nbr_map,<sp/>order_contiguity,<sp/>include_lower_order);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">std::vector&lt;std::vector&lt;unsigned<sp/>int&gt;&gt;<sp/><ref refid="namespacegeoda_1a129eb61ef7a7b08339d9d5193fa10355" kindref="member">geoda::simple_polygon_rook_weights</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgeoda_1_1_geometry_collection" kindref="compound">geoda::GeometryCollection</ref>&amp;<sp/>geoms,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order_contiguity,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>include_lower_order)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>implementation<sp/>is<sp/>for<sp/>rook<sp/>contiguity<sp/>weights<sp/>when<sp/>precision_threshold<sp/>is<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>means<sp/>the<sp/>intersection<sp/>between<sp/>polygons<sp/>is<sp/>tested<sp/>by<sp/>two<sp/>polygons<sp/>sharing<sp/>an<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>algorithm<sp/>should<sp/>be<sp/>simple<sp/>by<sp/>checking<sp/>if<sp/>any<sp/>edge<sp/>is<sp/>shared<sp/>by<sp/>two<sp/>polygons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;std::string,<sp/>std::set&lt;unsigned<sp/>int&gt;&gt;<sp/>edge_to_polygon;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1ac84ddf06ab4559e822276f376a24f41f" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1a7451e84dee62efec3756bdab2f04fe89" kindref="member">get_num_points</ref>(i);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="geometry_8h_1a4955b56f005be86f2d38486958dba53b" kindref="member">point_type</ref>&amp;<sp/>pt1<sp/>=<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1a56aaceca9602b4488fb7d12274429482" kindref="member">get_point</ref>(i,<sp/>j);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>next_j<sp/>=<sp/>(j<sp/>+<sp/>1)<sp/>%<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1a7451e84dee62efec3756bdab2f04fe89" kindref="member">get_num_points</ref>(i);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="geometry_8h_1a4955b56f005be86f2d38486958dba53b" kindref="member">point_type</ref>&amp;<sp/>pt2<sp/>=<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1a56aaceca9602b4488fb7d12274429482" kindref="member">get_point</ref>(i,<sp/>next_j);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>pt1.get&lt;0&gt;()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pt1.get&lt;1&gt;()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pt2.get&lt;0&gt;()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pt2.get&lt;1&gt;();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edge_to_polygon[ss.str()].insert(i);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>neighbor<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>std::vector&lt;std::set&lt;int&gt;&gt;<sp/>nbr_map(geoms.<ref refid="classgeoda_1_1_geometry_collection_1ac84ddf06ab4559e822276f376a24f41f" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iterate<sp/>through<sp/>the<sp/>edge_to_polygon,<sp/>intersected<sp/>polygons<sp/>are<sp/>neighbors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>edge_polys<sp/>:<sp/>edge_to_polygon)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::set&lt;unsigned<sp/>int&gt;&amp;<sp/>polys<sp/>=<sp/>edge_polys.second;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="contiguity-weights_8cpp_1a9678c4cad67849fdd8aa1d6b0520a30f" kindref="member">convert_to_weights</ref>(nbr_map,<sp/>order_contiguity,<sp/>include_lower_order);</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">std::vector&lt;std::vector&lt;unsigned<sp/>int&gt;&gt;<sp/><ref refid="namespacegeoda_1ac1bb11a3540a063bbd29b42b21d5a6ad" kindref="member">geoda::polygon_contiguity_weights</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgeoda_1_1_geometry_collection" kindref="compound">geoda::GeometryCollection</ref>&amp;<sp/>geoms,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_queen,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>precision_threshold,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order_contiguity,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>include_lower_order)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision_threshold<sp/>==<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_queen<sp/>?<sp/><ref refid="namespacegeoda_1a12bde1832774f498f050b0626d625c56" kindref="member">simple_polygon_queen_weights</ref>(geoms,<sp/>order_contiguity,<sp/>include_lower_order)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespacegeoda_1a129eb61ef7a7b08339d9d5193fa10355" kindref="member">simple_polygon_rook_weights</ref>(geoms,<sp/>order_contiguity,<sp/>include_lower_order);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacegeoda_1a7d1305e8d33fe3daf63e6fb9dd754c03" kindref="member">polygon_contiguity_weights_threshold</ref>(geoms,<sp/>is_queen,<sp/>precision_threshold,<sp/>order_contiguity,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_lower_order);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">std::vector&lt;std::vector&lt;unsigned<sp/>int&gt;&gt;<sp/><ref refid="namespacegeoda_1a7d1305e8d33fe3daf63e6fb9dd754c03" kindref="member">geoda::polygon_contiguity_weights_threshold</ref>(</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgeoda_1_1_geometry_collection" kindref="compound">geoda::GeometryCollection</ref>&amp;<sp/>geoms,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_queen,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>precision_threshold,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order_contiguity,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>include_lower_order)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>of<sp/>records<sp/>of<sp/>geometry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gRecords<sp/>=<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1ac84ddf06ab4559e822276f376a24f41f" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bounding<sp/>box<sp/>for<sp/>the<sp/>entire<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>partition<sp/>constructed<sp/>on<sp/>lower(x)<sp/>and<sp/>upper(x)<sp/>for<sp/>each<sp/>polygon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><ref refid="classgeoda_1_1_base_partition" kindref="compound">geoda::BasePartition</ref><sp/>gMinX,<sp/>gMaxX;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>partition<sp/>constructed<sp/>on<sp/>y<sp/>for<sp/>each<sp/>polygon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><ref refid="classgeoda_1_1_partition_m" kindref="compound">geoda::PartitionM</ref>*<sp/>gYPartition;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>bounding<sp/>box<sp/>of<sp/>geoms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>shp_min_x,<sp/>shp_max_x,<sp/>shp_min_y,<sp/>shp_max_y;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>min<sp/>and<sp/>max<sp/>value<sp/>from<sp/>geoms.x<sp/>and<sp/>geoms.y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>shp_min_x<sp/>=<sp/>*std::min_element(geoms.<ref refid="classgeoda_1_1_geometry_collection_1aa4b142edec07a60c3ccebebd75ec1807" kindref="member">x</ref>.begin(),<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1aa4b142edec07a60c3ccebebd75ec1807" kindref="member">x</ref>.end());</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>shp_max_x<sp/>=<sp/>*std::max_element(geoms.<ref refid="classgeoda_1_1_geometry_collection_1aa4b142edec07a60c3ccebebd75ec1807" kindref="member">x</ref>.begin(),<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1aa4b142edec07a60c3ccebebd75ec1807" kindref="member">x</ref>.end());</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>shp_min_y<sp/>=<sp/>*std::min_element(geoms.<ref refid="classgeoda_1_1_geometry_collection_1a21cd35c83e2c8f83c3cd9ca918a39d76" kindref="member">y</ref>.begin(),<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1a21cd35c83e2c8f83c3cd9ca918a39d76" kindref="member">y</ref>.end());</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>shp_max_y<sp/>=<sp/>*std::max_element(geoms.<ref refid="classgeoda_1_1_geometry_collection_1a21cd35c83e2c8f83c3cd9ca918a39d76" kindref="member">y</ref>.begin(),<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1a21cd35c83e2c8f83c3cd9ca918a39d76" kindref="member">y</ref>.end());</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>shp_x_len<sp/>=<sp/>shp_max_x<sp/>-<sp/>shp_min_x;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>shp_y_len<sp/>=<sp/>shp_max_y<sp/>-<sp/>shp_min_y;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gx,<sp/>gy,<sp/>cnt,<sp/>total<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>number<sp/>of<sp/>partitions<sp/>is<sp/>divided<sp/>by<sp/>8<sp/>and<sp/>add<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>gx<sp/>=<sp/>gRecords<sp/>/<sp/>8<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>gMinX.<ref refid="classgeoda_1_1_base_partition_1a574ad51f5c1ba2c7d05708c96ea3ed4c" kindref="member">alloc</ref>(gRecords,<sp/>gx,<sp/>shp_x_len);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>gMaxX.<ref refid="classgeoda_1_1_base_partition_1a574ad51f5c1ba2c7d05708c96ea3ed4c" kindref="member">alloc</ref>(gRecords,<sp/>gx,<sp/>shp_x_len);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>gRecords;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="geometry_8h_1a7d32eb4d5272ffdaf1a4c210691779fb" kindref="member">box_type</ref><sp/>box;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1a3e6ecea3fd57812663972ef52119ca18" kindref="member">get_bbox</ref>(cnt,<sp/>box);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>gMinX.<ref refid="classgeoda_1_1_base_partition_1a07703330c3c26bdd0fae7bf766df1e1c" kindref="member">include</ref>(cnt,<sp/>box.min_corner().get&lt;0&gt;()<sp/>-<sp/>shp_min_x);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>gMaxX.<ref refid="classgeoda_1_1_base_partition_1a07703330c3c26bdd0fae7bf766df1e1c" kindref="member">include</ref>(cnt,<sp/>box.max_corner().get&lt;0&gt;()<sp/>-<sp/>shp_min_x);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>gy<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sqrt(gRecords)<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>gYPartition<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classgeoda_1_1_partition_m" kindref="compound">geoda::PartitionM</ref>(gRecords,<sp/>gy,<sp/>shp_y_len);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>gRecords;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="geometry_8h_1a7d32eb4d5272ffdaf1a4c210691779fb" kindref="member">box_type</ref><sp/>box;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1a3e6ecea3fd57812663972ef52119ca18" kindref="member">get_bbox</ref>(cnt,<sp/>box);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lwr<sp/>=<sp/>box.min_corner().get&lt;1&gt;()<sp/>-<sp/>shp_min_y;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>upr<sp/>=<sp/>box.max_corner().get&lt;1&gt;()<sp/>-<sp/>shp_min_y;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gYPartition-&gt;<ref refid="classgeoda_1_1_partition_m_1afc997ec048fa2a93f237ddfd2681fb34" kindref="member">initIx</ref>(cnt,<sp/>lwr,<sp/>upr);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>total<sp/>=<sp/>gYPartition-&gt;<ref refid="classgeoda_1_1_partition_m_1ab4ba8539e65970cad223c6f1f06c6b55" kindref="member">Sum</ref>();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(total<sp/>&gt;<sp/>gRecords<sp/>*<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>gYPartition;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gy<sp/>=<sp/>gy<sp/>/<sp/>2<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(total<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>curr;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>std::vector&lt;std::set&lt;int&gt;&gt;<sp/>nbr_map(gRecords);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>std::stack&lt;unsigned<sp/>int&gt;<sp/>neighbors,<sp/>related;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step<sp/>=<sp/>0;<sp/>step<sp/>&lt;<sp/>gMinX.<ref refid="classgeoda_1_1_base_partition_1a46790c26fe4814a6d9edaab0c998a01e" kindref="member">Cells</ref>();<sp/>++step)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>include<sp/>all<sp/>elements<sp/>from<sp/>xmin[step]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(curr<sp/>=<sp/>gMinX.<ref refid="classgeoda_1_1_base_partition_1ab1f2537ef31a8c112f8ccb2b72ceffc3" kindref="member">first</ref>(step);<sp/>curr<sp/>!=<sp/>geoda::EMPTY_COUNT;<sp/>curr<sp/>=<sp/>gMinX.<ref refid="classgeoda_1_1_base_partition_1abd2ccb040b8905632f51cd39b8cce778" kindref="member">tail</ref>(curr))<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gYPartition-&gt;<ref refid="classgeoda_1_1_partition_m_1a645c3c4ba08e41e92a5a7cbb43ec6280" kindref="member">include</ref>(curr);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>each<sp/>element<sp/>in<sp/>xmax[step]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(curr<sp/>=<sp/>gMaxX.<ref refid="classgeoda_1_1_base_partition_1ab1f2537ef31a8c112f8ccb2b72ceffc3" kindref="member">first</ref>(step);<sp/>curr<sp/>!=<sp/>geoda::EMPTY_COUNT;<sp/>curr<sp/>=<sp/>gMaxX.<ref refid="classgeoda_1_1_base_partition_1abd2ccb040b8905632f51cd39b8cce778" kindref="member">tail</ref>(curr))<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classgeoda_1_1_polygon_partition" kindref="compound">geoda::PolygonPartition</ref><sp/>testPoly(geoms,<sp/>curr);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>testPoly.MakePartition();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>form<sp/>a<sp/>list<sp/>of<sp/>neighbors:<sp/>TODO,<sp/>find<sp/>the<sp/>potential<sp/>nearest<sp/>neighbors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cell<sp/>=<sp/>gYPartition-&gt;<ref refid="classgeoda_1_1_partition_m_1aef08f48e0d9bcd7765f25eb0866163da" kindref="member">lowest</ref>(curr);<sp/>cell<sp/>&lt;=<sp/>gYPartition-&gt;upmost(curr);<sp/>++cell)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>potential<sp/>=<sp/>gYPartition-&gt;<ref refid="classgeoda_1_1_partition_m_1a49726a98620e09eb4467ce6ce942a67b" kindref="member">first</ref>(cell);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(potential<sp/>!=<sp/>geoda::EMPTY_COUNT)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(potential<sp/>!=<sp/>curr)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neighbors.push(potential);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>potential<sp/>=<sp/>gYPartition-&gt;<ref refid="classgeoda_1_1_partition_m_1a90868506ba32d35186288cd5d7534151" kindref="member">tail</ref>(potential,<sp/>cell);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>each<sp/>potential<sp/>neighbor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!neighbors.empty())<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbr<sp/>=<sp/>neighbors.top();</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neighbors.pop();</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>bbox<sp/>of<sp/>geoms[curr]<sp/>and<sp/>geoms[nbr]<sp/>are<sp/>intersect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="geometry_8h_1a7d32eb4d5272ffdaf1a4c210691779fb" kindref="member">box_type</ref><sp/>curr_bbox,<sp/>nbr_bbox;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1a3e6ecea3fd57812663972ef52119ca18" kindref="member">get_bbox</ref>(curr,<sp/>curr_bbox);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1a3e6ecea3fd57812663972ef52119ca18" kindref="member">get_bbox</ref>(nbr,<sp/>nbr_bbox);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacegeoda_1a3421fa10f62574abd53248505424dcdc" kindref="member">geoda::bbox_intersects</ref>(curr_bbox,<sp/>nbr_bbox))<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classgeoda_1_1_polygon_partition" kindref="compound">geoda::PolygonPartition</ref><sp/>nbrPoly(geoms,<sp/>nbr);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(curr<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>nbr<sp/>==<sp/>0)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>sweep<sp/>with<sp/>testPoly<sp/>as<sp/>a<sp/>host<sp/>and<sp/>nbrPoly<sp/>as<sp/>a<sp/>guest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(testPoly.sweep(nbrPoly,<sp/>is_queen,<sp/>precision_threshold))<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>related.push(nbr);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!related.empty())<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbr<sp/>=<sp/>related.top();</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbr_map[curr].insert(nbr);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbr_map[nbr].insert(curr);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>related.pop();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>from<sp/>the<sp/>partition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gYPartition-&gt;<ref refid="classgeoda_1_1_partition_m_1a94eb3b57d20d6e93e4f2549f0cf6445b" kindref="member">remove</ref>(curr);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>MakeContiguity(main,<sp/>is_queen,<sp/>precision_threshold);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gYPartition)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>gYPartition;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>gYPartition<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="contiguity-weights_8cpp_1a9678c4cad67849fdd8aa1d6b0520a30f" kindref="member">convert_to_weights</ref>(nbr_map,<sp/>order_contiguity,<sp/>include_lower_order);</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal">std::vector&lt;std::vector&lt;unsigned<sp/>int&gt;&gt;<sp/><ref refid="namespacegeoda_1a92f374961f8bd3ee98ed6afad3ddeb71" kindref="member">geoda::point_contiguity_weights</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgeoda_1_1_geometry_collection" kindref="compound">geoda::GeometryCollection</ref>&amp;<sp/>geoms,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_queen,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>precision_threshold,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>order_contiguity,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>include_lower_order)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>centroids<sp/>to<sp/>calculate<sp/>contiguity<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_obs<sp/>=<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1ac84ddf06ab4559e822276f376a24f41f" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>x(num_obs);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>y(num_obs);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_obs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="geometry_8h_1a4955b56f005be86f2d38486958dba53b" kindref="member">point_type</ref><sp/>pt<sp/>=<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1ad1e00066be731ae77452566bd0214b56" kindref="member">get_centroid</ref>(i);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>bg::get&lt;0&gt;(pt);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>y[i]<sp/>=<sp/>bg::get&lt;1&gt;(pt);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>std::vector&lt;std::set&lt;int&gt;&gt;<sp/>nbr_map;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x_orig_min<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y_orig_min<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x_orig_max<sp/>=<sp/>-std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y_orig_max<sp/>=<sp/>-std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_obs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x[i]<sp/>&lt;<sp/>x_orig_min)<sp/>x_orig_min<sp/>=<sp/>x[i];</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x[i]<sp/>&gt;<sp/>x_orig_max)<sp/>x_orig_max<sp/>=<sp/>x[i];</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y[i]<sp/>&lt;<sp/>y_orig_min)<sp/>y_orig_min<sp/>=<sp/>y[i];</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y[i]<sp/>&gt;<sp/>y_orig_max)<sp/>y_orig_max<sp/>=<sp/>y[i];</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x_range<sp/>=<sp/>x_orig_max<sp/>-<sp/>x_orig_min;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y_range<sp/>=<sp/>y_orig_max<sp/>-<sp/>y_orig_min;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>2%<sp/>offset<sp/>to<sp/>the<sp/>bounding<sp/>rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bb_pad<sp/>=<sp/>0.02;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>data<sp/>has<sp/>been<sp/>translated<sp/>to<sp/>origin<sp/>and<sp/>scaled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bb_xmin<sp/>=<sp/>x_orig_min<sp/>-<sp/>x_range<sp/>*<sp/>bb_pad;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bb_xmax<sp/>=<sp/>x_orig_max<sp/>+<sp/>x_range<sp/>*<sp/>bb_pad;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bb_ymin<sp/>=<sp/>y_orig_min<sp/>-<sp/>y_range<sp/>*<sp/>bb_pad;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bb_ymax<sp/>=<sp/>y_orig_max<sp/>+<sp/>y_range<sp/>*<sp/>bb_pad;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>seed<sp/>sites</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><ref refid="jc__voronoi_8h_1a7f4dcdffe3318ec1307e9b680ce05fe4" kindref="member">jcv_point</ref>*<sp/>points<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="jc__voronoi_8h_1a7f4dcdffe3318ec1307e9b680ce05fe4" kindref="member">jcv_point</ref>[num_obs];</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_obs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>points[i].<ref refid="struct__jcv__point_1a2bed5e1c6148d676bb38d0616810c4f9" kindref="member">x</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x[i]);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>points[i].<ref refid="struct__jcv__point_1af568d5018baddc1dd1201cd188af39f8" kindref="member">y</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(y[i]);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>nbr_map.clear();</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>nbr_map.resize(num_obs);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><ref refid="jc__voronoi_8h_1aeb321df6f04b664ead5d9009d2557c05" kindref="member">jcv_diagram</ref><sp/>diagram;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>memset(&amp;diagram,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="jc__voronoi_8h_1aeb321df6f04b664ead5d9009d2557c05" kindref="member">jcv_diagram</ref>));</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><ref refid="jc__voronoi_8h_1ad73f6c9ed27e703eef139c6ed7bb0479" kindref="member">jcv_rect</ref><sp/>bounding_box;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>bounding_box.<ref refid="struct__jcv__rect_1a72574eae9f12009fd339ecf1065ed2db" kindref="member">min</ref>.<ref refid="struct__jcv__point_1a2bed5e1c6148d676bb38d0616810c4f9" kindref="member">x</ref><sp/>=<sp/>bb_xmin;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>bounding_box.<ref refid="struct__jcv__rect_1a72574eae9f12009fd339ecf1065ed2db" kindref="member">min</ref>.<ref refid="struct__jcv__point_1af568d5018baddc1dd1201cd188af39f8" kindref="member">y</ref><sp/>=<sp/>bb_ymin;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>bounding_box.<ref refid="struct__jcv__rect_1a16150970f1caf28961255bacf5ec6d22" kindref="member">max</ref>.<ref refid="struct__jcv__point_1a2bed5e1c6148d676bb38d0616810c4f9" kindref="member">x</ref><sp/>=<sp/>bb_xmax;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>bounding_box.<ref refid="struct__jcv__rect_1a16150970f1caf28961255bacf5ec6d22" kindref="member">max</ref>.<ref refid="struct__jcv__point_1af568d5018baddc1dd1201cd188af39f8" kindref="member">y</ref><sp/>=<sp/>bb_ymax;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>voronoi<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><ref refid="jc__voronoi_8h_1a06e41773fa0f60c5dd38ec8fd24ee44c" kindref="member">jcv_diagram_generate</ref>(num_obs,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="jc__voronoi_8h_1a7f4dcdffe3318ec1307e9b680ce05fe4" kindref="member">jcv_point</ref>*)points,<sp/>&amp;bounding_box,<sp/>&amp;diagram);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>std::set&lt;int&gt;&gt;<sp/>edge_to_site;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>std::set&lt;int&gt;&gt;<sp/>jcvpoint_to_site;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="jc__voronoi_8h_1a5386281099d8669709643c318b500893" kindref="member">jcv_site</ref>*<sp/>sites<sp/>=<sp/><ref refid="jc__voronoi_8h_1a3f1f04b91dba62621ce99132ea03bdd5" kindref="member">jcv_diagram_get_sites</ref>(&amp;diagram);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>diagram.<ref refid="struct__jcv__diagram_1a6684510ae98f93978135c10a41ee5914" kindref="member">numsites</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="jc__voronoi_8h_1a5386281099d8669709643c318b500893" kindref="member">jcv_site</ref>*<sp/>site<sp/>=<sp/>&amp;sites[i];</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="jc__voronoi_8h_1a2eb469b4802dbc3964403c88c4c2cbd6" kindref="member">jcv_graphedge</ref>*<sp/>e<sp/>=<sp/>sites[i].<ref refid="struct__jcv__site_1a66bedf58384b9c116b625faf5f76c660" kindref="member">edges</ref>;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(e)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shared<sp/>edges<sp/>will<sp/>be<sp/>visited<sp/>by<sp/>neighbor<sp/>sites</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_queen)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jcvpoint_to_site[<ref refid="contiguity-weights_8cpp_1a14fed8abcf4a849da385ab679409c055" kindref="member">jcv_point_str</ref>(e-&gt;<ref refid="struct__jcv__graphedge_1aa471bf8739860ecfa6c56343ee33eff3" kindref="member">pos</ref>[0])].insert(site-&gt;<ref refid="struct__jcv__site_1a9a1e21b7b574616ebc167322fce414a9" kindref="member">index</ref>);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jcvpoint_to_site[<ref refid="contiguity-weights_8cpp_1a14fed8abcf4a849da385ab679409c055" kindref="member">jcv_point_str</ref>(e-&gt;<ref refid="struct__jcv__graphedge_1aa471bf8739860ecfa6c56343ee33eff3" kindref="member">pos</ref>[1])].insert(site-&gt;<ref refid="struct__jcv__site_1a9a1e21b7b574616ebc167322fce414a9" kindref="member">index</ref>);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edge_to_site[<ref refid="contiguity-weights_8cpp_1affbe65d01d3c099de51da6d4b44d9734" kindref="member">jcv_edge_str</ref>(e)].insert(site-&gt;<ref refid="struct__jcv__site_1a9a1e21b7b574616ebc167322fce414a9" kindref="member">index</ref>);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>e-&gt;<ref refid="struct__jcv__graphedge_1af097be4c7e9e6aa177fe34e1efb9e62d" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>std::set&lt;int&gt;&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_queen)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>jcvpoint_to_site.begin();<sp/>it<sp/>!=<sp/>jcvpoint_to_site.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it-&gt;second<sp/>are<sp/>neighbors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;int&gt;&amp;<sp/>nbrs<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>ids<sp/>in<sp/>nbrs<sp/>are<sp/>neighbors<sp/>of<sp/>each<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;int&gt;::iterator<sp/>nbr1_it;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(nbr1_it<sp/>=<sp/>nbrs.begin();<sp/>nbr1_it<sp/>!=<sp/>nbrs.end();<sp/>++nbr1_it)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>*nbr1_it;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;int&gt;::iterator<sp/>nbr2_it;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(nbr2_it<sp/>=<sp/>nbrs.begin();<sp/>nbr2_it<sp/>!=<sp/>nbrs.end();<sp/>++nbr2_it)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jj<sp/>=<sp/>*nbr2_it;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ii<sp/>!=<sp/>jj)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbr_map[ii].insert(jj);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>edge_to_site.begin();<sp/>it<sp/>!=<sp/>edge_to_site.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it-&gt;second<sp/>are<sp/>neighbors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;int&gt;&amp;<sp/>nbrs<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;int&gt;::iterator<sp/>nbr1_it;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(nbr1_it<sp/>=<sp/>nbrs.begin();<sp/>nbr1_it<sp/>!=<sp/>nbrs.end();<sp/>++nbr1_it)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>*nbr1_it;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;int&gt;::iterator<sp/>nbr2_it;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(nbr2_it<sp/>=<sp/>nbrs.begin();<sp/>nbr2_it<sp/>!=<sp/>nbrs.end();<sp/>++nbr2_it)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jj<sp/>=<sp/>*nbr2_it;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ii<sp/>!=<sp/>jj)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbr_map[ii].insert(jj);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>points;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><ref refid="jc__voronoi_8h_1a2be8cceedaa369c8568076f049b5d9fa" kindref="member">jcv_diagram_free</ref>(&amp;diagram);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;unsigned<sp/>int&gt;&gt;<sp/>result_vec(num_obs);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order_contiguity<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref>*<sp/>gal<sp/>=<sp/><ref refid="contiguity-weights_8cpp_1a35460b853c89ae48ea55ca85d9e1569a" kindref="member">neighbors_to_gal</ref>(nbr_map);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="contiguity-weights_8cpp_1a7c211c4277171ed6519dbf4d41b338af" kindref="member">make_higher_ord_contiguity</ref>(order_contiguity,<sp/>num_obs,<sp/>gal,<sp/>include_lower_order);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>GalElement<sp/>to<sp/>std::vector&lt;std::vector&lt;unsigned<sp/>int&gt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_obs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>gal[i].<ref refid="classgeoda_1_1_gal_element_1a9e32d1e75feb41f219804cbef680c2a1" kindref="member">Size</ref>();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result_vec[i].push_back(gal[i][j]);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>gal;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>nbr_map<sp/>to<sp/>std::vector&lt;std::vector&lt;unsigned<sp/>int&gt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_obs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::set&lt;int&gt;::iterator<sp/>it<sp/>=<sp/>nbr_map[i].begin();<sp/>it<sp/>!=<sp/>nbr_map[i].end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result_vec[i].push_back(*it);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result_vec;</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/xun/github/geoda-lib/src/cpp/weights/contiguity-weights.cpp"/>
  </compounddef>
</doxygen>
