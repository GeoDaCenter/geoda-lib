<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="lite2_8h" kind="file" language="C++">
    <compoundname>lite2.h</compoundname>
    <includes local="no">ostream</includes>
    <includes local="no">vector</includes>
    <includedby refid="_m_l__im_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp</includedby>
    <includedby refid="_m_l__im_8h" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.h</includedby>
    <includedby refid="_power_lag_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/PowerLag.cpp</includedby>
    <includedby refid="_power_lag_8h" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/PowerLag.h</includedby>
    <includedby refid="_power_sym_lag_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/PowerSymLag.cpp</includedby>
    <includedby refid="_power_sym_lag_8h" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/PowerSymLag.h</includedby>
    <includedby refid="_weights_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/Weights.cpp</includedby>
    <includedby refid="regression_2_weights_8h" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/Weights.h</includedby>
    <includedby refid="mix_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp</includedby>
    <includedby refid="regression_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/regression.cpp</includedby>
    <includedby refid="smile2_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h</label>
        <link refid="lite2_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ostream</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp</label>
        <link refid="_m_l__im_8cpp"/>
      </node>
      <node id="3">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.h</label>
        <link refid="_m_l__im_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/PowerLag.cpp</label>
        <link refid="_power_lag_8cpp"/>
      </node>
      <node id="6">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/PowerLag.h</label>
        <link refid="_power_lag_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/PowerSymLag.cpp</label>
        <link refid="_power_sym_lag_8cpp"/>
      </node>
      <node id="8">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/PowerSymLag.h</label>
        <link refid="_power_sym_lag_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/Weights.cpp</label>
        <link refid="_weights_8cpp"/>
      </node>
      <node id="11">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/Weights.h</label>
        <link refid="regression_2_weights_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h</label>
        <link refid="lite2_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/mix.cpp</label>
        <link refid="mix_8cpp"/>
      </node>
      <node id="9">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/polym.h</label>
        <link refid="polym_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/regression.cpp</label>
        <link refid="regression_8cpp"/>
      </node>
      <node id="4">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/smile2.cpp</label>
        <link refid="smile2_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_s_l___input_iterator" prot="public">SL_InputIterator</innerclass>
    <innerclass refid="class_s_l___iterator" prot="public">SL_Iterator</innerclass>
    <innerclass refid="class_s_l___output_iterator" prot="public">SL_OutputIterator</innerclass>
    <innerclass refid="struct_s_l__function" prot="public">SL_function</innerclass>
    <innerclass refid="struct_sqr" prot="public">Sqr</innerclass>
    <innerclass refid="class_short_iterator" prot="public">ShortIterator</innerclass>
    <innerclass refid="class_iterator" prot="public">Iterator</innerclass>
    <innerclass refid="structpairstruct" prot="public">pairstruct</innerclass>
    <innerclass refid="class_vector" prot="public">Vector</innerclass>
    <innerclass refid="struct_map__types" prot="public">Map_types</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="lite2_8h_1a6a4288add566c8d9c96f7cb0dc661c66" prot="public" static="no">
        <name>CNT</name>
        <initializer>int</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="24" column="9" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" prot="public" static="no">
        <name>VALUE</name>
        <initializer>double</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="25" column="9" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" prot="public" static="no">
        <name>INDEX</name>
        <initializer>size_t</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="26" column="9" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lite2_8h_1a94d786927b0409afc505ac352d4acd46" prot="public" static="no">
        <name>sl_max</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((x) &lt; (y) ? (y) : (x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="27" column="9" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lite2_8h_1ae57614aa49a6298bfcef92612873e04d" prot="public" static="no">
        <name>sl_min</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((x) &lt; (y) ? (x) : (y))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="28" column="9" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lite2_8h_1a12f5988d0e8de3bb2ed9583ae905d8bd" prot="public" static="no">
        <name>GDA_SWAP</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <param><defname>t</defname></param>
        <initializer>((t) = (x), (x) = (y), (y) = (t))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="30" column="9" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lite2_8h_1af130a8cc637c0980d7d2e9d85e336ffb" prot="public" static="no">
        <name>MAP</name>
        <param><defname>K</defname></param>
        <param><defname>T</defname></param>
        <initializer><ref refid="struct_map__types" kindref="compound">Map_types</ref>&lt;K, <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref>&gt;::map_container</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="604" column="9" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="604" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="lite2_8h_1a954bbef49b89224c123c4afb101eee9a" prot="public" static="no" strong="no">
        <type></type>
        <name>WeightsType</name>
        <enumvalue id="lite2_8h_1a954bbef49b89224c123c4afb101eee9aaf9ced402bda88d6da7fee1bce6bb6fcf" prot="public">
          <name>W_UNDEF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lite2_8h_1a954bbef49b89224c123c4afb101eee9aa606e8cfc2734f94c0a5ae0852816d64f" prot="public">
          <name>W_MAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lite2_8h_1a954bbef49b89224c123c4afb101eee9aae612f27f32fcd94eee19701daae9d223" prot="public">
          <name>W_GWT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lite2_8h_1a954bbef49b89224c123c4afb101eee9aa067a1d3ae9a5ea841118b2b29b0b453d" prot="public">
          <name>W_GAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="33" column="1" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="33" bodyend="33"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="lite2_8h_1aa5cc9c44184affabe7dbac94d90f2854" prot="public" static="no">
        <type><ref refid="structpairstruct" kindref="compound">pairstruct</ref>&lt; <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref>, <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref> &gt;</type>
        <definition>typedef pairstruct&lt;INDEX, VALUE&gt; WPair</definition>
        <argsstring></argsstring>
        <name>WPair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="607" column="20" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="607" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" prot="public" static="no">
        <type><ref refid="class_vector" kindref="compound">Vector</ref>&lt; <ref refid="lite2_8h_1aa5cc9c44184affabe7dbac94d90f2854" kindref="member">WPair</ref> &gt;</type>
        <definition>typedef Vector&lt;WPair&gt; WMap</definition>
        <argsstring></argsstring>
        <name>WMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="608" column="16" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lite2_8h_1a4c7688b643a08fd9b048deecbb9376b5" prot="public" static="no">
        <type><ref refid="class_vector" kindref="compound">Vector</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
        <definition>typedef Vector&lt;WMap&gt; GWT</definition>
        <argsstring></argsstring>
        <name>GWT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="609" column="16" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="609" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lite2_8h_1ae9d1896edbd59cd55628634470738d01" prot="public" static="no">
        <type><ref refid="class_vector" kindref="compound">Vector</ref>&lt; <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref> &gt;</type>
        <definition>typedef Vector&lt;VALUE&gt; WVector</definition>
        <argsstring></argsstring>
        <name>WVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="610" column="16" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="610" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" prot="public" static="no">
        <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref> &gt;</type>
        <definition>typedef Iterator&lt;VALUE&gt; WIterator</definition>
        <argsstring></argsstring>
        <name>WIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="611" column="18" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="611" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" prot="public" static="no">
        <type><ref refid="class_vector" kindref="compound">Vector</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
        <definition>typedef Vector&lt;WVector&gt; WMatrix</definition>
        <argsstring></argsstring>
        <name>WMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="612" column="16" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="612" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="lite2_8h_1a13132a47bd1e2c56d2b05d091896445d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double ComputeMean</definition>
        <argsstring>(double *dt, int dim)</argsstring>
        <name>ComputeMean</name>
        <param>
          <type>double *</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="35" column="15" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="35" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1a5fd7f53b02952c4e38a78932b7d4d04f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double ComputeSdev</definition>
        <argsstring>(double *dt, int dim)</argsstring>
        <name>ComputeSdev</name>
        <param>
          <type>double *</type>
          <declname>dt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="42" column="15" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="42" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1ab6370ad33b283ec00171c2a5439ac7c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void divide</definition>
        <argsstring>(T &amp;x, const T &amp;y)</argsstring>
        <name>divide</name>
        <param>
          <type><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="87" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1a87d5626dc40955b45bedb1a92b3ba545" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class D</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void for_each</definition>
        <argsstring>(D itr, F f)</argsstring>
        <name>for_each</name>
        <param>
          <type>D</type>
          <declname>itr</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="111" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1aecf90f506ef060987440a9f354a37cc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const T &amp;x, const T &amp;y)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="123" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1ab2c7f9df32ca2ccdadef1620601bc118" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;s, pairstruct&lt; F, S &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structpairstruct" kindref="compound">pairstruct</ref>&lt; F, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="251" column="1" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="251" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1aa3573f8fe9ec3c4e1dab0877beaeb5f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> &gt; &amp;</type>
        <definition>Iterator&lt; T &gt; &amp; operator-=</definition>
        <argsstring>(Iterator&lt; T &gt; &amp;it1, Iterator&lt; T &gt; it2)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> &gt; &amp;</type>
          <declname>it1</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> &gt;</type>
          <declname>it2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="256" column="17" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="256" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1a296bbd8b511d9d0ec7e41b6203569c0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void HeapSort</definition>
        <argsstring>(Iterator&lt; T &gt; v)</argsstring>
        <name>HeapSort</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="497" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="497" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1a93ec93381fc1f75057b7f45937ff55dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class D</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>D</type>
        <definition>D accumulator</definition>
        <argsstring>(Iterator&lt; D &gt; v, F f)</argsstring>
        <name>accumulator</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; D &gt;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="540" column="3" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="540" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1ae23d69c5116873b5abc88978a129d1ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Destroy</definition>
        <argsstring>(Iterator&lt; T &gt; it)</argsstring>
        <name>Destroy</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> &gt;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="551" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="551" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1a31fbc4cff08b760d1ffc26e6b395e7e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CopyInput</definition>
        <argsstring>(Vector&lt; X &gt; &amp;dest, const std::vector&lt; unsigned int &gt; &amp;nbl, INDEX size)</argsstring>
        <name>CopyInput</name>
        <param>
          <type><ref refid="class_vector" kindref="compound">Vector</ref>&lt; X &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const std::vector&lt; unsigned int &gt; &amp;</type>
          <declname>nbl</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="560" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="560" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1a068bdac0bd10887d43c8495d1511aade" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CopyInput</definition>
        <argsstring>(Vector&lt; X &gt; &amp;dest, const std::vector&lt; unsigned int &gt; &amp;nbl, const std::vector&lt; double &gt; &amp;wtl, INDEX size)</argsstring>
        <name>CopyInput</name>
        <param>
          <type><ref refid="class_vector" kindref="compound">Vector</ref>&lt; X &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const std::vector&lt; unsigned int &gt; &amp;</type>
          <declname>nbl</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>wtl</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="569" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="569" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1acfc62f638d7f256178130be948c921f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
          <param>
            <type>class Y</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Copy</definition>
        <argsstring>(X &amp;dest, Y src)</argsstring>
        <name>Copy</name>
        <param>
          <type>X &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Y</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="580" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="580" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1a31c3e1107de675a688243b89d96b40ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t Values</definition>
        <argsstring>(Iterator&lt; T &gt; it, const T threshold)</argsstring>
        <name>Values</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> &gt;</type>
          <declname>it</declname>
        </param>
        <param>
          <type>const <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref></type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="588" column="8" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="588" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1a7dd6ec971b6f46098cb10e81b3fb0e9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE Product</definition>
        <argsstring>(Iterator&lt; VALUE &gt; it1, Iterator&lt; VALUE &gt; it2)</argsstring>
        <name>Product</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref> &gt;</type>
          <declname>it1</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref> &gt;</type>
          <declname>it2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="614" column="14" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="614" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1aa1370876f2c781f443356f2a7b4d4b9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref></type>
        <definition>T Sum</definition>
        <argsstring>(Iterator&lt; T &gt; it)</argsstring>
        <name>Sum</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> &gt;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="621" column="10" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="621" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1a1741d3eff97d95cc971de2b1fea89cd2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE Product</definition>
        <argsstring>(Iterator&lt; WPair &gt; it1, Iterator&lt; VALUE &gt; it2)</argsstring>
        <name>Product</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1aa5cc9c44184affabe7dbac94d90f2854" kindref="member">WPair</ref> &gt;</type>
          <declname>it1</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref> &gt;</type>
          <declname>it2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="627" column="14" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="627" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1a839cd9f66fbef0921b0d1b18bc9b7aaa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vector" kindref="compound">Vector</ref>&lt; <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; operator-=</definition>
        <argsstring>(Vector&lt; T &gt; &amp;v1, const Vector&lt; T &gt; &amp;v2)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="class_vector" kindref="compound">Vector</ref>&lt; <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="class_vector" kindref="compound">Vector</ref>&lt; <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="636" column="15" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="636" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1a8d3f811d884aa29aea7ac90b301e180f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vector" kindref="compound">Vector</ref>&lt; <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; operator+=</definition>
        <argsstring>(Vector&lt; T &gt; &amp;v1, const Vector&lt; T &gt; &amp;v2)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="class_vector" kindref="compound">Vector</ref>&lt; <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="class_vector" kindref="compound">Vector</ref>&lt; <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="643" column="15" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="643" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1a51c1244e34e1dc616228075c5f9cfcc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="class_vector" kindref="compound">Vector</ref>&lt; <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; operator*=</definition>
        <argsstring>(Vector&lt; T &gt; &amp;v1, const T v2)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="class_vector" kindref="compound">Vector</ref>&lt; <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref> &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref></type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="650" column="15" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="650" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1a194ef7f2fe4817fac79a07166697bb7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Pair</type>
          </param>
          <param>
            <type>class Key</type>
          </param>
        </templateparamlist>
        <type>Pair *</type>
        <definition>Pair * Find</definition>
        <argsstring>(Iterator&lt; Pair &gt; it, const Key What)</argsstring>
        <name>Find</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; Pair &gt;</type>
          <declname>it</declname>
        </param>
        <param>
          <type>const Key</type>
          <declname>What</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="663" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="663" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1aeb88d60e36e6908449b26209f7928c76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Pair</type>
          </param>
          <param>
            <type>class Key</type>
          </param>
        </templateparamlist>
        <type>Pair *</type>
        <definition>Pair * FindW</definition>
        <argsstring>(Iterator&lt; Pair &gt; it, const Key What)</argsstring>
        <name>FindW</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; Pair &gt;</type>
          <declname>it</declname>
        </param>
        <param>
          <type>const Key</type>
          <declname>What</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="678" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="678" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1af2d4a6e9c58b3995943f051b2b709bb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ColumnMultiply</definition>
        <argsstring>(Iterator&lt; VALUE &gt; column, Iterator&lt; WMap &gt; mt, Vector&lt; VALUE &gt; &amp;product)</argsstring>
        <name>ColumnMultiply</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref> &gt;</type>
          <declname>column</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type><ref refid="class_vector" kindref="compound">Vector</ref>&lt; <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref> &gt; &amp;</type>
          <declname>product</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="699" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="699" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="lite2_8h_1acc3471b999ba92174faec94199ed7aec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int NeighborId</definition>
        <argsstring>(const Iterator&lt; WPair &gt; it)</argsstring>
        <name>NeighborId</name>
        <param>
          <type>const <ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1aa5cc9c44184affabe7dbac94d90f2854" kindref="member">WPair</ref> &gt;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" line="710" column="12" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h" bodystart="710" bodyend="710"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__GEODA_CENTER_LITE2_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__GEODA_CENTER_LITE2_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Lite<sp/>-<sp/>experimental<sp/>design<sp/>of<sp/>templates<sp/>and<sp/>classes<sp/>for</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>object<sp/>oriented<sp/>designed<sp/>of<sp/>the<sp/>SpaceLite.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.<sp/>containers;</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>iterators<sp/>for<sp/>corresponding<sp/>containers;</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3.<sp/>container<sp/>template<sp/>functions;</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="class_s_l___input_iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_s_l___input_iterator" kindref="compound">SL_InputIterator</ref><sp/>{};</highlight></codeline>
<codeline lineno="17" refid="class_s_l___iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_s_l___iterator" kindref="compound">SL_Iterator</ref><sp/>{};</highlight></codeline>
<codeline lineno="18" refid="class_s_l___output_iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_s_l___output_iterator" kindref="compound">SL_OutputIterator</ref><sp/>{};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Definitions<sp/>for<sp/>the<sp/>types<sp/>used<sp/>in<sp/>defining<sp/>spatial</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights<sp/>matrix.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="lite2_8h_1a6a4288add566c8d9c96f7cb0dc661c66" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CNT<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VALUE<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INDEX<sp/>size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="lite2_8h_1a94d786927b0409afc505ac352d4acd46" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sl_max(x,<sp/>y)<sp/>((x)<sp/>&lt;<sp/>(y)<sp/>?<sp/>(y)<sp/>:<sp/>(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="lite2_8h_1ae57614aa49a6298bfcef92612873e04d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sl_min(x,<sp/>y)<sp/>((x)<sp/>&lt;<sp/>(y)<sp/>?<sp/>(x)<sp/>:<sp/>(y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GDA_SWAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="lite2_8h_1a12f5988d0e8de3bb2ed9583ae905d8bd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GDA_SWAP(x,<sp/>y,<sp/>t)<sp/>((t)<sp/>=<sp/>(x),<sp/>(x)<sp/>=<sp/>(y),<sp/>(y)<sp/>=<sp/>(t))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="lite2_8h_1a954bbef49b89224c123c4afb101eee9aa067a1d3ae9a5ea841118b2b29b0b453d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a954bbef49b89224c123c4afb101eee9a" kindref="member">WeightsType</ref><sp/>{<sp/><ref refid="lite2_8h_1a954bbef49b89224c123c4afb101eee9aaf9ced402bda88d6da7fee1bce6bb6fcf" kindref="member">W_UNDEF</ref>,<sp/><ref refid="lite2_8h_1a954bbef49b89224c123c4afb101eee9aa606e8cfc2734f94c0a5ae0852816d64f" kindref="member">W_MAT</ref>,<sp/><ref refid="lite2_8h_1a954bbef49b89224c123c4afb101eee9aae612f27f32fcd94eee19701daae9d223" kindref="member">W_GWT</ref>,<sp/><ref refid="lite2_8h_1a954bbef49b89224c123c4afb101eee9aa067a1d3ae9a5ea841118b2b29b0b453d" kindref="member">W_GAL</ref><sp/>};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="lite2_8h_1a13132a47bd1e2c56d2b05d091896445d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a13132a47bd1e2c56d2b05d091896445d" kindref="member">ComputeMean</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*dt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sdt<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dim;<sp/>i++)<sp/>sdt<sp/>+=<sp/>dt[i];</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>sdt<sp/>=<sp/>sdt<sp/>/<sp/>((double)dim);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sdt;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="lite2_8h_1a5fd7f53b02952c4e38a78932b7d4d04f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a5fd7f53b02952c4e38a78932b7d4d04f" kindref="member">ComputeSdev</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*dt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mean<sp/>=<sp/><ref refid="lite2_8h_1a13132a47bd1e2c56d2b05d091896445d" kindref="member">ComputeMean</ref>(dt,<sp/>dim);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diff<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>dim;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>dt[cnt]<sp/>-<sp/>mean;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref><sp/>+=<sp/>(diff<sp/>*<sp/>diff);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(<ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref><sp/>/<sp/>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)dim));</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SL_function</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/>Template<sp/>structure<sp/>to<sp/>provide<sp/>skeleton<sp/>for<sp/>a<sp/>SL<sp/>function.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/>The<sp/>distinction<sp/>between<sp/>any<sp/>SL<sp/>function<sp/>(like<sp/>Sqr)<sp/>and</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/>ordinary<sp/>template<sp/>function<sp/>(like<sp/>sqr)<sp/>is<sp/>that<sp/>the<sp/>first<sp/>one</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/>can<sp/>be<sp/>seamlessly<sp/>passed<sp/>as<sp/>a<sp/>parameter<sp/>to<sp/>another<sp/>templated</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/>function<sp/>(see<sp/>for_each),<sp/>where<sp/>one<sp/>of<sp/>the<sp/>parameters<sp/>is<sp/>an</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/>SL<sp/>function.<sp/>This<sp/>trick<sp/>is<sp/>necessarily<sp/>since<sp/>ordinary<sp/>template</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/>function<sp/>can<sp/>not<sp/>be<sp/>passed<sp/>as<sp/>an<sp/>argument.<sp/>This<sp/>works<sp/>with<sp/>SL</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/>function<sp/>because<sp/>this<sp/>one<sp/>is<sp/>a<sp/>structure.<sp/>The<sp/>function<sp/>call</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/>is<sp/>actually<sp/>performed<sp/>through<sp/>overloaded<sp/>operator<sp/>().</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Arg&gt;</highlight></codeline>
<codeline lineno="66" refid="struct_s_l__function" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_s_l__function_1aafc42df49312ff343934591bc5bbc852" kindref="member">SL_function</ref><sp/>{</highlight></codeline>
<codeline lineno="67" refid="struct_s_l__function_1ad2b288927ccb3b4dcf2fbca1044d4d95" refkind="member"><highlight class="normal"><sp/><sp/>Arg<sp/><ref refid="struct_s_l__function_1ad2b288927ccb3b4dcf2fbca1044d4d95" kindref="member">arg</ref>;</highlight></codeline>
<codeline lineno="68" refid="struct_s_l__function_1aafc42df49312ff343934591bc5bbc852" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_s_l__function_1aafc42df49312ff343934591bc5bbc852" kindref="member">SL_function</ref>(){};</highlight></codeline>
<codeline lineno="69" refid="struct_s_l__function_1a6d0f53d256f03a32661ce8d823808fdf" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_s_l__function_1a6d0f53d256f03a32661ce8d823808fdf" kindref="member">SL_function</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Arg<sp/>&amp;param)<sp/>:<sp/><ref refid="struct_s_l__function_1ad2b288927ccb3b4dcf2fbca1044d4d95" kindref="member">arg</ref>(param){};</highlight></codeline>
<codeline lineno="70"><highlight class="normal">};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sqr</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/>Template<sp/>SL<sp/>function.<sp/>Operator<sp/>()<sp/>overloaded<sp/>to<sp/>return<sp/>square</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/>of<sp/>an<sp/>expression.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="78" refid="struct_sqr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sqr" kindref="compound">Sqr</ref><sp/>:<sp/><ref refid="struct_s_l__function_1aafc42df49312ff343934591bc5bbc852" kindref="member">SL_function</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="79" refid="struct_sqr_1ad463f458c5256c5a0deadd06a3a4734b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/><ref refid="struct_sqr_1ad463f458c5256c5a0deadd06a3a4734b" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>&amp;x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>*<sp/>x;<sp/>};</highlight></codeline>
<codeline lineno="80"><highlight class="normal">};</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>divide</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/>Template<sp/>function<sp/>that<sp/>divides<sp/>first<sp/>argument<sp/>on<sp/>another.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="87" refid="lite2_8h_1ab6370ad33b283ec00171c2a5439ac7c3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ab6370ad33b283ec00171c2a5439ac7c3" kindref="member">divide</ref>(<ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>&amp;y)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>x<sp/>/=<sp/>y;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Divide</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/>Template<sp/>SL<sp/>function.<sp/>Operator<sp/>()<sp/>called<sp/>with<sp/>one<sp/>parameter</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/>overloaded<sp/>to<sp/>divide<sp/>that<sp/>argument<sp/>by<sp/>value<sp/>previously</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/>save<sp/>at<sp/>arg.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>&lt;class<sp/>T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>struct<sp/>Divide<sp/>:<sp/>SL_function&lt;T&gt;<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Divide(const<sp/>T<sp/>&amp;param)<sp/>:<sp/>SL_function&lt;T&gt;(param)<sp/><sp/>{};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>operator()(T<sp/>&amp;x)<sp/><sp/>{<sp/><sp/>divide(x,<sp/>arg);<sp/><sp/>return;<sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for_each</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/>Template<sp/>function<sp/>that<sp/>calls<sp/>function<sp/>f<sp/>for<sp/>each<sp/>element</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/>of<sp/>the<sp/>container.<sp/><sp/>The<sp/>container<sp/>can<sp/>be<sp/>of<sp/>any<sp/>type<sp/>for</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/>which<sp/>operations<sp/>*<sp/>and<sp/>++<sp/>are<sp/>defined.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="111" refid="lite2_8h_1a87d5626dc40955b45bedb1a92b3ba545" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a87d5626dc40955b45bedb1a92b3ba545" kindref="member">for_each</ref>(D<sp/>itr,<sp/>F<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(itr)<sp/>f(*itr++);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator<sp/>&gt;</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/>Generic<sp/>operator<sp/>introduced<sp/>to<sp/>avoid<sp/>redundance<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/>class<sp/>declarations<sp/>through<sp/>redefining<sp/>using<sp/>operator<sp/>&lt;.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="123" refid="lite2_8h_1aecf90f506ef060987440a9f354a37cc2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aecf90f506ef060987440a9f354a37cc2" kindref="member">operator&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>&amp;y)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y<sp/>&lt;<sp/>x;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShortIterator</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/>Template<sp/>class<sp/>to<sp/>describe<sp/>basic<sp/>iterator<sp/>for<sp/>which</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/>following<sp/>are<sp/>defined<sp/>explicitly:<sp/>dereference(*),</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/>forward<sp/>iteration<sp/>(++),<sp/>backward<sp/>iteration<sp/>(--),</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/>operator<sp/>&lt;<sp/>(less).</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="135" refid="class_short_iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_short_iterator_1abb8cb59442db13d6953a81ba7e075e5a" kindref="member">ShortIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="137" refid="class_short_iterator_1a53ec66291ce2b7e582be864a5904be33" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/><ref refid="class_short_iterator_1a53ec66291ce2b7e582be864a5904be33" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="138" refid="class_short_iterator_1a4691fb26c05291e3bb8155459cdc878b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*<ref refid="class_short_iterator_1a4691fb26c05291e3bb8155459cdc878b" kindref="member">pointer</ref>;</highlight></codeline>
<codeline lineno="139" refid="class_short_iterator_1ae8c474a8bc5f57702a07c6c257efa2c4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_short_iterator_1abb8cb59442db13d6953a81ba7e075e5a" kindref="member">ShortIterator&lt;T&gt;</ref><sp/><ref refid="class_short_iterator_1ae8c474a8bc5f57702a07c6c257efa2c4" kindref="member">self</ref>;</highlight></codeline>
<codeline lineno="140" refid="class_short_iterator_1abb8cb59442db13d6953a81ba7e075e5a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_short_iterator_1abb8cb59442db13d6953a81ba7e075e5a" kindref="member">ShortIterator</ref>(<ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*init<sp/>=<sp/>NULL)<sp/>:<sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ptr</ref>(init){}</highlight></codeline>
<codeline lineno="141" refid="class_short_iterator_1aeb12a7f706bbedb798ce8c32bd37d22d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_short_iterator_1aeb12a7f706bbedb798ce8c32bd37d22d" kindref="member">~ShortIterator</ref>()<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ptr</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145" refid="class_short_iterator_1a73df9cc6d70bef3fccb6932a6f9c9c9a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>&amp;<ref refid="class_short_iterator_1a73df9cc6d70bef3fccb6932a6f9c9c9a" kindref="member">operator*</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ptr</ref>;<sp/>}</highlight></codeline>
<codeline lineno="146" refid="class_short_iterator_1ad7752b89a0617b67658158bef76b3ace" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>&amp;<ref refid="class_short_iterator_1ad7752b89a0617b67658158bef76b3ace" kindref="member">operator*</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ptr</ref>;<sp/>}</highlight></codeline>
<codeline lineno="147" refid="class_short_iterator_1a54c65660ba9b6aa3a60bb5b525af0cf0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*<ref refid="class_short_iterator_1a54c65660ba9b6aa3a60bb5b525af0cf0" kindref="member">operator()</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ptr</ref>;<sp/>}</highlight></codeline>
<codeline lineno="148" refid="class_short_iterator_1a101a966991c9094efa6d7ac87432c3df" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>&amp;<ref refid="class_short_iterator_1a101a966991c9094efa6d7ac87432c3df" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>loc)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ptr</ref>[loc];<sp/>}</highlight></codeline>
<codeline lineno="149" refid="class_short_iterator_1a54e33752c2c0c9657eacdb641931b654" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>&amp;<ref refid="class_short_iterator_1a54e33752c2c0c9657eacdb641931b654" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>loc)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ptr</ref>[loc];<sp/>}</highlight></codeline>
<codeline lineno="150" refid="class_short_iterator_1a85c956189108692704a629fc5ea0e32c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_short_iterator_1a85c956189108692704a629fc5ea0e32c" kindref="member">operator&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_short_iterator_1abb8cb59442db13d6953a81ba7e075e5a" kindref="member">ShortIterator</ref><sp/>&amp;it)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ptr</ref><sp/>&lt;<sp/>it.<ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ptr</ref>;<sp/>}</highlight></codeline>
<codeline lineno="151" refid="class_short_iterator_1a63bd4fd36fcaf114a50dc0595669ff37" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_short_iterator_1abb8cb59442db13d6953a81ba7e075e5a" kindref="member">ShortIterator</ref><sp/>&amp;<ref refid="class_short_iterator_1a63bd4fd36fcaf114a50dc0595669ff37" kindref="member">operator++</ref>()<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ptr</ref>;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155" refid="class_short_iterator_1a115a239ff0156caa0e7e7e0d54812764" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_short_iterator_1abb8cb59442db13d6953a81ba7e075e5a" kindref="member">ShortIterator</ref><sp/><ref refid="class_short_iterator_1a115a239ff0156caa0e7e7e0d54812764" kindref="member">operator++</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_short_iterator_1ae8c474a8bc5f57702a07c6c257efa2c4" kindref="member">self</ref><sp/>tmp<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ptr</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="160" refid="class_short_iterator_1a693d443b28121a088f979c806d4ec71e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_short_iterator_1abb8cb59442db13d6953a81ba7e075e5a" kindref="member">ShortIterator</ref><sp/>&amp;<ref refid="class_short_iterator_1a693d443b28121a088f979c806d4ec71e" kindref="member">operator--</ref>()<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>--<ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ptr</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="164" refid="class_short_iterator_1a8d5c9949fa3f464c92afbf85ea2e1f6d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_short_iterator_1abb8cb59442db13d6953a81ba7e075e5a" kindref="member">ShortIterator</ref><sp/><ref refid="class_short_iterator_1a8d5c9949fa3f464c92afbf85ea2e1f6d" kindref="member">operator--</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_short_iterator_1ae8c474a8bc5f57702a07c6c257efa2c4" kindref="member">self</ref><sp/>tmp<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>--<ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ptr</ref>;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>pointer<sp/>operator<sp/>-&gt;<sp/>()<sp/><sp/>{<sp/><sp/>return<sp/>ptr;<sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>friend<sp/>ShortIterator&amp;<sp/>operator<sp/>-=<sp/>(self<sp/>&amp;<sp/>a,<sp/>const<sp/>size_t<sp/>decrement);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="class_short_iterator_1ae938288a55143f0485ab25688bfe91bc" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_short_iterator_1abb8cb59442db13d6953a81ba7e075e5a" kindref="member">ShortIterator</ref><sp/>&amp;<ref refid="class_short_iterator_1ae938288a55143f0485ab25688bfe91bc" kindref="member">operator-=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>decrement)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ptr</ref><sp/>-=<sp/>decrement;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="class_short_iterator_1a8dbfe25cf493edd05de30ebd06f8f557" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_short_iterator_1abb8cb59442db13d6953a81ba7e075e5a" kindref="member">ShortIterator</ref><sp/>&amp;<ref refid="class_short_iterator_1a8dbfe25cf493edd05de30ebd06f8f557" kindref="member">operator+=</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>increment)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ptr</ref><sp/>+=<sp/>increment;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="182" refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*<ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ptr</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal">};</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShortIterator<sp/><sp/>--<sp/>operator<sp/>-=<sp/>and<sp/>+=</highlight></codeline>
<codeline lineno="187"><highlight class="comment">Operator<sp/>+=<sp/>advances<sp/>forward<sp/>the<sp/>iterator<sp/>by<sp/>an<sp/>arbitrary</highlight></codeline>
<codeline lineno="188"><highlight class="comment">number<sp/>of<sp/>elements.<sp/>Operator<sp/>-=<sp/>advances<sp/>the<sp/>iteratyor<sp/>backward.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>&lt;class<sp/>T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inline<sp/>ShortIterator&lt;T&gt;&amp;<sp/>operator<sp/>+=<sp/>(ShortIterator&lt;T&gt;<sp/>&amp;a,<sp/>size_t<sp/>increment)<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>a.ptr<sp/>+=<sp/>increment;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>a;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/>Template<sp/>class<sp/>for<sp/>a<sp/>&apos;full&apos;<sp/>iterator,<sp/>which<sp/>in<sp/>addition<sp/>to</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/>ShortIterator<sp/>can<sp/>be<sp/>checked<sp/>on<sp/>validity<sp/>(operator<sp/>void<sp/>*)</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/>and<sp/>has<sp/>defined<sp/>operator<sp/>&gt;&gt;.</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="203" refid="class_iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_iterator_1a9152e08e2fe43347bf0d23c2c8048a29" kindref="member">Iterator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_short_iterator_1abb8cb59442db13d6953a81ba7e075e5a" kindref="member">ShortIterator</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="205" refid="class_iterator_1acacd2a732114574db52d43bc2e1c94cf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_s_l___iterator" kindref="compound">SL_Iterator</ref><sp/><ref refid="class_iterator_1acacd2a732114574db52d43bc2e1c94cf" kindref="member">iterator_type</ref>;</highlight></codeline>
<codeline lineno="206" refid="class_iterator_1a709cc0a78d3767788d8dbf26b1184d5c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_short_iterator_1abb8cb59442db13d6953a81ba7e075e5a" kindref="member">ShortIterator&lt;T&gt;</ref><sp/><ref refid="class_iterator_1a709cc0a78d3767788d8dbf26b1184d5c" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="207" refid="class_iterator_1a9152e08e2fe43347bf0d23c2c8048a29" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_iterator_1a9152e08e2fe43347bf0d23c2c8048a29" kindref="member">Iterator</ref>(<ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*init<sp/>=<sp/>NULL,<sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*<ref refid="class_iterator_1a6aee1057c202f255a23a0b841ab16e44" kindref="member">last</ref><sp/>=<sp/>NULL)<sp/>:<sp/><ref refid="class_short_iterator_1abb8cb59442db13d6953a81ba7e075e5a" kindref="member">ShortIterator</ref>&lt;<ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref>&gt;(init),<sp/><ref refid="class_iterator_1a9a06023dcaa8344e32ba4b74f720e667" kindref="member">end</ref>(<ref refid="class_iterator_1a6aee1057c202f255a23a0b841ab16e44" kindref="member">last</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="208" refid="class_iterator_1af1634d71245f4a6213bb7fad28fe27a6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_iterator_1af1634d71245f4a6213bb7fad28fe27a6" kindref="member">Iterator</ref>(<ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*init,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz)<sp/>:<sp/><ref refid="class_short_iterator_1abb8cb59442db13d6953a81ba7e075e5a" kindref="member">ShortIterator</ref>&lt;<ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref>&gt;(init)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_iterator_1a9a06023dcaa8344e32ba4b74f720e667" kindref="member">end</ref><sp/>=<sp/>&amp;init[sz];</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="212" refid="class_iterator_1adb43d0de63be009778ef5aba9e1acb6c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(<ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref><sp/>&lt;<sp/><ref refid="class_iterator_1a9a06023dcaa8344e32ba4b74f720e667" kindref="member">end</ref>);<sp/>}</highlight></codeline>
<codeline lineno="213" refid="class_iterator_1ae2718cf095d08bf961e66305dd75219e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_iterator_1a9152e08e2fe43347bf0d23c2c8048a29" kindref="member">Iterator</ref><sp/>&amp;<ref refid="class_iterator_1ae2718cf095d08bf961e66305dd75219e" kindref="member">operator&gt;&gt;</ref>(<ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>&amp;val)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>val<sp/>=<sp/>*(<ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref>)++;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="217" refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_iterator_1a9a06023dcaa8344e32ba4b74f720e667" kindref="member">end</ref><sp/>-<sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref>;<sp/>}</highlight></codeline>
<codeline lineno="218" refid="class_iterator_1ac81b3dc4eacb59190c89be0b145bd1f3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_iterator_1ac81b3dc4eacb59190c89be0b145bd1f3" kindref="member">deflate</ref>()<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>--<ref refid="class_iterator_1a9a06023dcaa8344e32ba4b74f720e667" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222" refid="class_iterator_1a6e5276437e645efc8da75c4609fdff5b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*<ref refid="class_iterator_1a6e5276437e645efc8da75c4609fdff5b" kindref="member">first</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref>;<sp/>}</highlight></codeline>
<codeline lineno="223" refid="class_iterator_1afa5c45d65e59fc5c643d796997444071" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_iterator_1afa5c45d65e59fc5c643d796997444071" kindref="member">inflate</ref>()<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="class_iterator_1a9a06023dcaa8344e32ba4b74f720e667" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227" refid="class_iterator_1a6aee1057c202f255a23a0b841ab16e44" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*<ref refid="class_iterator_1a6aee1057c202f255a23a0b841ab16e44" kindref="member">last</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_iterator_1a9a06023dcaa8344e32ba4b74f720e667" kindref="member">end</ref><sp/>-<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="230" refid="class_iterator_1a9a06023dcaa8344e32ba4b74f720e667" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*<ref refid="class_iterator_1a9a06023dcaa8344e32ba4b74f720e667" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal">};</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pairstruct</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/>Template<sp/>structure<sp/>constructing<sp/>an<sp/>object<sp/>consisting<sp/>of</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/>two<sp/>classes.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/>Function<sp/>template<sp/>provided<sp/>to<sp/>alleviate<sp/>its<sp/>creation.</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/>pair<sp/>can<sp/>be<sp/>compared<sp/>to<sp/>another<sp/>pair<sp/>-<sp/>operator<sp/>&lt;;</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>First,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Second&gt;</highlight></codeline>
<codeline lineno="241" refid="structpairstruct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpairstruct_1ad0f782a83914f732f47fae86498a5762" kindref="member">pairstruct</ref><sp/>{</highlight></codeline>
<codeline lineno="242" refid="structpairstruct_1a1a17700bea9dc60e3011204fede1a9e9" refkind="member"><highlight class="normal"><sp/><sp/>First<sp/><ref refid="structpairstruct_1a1a17700bea9dc60e3011204fede1a9e9" kindref="member">first</ref>;</highlight></codeline>
<codeline lineno="243" refid="structpairstruct_1aa5a79515342867606403ab3fce598304" refkind="member"><highlight class="normal"><sp/><sp/>Second<sp/><ref refid="structpairstruct_1aa5a79515342867606403ab3fce598304" kindref="member">second</ref>;</highlight></codeline>
<codeline lineno="244" refid="structpairstruct_1ad0f782a83914f732f47fae86498a5762" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structpairstruct_1ad0f782a83914f732f47fae86498a5762" kindref="member">pairstruct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>First<sp/>init1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Second<sp/>init2)<sp/>:<sp/><ref refid="structpairstruct_1a1a17700bea9dc60e3011204fede1a9e9" kindref="member">first</ref>(init1),<sp/><ref refid="structpairstruct_1aa5a79515342867606403ab3fce598304" kindref="member">second</ref>(init2)<sp/>{}</highlight></codeline>
<codeline lineno="245" refid="structpairstruct_1a137827e5066edc8b86575b3bc95e84b2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structpairstruct_1a137827e5066edc8b86575b3bc95e84b2" kindref="member">pairstruct</ref>()<sp/>:<sp/><ref refid="structpairstruct_1a1a17700bea9dc60e3011204fede1a9e9" kindref="member">first</ref>(0),<sp/><ref refid="structpairstruct_1aa5a79515342867606403ab3fce598304" kindref="member">second</ref>(0)<sp/>{}</highlight></codeline>
<codeline lineno="246" refid="structpairstruct_1a8d05f3bc56e17541a0472b8cd7bb343f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structpairstruct_1a8d05f3bc56e17541a0472b8cd7bb343f" kindref="member">operator&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpairstruct_1ad0f782a83914f732f47fae86498a5762" kindref="member">pairstruct&lt;First, Second&gt;</ref><sp/>&amp;x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structpairstruct_1a1a17700bea9dc60e3011204fede1a9e9" kindref="member">first</ref><sp/>&lt;<sp/>x.<ref refid="structpairstruct_1a1a17700bea9dc60e3011204fede1a9e9" kindref="member">first</ref>;<sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>friend<sp/>INPUTstream<sp/>&amp;<sp/>operator<sp/>&gt;&gt;<sp/>(INPUTstream<sp/>&amp;s,<sp/>pairstruct&lt;First,<sp/>Second&gt;<sp/>&amp;<sp/>v);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">};</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="251" refid="lite2_8h_1ab2c7f9df32ca2ccdadef1620601bc118" refkind="member"><highlight class="normal">std::ostream<sp/>&amp;<ref refid="lite2_8h_1ab2c7f9df32ca2ccdadef1620601bc118" kindref="member">operator&lt;&lt;</ref>(std::ostream<sp/>&amp;s,<sp/><ref refid="structpairstruct" kindref="compound">pairstruct&lt;F, S&gt;</ref><sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;f:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v.<ref refid="structpairstruct_1a1a17700bea9dc60e3011204fede1a9e9" kindref="member">first</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>s:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v.<ref refid="structpairstruct_1aa5a79515342867606403ab3fce598304" kindref="member">second</ref>;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="256" refid="lite2_8h_1aa3573f8fe9ec3c4e1dab0877beaeb5f4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/>&amp;<ref refid="lite2_8h_1aa3573f8fe9ec3c4e1dab0877beaeb5f4" kindref="member">operator-=</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/>&amp;it1,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/>it2)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/>tp<sp/>=<sp/>it1;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>tp;<sp/>++tp,<sp/>++it2)<sp/>*tp<sp/>-=<sp/>*it2;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it1;</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/>Template<sp/>class<sp/>to<sp/>define<sp/>container<sp/>in<sp/>the<sp/>form<sp/>of<sp/>vector.</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/>Is<sp/>explicitly<sp/>derived<sp/>from<sp/>ShortIterator.<sp/>In<sp/>addition,</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/>supports<sp/>memory<sp/>allocation<sp/>and<sp/>deallocation,<sp/>validity</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/>check<sp/>(operator<sp/>void<sp/>*),<sp/>add-to-the-container<sp/>function</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/>(operator<sp/>&lt;&lt;),<sp/>current<sp/>size<sp/>(function<sp/>count()),</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/>adaptor<sp/>to<sp/>a<sp/>corresponding<sp/>input<sp/>iterator.</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/>Elements<sp/>can<sp/>not<sp/>be<sp/>taken<sp/>from<sp/>the<sp/>container<sp/>other<sp/>way<sp/>but</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/>destroying<sp/>it,<sp/>rather<sp/>they<sp/>can<sp/>be<sp/>copied<sp/>(all<sp/>or<sp/>part)<sp/>using</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/>input<sp/>iterator<sp/>adapter.<sp/>Elements<sp/>can<sp/>be<sp/>added<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/>container<sp/>at<sp/>any<sp/>time<sp/>and<sp/>only<sp/>at<sp/>the<sp/>end<sp/>by<sp/>applying</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/>operator<sp/>&lt;&lt;.</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="277" refid="class_vector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_vector_1a3ae65492cbc923d327de8e518c6c3921" kindref="member">Vector</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_short_iterator_1abb8cb59442db13d6953a81ba7e075e5a" kindref="member">ShortIterator</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="279" refid="class_vector_1a02f9e5a029f71cf4ef32ea0940103f3c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a3ae65492cbc923d327de8e518c6c3921" kindref="member">Vector&lt;T&gt;</ref><sp/><ref refid="class_vector_1a02f9e5a029f71cf4ef32ea0940103f3c" kindref="member">self</ref>;</highlight></codeline>
<codeline lineno="280" refid="class_vector_1a6d8f4accea3727e197184e6eaeaf6d0d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_s_l___iterator" kindref="compound">SL_Iterator</ref><sp/><ref refid="class_vector_1a6d8f4accea3727e197184e6eaeaf6d0d" kindref="member">iterator_type</ref>;</highlight></codeline>
<codeline lineno="281" refid="class_vector_1a12449554072b5e05998c3e5607dcc2e3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/><ref refid="class_vector_1a12449554072b5e05998c3e5607dcc2e3" kindref="member">input_iterator</ref>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="class_vector_1a3ae65492cbc923d327de8e518c6c3921" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vector_1a3ae65492cbc923d327de8e518c6c3921" kindref="member">Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>initsize<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vector_1a864d1f7b69f57a633f3b248fad3619ee" kindref="member">alloc</ref>(initsize);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287" refid="class_vector_1a5f057c98bd2bdb3c918beda73ad5c7cb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vector_1a5f057c98bd2bdb3c918beda73ad5c7cb" kindref="member">Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>initsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>initvalue)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vector_1a864d1f7b69f57a633f3b248fad3619ee" kindref="member">alloc</ref>(initsize,<sp/>initvalue);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="291" refid="class_vector_1aa0b652b56baf967e57714f65eaae8063" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vector_1aa0b652b56baf967e57714f65eaae8063" kindref="member">Vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a3ae65492cbc923d327de8e518c6c3921" kindref="member">Vector&lt;T&gt;</ref><sp/>&amp;from)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vector_1ae4c41304edf8d979e751bcb1ae2c627e" kindref="member">copy</ref>(from());</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295" refid="class_vector_1ac35fa09d494a18708f182bf546f93363" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vector_1ac35fa09d494a18708f182bf546f93363" kindref="member">Vector</ref>(<ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*array,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a9b439586cd10cb45d002ca9d6e3db43c" kindref="member">size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref><sp/>=<sp/>array;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vector_1a0fd3434801c6378fdb12167bbfc61614" kindref="member">sz</ref><sp/>=<sp/><ref refid="class_vector_1a9b439586cd10cb45d002ca9d6e3db43c" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref><sp/>=<sp/><ref refid="class_vector_1a5ec0d126a6e0719e8aba43f7bb63788e" kindref="member">end</ref><sp/>=<sp/>array<sp/>+<sp/><ref refid="class_vector_1a0fd3434801c6378fdb12167bbfc61614" kindref="member">sz</ref>;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="300" refid="class_vector_1afd524fac19e6d3d69db5198ffe2952b0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vector_1afd524fac19e6d3d69db5198ffe2952b0" kindref="member">~Vector</ref>()<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="class_vector_1a122ac189204ac047cac1e7b174fec789" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(<ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref><sp/>&lt;<sp/><ref refid="class_vector_1a5ec0d126a6e0719e8aba43f7bb63788e" kindref="member">end</ref>);<sp/>}</highlight></codeline>
<codeline lineno="307" refid="class_vector_1a90e85e82ba014cf1c4b7c0c48a28fa9d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vector_1a3ae65492cbc923d327de8e518c6c3921" kindref="member">Vector</ref><sp/>&amp;<ref refid="class_vector_1a90e85e82ba014cf1c4b7c0c48a28fa9d" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(<ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref><sp/>&lt;<sp/><ref refid="class_vector_1a5ec0d126a6e0719e8aba43f7bb63788e" kindref="member">end</ref>))<sp/>realloc((<ref refid="class_vector_1a0fd3434801c6378fdb12167bbfc61614" kindref="member">sz</ref><sp/>+<sp/>1)<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref>)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*(<ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref>)++<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="314" refid="class_vector_1a517904e4c58bad18352f60711290cddd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vector_1a12449554072b5e05998c3e5607dcc2e3" kindref="member">input_iterator</ref><sp/><ref refid="class_vector_1a517904e4c58bad18352f60711290cddd" kindref="member">operator()</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a12449554072b5e05998c3e5607dcc2e3" kindref="member">input_iterator</ref>(<ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>,<sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref>);<sp/>}</highlight></codeline>
<codeline lineno="315" refid="class_vector_1aa87589ad4e4ce072148ad7339cecd1ec" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vector_1a12449554072b5e05998c3e5607dcc2e3" kindref="member">input_iterator</ref><sp/><ref refid="class_vector_1aa87589ad4e4ce072148ad7339cecd1ec" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dim)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rdim<sp/>=<sp/><ref refid="lite2_8h_1ae57614aa49a6298bfcef92612873e04d" kindref="member">sl_min</ref>(dim,<sp/><ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a12449554072b5e05998c3e5607dcc2e3" kindref="member">input_iterator</ref>(<ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>,<sp/>rdim);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="319" refid="class_vector_1ac1fa84ca41982c93980996053dfe6991" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>&amp;<ref refid="class_vector_1ac1fa84ca41982c93980996053dfe6991" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>loc)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>[loc];<sp/>}</highlight></codeline>
<codeline lineno="320" refid="class_vector_1a5cf8e7cab819d8d26e7049a178d58014" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>&amp;<ref refid="class_vector_1a5cf8e7cab819d8d26e7049a178d58014" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>loc)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>[loc];<sp/>}</highlight></codeline>
<codeline lineno="321" refid="class_vector_1aa180e41d75824c650d74115c9d456230" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vector_1a02f9e5a029f71cf4ef32ea0940103f3c" kindref="member">self</ref><sp/>&amp;<ref refid="class_vector_1aa180e41d75824c650d74115c9d456230" kindref="member">operator=</ref>(<ref refid="class_vector_1a02f9e5a029f71cf4ef32ea0940103f3c" kindref="member">self</ref><sp/>&amp;from);</highlight></codeline>
<codeline lineno="322" refid="class_vector_1a6fff35341bb311837fedc45a3038e6f3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vector_1a02f9e5a029f71cf4ef32ea0940103f3c" kindref="member">self</ref><sp/>&amp;<ref refid="class_vector_1a6fff35341bb311837fedc45a3038e6f3" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a02f9e5a029f71cf4ef32ea0940103f3c" kindref="member">self</ref><sp/>&amp;from);<sp/><sp/></highlight><highlight class="comment">//<sp/>MMM:<sp/>something<sp/>is<sp/>fishy<sp/>with<sp/>this<sp/>overloaded<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>don&apos;t<sp/>touch<sp/>these!<sp/><sp/>Commenting<sp/>out<sp/>one<sp/>or<sp/>the<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>produces<sp/>strange<sp/>errors<sp/>(either<sp/>seg<sp/>fault,<sp/>or<sp/>wrong<sp/>values).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="class_vector_1a3762bf4b079290011c9dbe7bd835c0f6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="class_vector_1a02f9e5a029f71cf4ef32ea0940103f3c" kindref="member">self</ref><sp/>&amp;<ref refid="class_vector_1a3762bf4b079290011c9dbe7bd835c0f6" kindref="member">operator=</ref>(<ref refid="class_vector_1a02f9e5a029f71cf4ef32ea0940103f3c" kindref="member">self</ref><sp/>*from);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="class_vector_1a864d1f7b69f57a633f3b248fad3619ee" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a864d1f7b69f57a633f3b248fad3619ee" kindref="member">alloc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>initsize<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="328" refid="class_vector_1a3d4aaeb95cdd277a335783cf6b0193d1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a3d4aaeb95cdd277a335783cf6b0193d1" kindref="member">alloc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>initsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>initvalue);</highlight></codeline>
<codeline lineno="329" refid="class_vector_1a32ad98b135472b0ebc5d6cb3ae5d0085" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a32ad98b135472b0ebc5d6cb3ae5d0085" kindref="member">clear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref><sp/>=<sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vector_1a0fd3434801c6378fdb12167bbfc61614" kindref="member">sz</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vector_1a5ec0d126a6e0719e8aba43f7bb63788e" kindref="member">end</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="336" refid="class_vector_1ae4c41304edf8d979e751bcb1ae2c627e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_vector_1ae4c41304edf8d979e751bcb1ae2c627e" kindref="member">copy</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/>from);</highlight></codeline>
<codeline lineno="337" refid="class_vector_1af45f4326d063c568d21181d0d5738838" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref><sp/>-<sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>;<sp/>}</highlight></codeline>
<codeline lineno="338" refid="class_vector_1a557dae0338b7c4f08a58cae39a7df869" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a557dae0338b7c4f08a58cae39a7df869" kindref="member">destroy</ref>()<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="343" refid="class_vector_1ad688a8a0dfbd07ea63d838058a436f79" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_vector_1ad688a8a0dfbd07ea63d838058a436f79" kindref="member">empty</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref><sp/>==<sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>;<sp/>}</highlight></codeline>
<codeline lineno="344" refid="class_vector_1a53aad8ce8c9b993a8d4db1734a8f7cee" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*<ref refid="class_vector_1a53aad8ce8c9b993a8d4db1734a8f7cee" kindref="member">first</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>;<sp/>}</highlight></codeline>
<codeline lineno="345" refid="class_vector_1ae5041c136faabeccd5ed9f519c9f4e80" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*<ref refid="class_vector_1ae5041c136faabeccd5ed9f519c9f4e80" kindref="member">last</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref><sp/>-<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="346" refid="class_vector_1aecbdf33f934d6f2803e08c65d9c2fd1d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vector_1aecbdf33f934d6f2803e08c65d9c2fd1d" kindref="member">reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref><sp/>=<sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="350" refid="class_vector_1ad68b022fd919c10c8ebef99b739294e8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vector_1ad68b022fd919c10c8ebef99b739294e8" kindref="member">reset</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&lt;<sp/>0)<sp/>s<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="class_vector_1a0fd3434801c6378fdb12167bbfc61614" kindref="member">sz</ref>)<sp/>s<sp/>=<sp/><ref refid="class_vector_1a0fd3434801c6378fdb12167bbfc61614" kindref="member">sz</ref>;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref><sp/>=<sp/>&amp;<ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>[s];</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="355" refid="class_vector_1ad8bbf4b4aa450d119ec2c44c80e71ae6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vector_1ad8bbf4b4aa450d119ec2c44c80e71ae6" kindref="member">fill</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>initsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>initvalue);</highlight></codeline>
<codeline lineno="356" refid="class_vector_1a9b439586cd10cb45d002ca9d6e3db43c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a9b439586cd10cb45d002ca9d6e3db43c" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a0fd3434801c6378fdb12167bbfc61614" kindref="member">sz</ref>;<sp/>}</highlight></codeline>
<codeline lineno="357" refid="class_vector_1a3cd35c20c654363bb9e0c3ea77f977e0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a3cd35c20c654363bb9e0c3ea77f977e0" kindref="member">Swap</ref>(<ref refid="class_vector_1a02f9e5a029f71cf4ef32ea0940103f3c" kindref="member">self</ref><sp/>&amp;with);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="360" refid="class_vector_1a0fd3434801c6378fdb12167bbfc61614" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a0fd3434801c6378fdb12167bbfc61614" kindref="member">sz</ref>;</highlight></codeline>
<codeline lineno="361" refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*<ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>;</highlight></codeline>
<codeline lineno="362" refid="class_vector_1a5ec0d126a6e0719e8aba43f7bb63788e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*<ref refid="class_vector_1a5ec0d126a6e0719e8aba43f7bb63788e" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>realloc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newsize);</highlight></codeline>
<codeline lineno="366"><highlight class="normal">};</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">//***</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//***</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="371" refid="class_vector_1ad8bbf4b4aa450d119ec2c44c80e71ae6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vector_1ad8bbf4b4aa450d119ec2c44c80e71ae6" kindref="member">Vector&lt;T&gt;::fill</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>initsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>initvalue)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref><sp/>=<sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>initsize;<sp/>cnt;<sp/>--cnt)<sp/>*(<ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref>)++<sp/>=<sp/>initvalue;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="380" refid="class_vector_1aa180e41d75824c650d74115c9d456230" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a3ae65492cbc923d327de8e518c6c3921" kindref="member">Vector&lt;T&gt;</ref><sp/>&amp;<ref refid="class_vector_1aa180e41d75824c650d74115c9d456230" kindref="member">Vector&lt;T&gt;::operator=</ref>(<ref refid="class_vector_1a3ae65492cbc923d327de8e518c6c3921" kindref="member">Vector&lt;T&gt;</ref><sp/>&amp;from)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;from)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;from,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(from));</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>from.<ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="391" refid="class_vector_1a6fff35341bb311837fedc45a3038e6f3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a3ae65492cbc923d327de8e518c6c3921" kindref="member">Vector&lt;T&gt;</ref><sp/>&amp;<ref refid="class_vector_1aa180e41d75824c650d74115c9d456230" kindref="member">Vector&lt;T&gt;::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a3ae65492cbc923d327de8e518c6c3921" kindref="member">Vector&lt;T&gt;</ref><sp/>&amp;from)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;from)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1a1d81280768a70e67bf08d193ca3e7ff0" kindref="member">copy</ref>(from());</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="402" refid="class_vector_1a3762bf4b079290011c9dbe7bd835c0f6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a3ae65492cbc923d327de8e518c6c3921" kindref="member">Vector&lt;T&gt;</ref><sp/>&amp;<ref refid="class_vector_1aa180e41d75824c650d74115c9d456230" kindref="member">Vector&lt;T&gt;::operator=</ref>(<ref refid="class_vector_1a3ae65492cbc923d327de8e518c6c3921" kindref="member">Vector&lt;T&gt;</ref><sp/>*from)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>from)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>release<sp/>whatever<sp/>we<sp/>might<sp/>have<sp/>had<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>from,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*from));<sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>all<sp/>relevant<sp/>data<sp/>:<sp/>(1)<sp/>copy<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>from-&gt;<ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref><sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(2)<sp/>mark<sp/>the<sp/>source<sp/>as<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="414" refid="class_vector_1ae4c41304edf8d979e751bcb1ae2c627e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_vector_1ae4c41304edf8d979e751bcb1ae2c627e" kindref="member">Vector&lt;T&gt;::copy</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/>from)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>from.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mix_8h_1a4707176f2cd6eb4dc734fffb6cf10feb" kindref="member">alloc</ref>(dim);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>*(<ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref>)++<sp/>=<sp/>*from++;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(from);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dim;</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="425" refid="class_vector_1a3d4aaeb95cdd277a335783cf6b0193d1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a864d1f7b69f57a633f3b248fad3619ee" kindref="member">Vector&lt;T&gt;::alloc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>initsize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>initvalue)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><ref refid="mix_8h_1a4707176f2cd6eb4dc734fffb6cf10feb" kindref="member">alloc</ref>(initsize);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>initsize;<sp/>cnt;<sp/>--cnt)<sp/>*(<ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref>)++<sp/>=<sp/>initvalue;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="434" refid="class_vector_1a3cd35c20c654363bb9e0c3ea77f977e0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a3cd35c20c654363bb9e0c3ea77f977e0" kindref="member">Vector&lt;T&gt;::Swap</ref>(<ref refid="class_vector_1a3ae65492cbc923d327de8e518c6c3921" kindref="member">Vector&lt;T&gt;</ref><sp/>&amp;with)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*buffer<sp/>=<sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref><sp/>=<sp/>with.<ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>with.<ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref><sp/>=<sp/>buffer;<sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>begin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>buffer<sp/>=<sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref>;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref><sp/>=<sp/>with.<ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ptr</ref>;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>with.<ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ptr</ref><sp/>=<sp/>buffer;<sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>buffer<sp/>=<sp/><ref refid="class_vector_1a5ec0d126a6e0719e8aba43f7bb63788e" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><ref refid="class_vector_1a5ec0d126a6e0719e8aba43f7bb63788e" kindref="member">end</ref><sp/>=<sp/>with.<ref refid="class_vector_1a5ec0d126a6e0719e8aba43f7bb63788e" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>with.<ref refid="class_vector_1a5ec0d126a6e0719e8aba43f7bb63788e" kindref="member">end</ref><sp/>=<sp/>buffer;<sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1a12f5988d0e8de3bb2ed9583ae905d8bd" kindref="member">GDA_SWAP</ref>(<ref refid="class_vector_1a0fd3434801c6378fdb12167bbfc61614" kindref="member">sz</ref>,<sp/>with.<ref refid="class_vector_1a0fd3434801c6378fdb12167bbfc61614" kindref="member">sz</ref>,<sp/>t);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/><sp/><sp/>Allocates<sp/>Vector<sp/>of<sp/>given<sp/>size<sp/>and<sp/>initializes<sp/>all</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/><sp/><sp/>iterators.<sp/>-<sp/>Functionally<sp/>implemented<sp/>is<sp/>that<sp/>of<sp/>a<sp/>constructor,</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/><sp/>though<sp/>it<sp/>is<sp/>not<sp/>a<sp/>constructor.</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/><sp/><sp/>Enables<sp/>one<sp/>to<sp/>have<sp/>separate<sp/>declaration<sp/>and<sp/>allocation<sp/>of</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/><sp/><sp/>a<sp/>vector<sp/>-<sp/>a<sp/>necessity<sp/>for<sp/>dynamic<sp/>structures.</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="458" refid="class_vector_1a864d1f7b69f57a633f3b248fad3619ee" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a864d1f7b69f57a633f3b248fad3619ee" kindref="member">Vector&lt;T&gt;::alloc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>initsize)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><ref refid="class_vector_1a0fd3434801c6378fdb12167bbfc61614" kindref="member">sz</ref><sp/>=<sp/>initsize;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_vector_1a0fd3434801c6378fdb12167bbfc61614" kindref="member">sz</ref>)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>const<sp/>int<sp/>saveCount=<sp/>newCount;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref>[<ref refid="class_vector_1a0fd3434801c6378fdb12167bbfc61614" kindref="member">sz</ref>];</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>newCount=<sp/>saveCount+1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vector_1a5ec0d126a6e0719e8aba43f7bb63788e" kindref="member">end</ref><sp/>=<sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref><sp/>+<sp/><ref refid="class_vector_1a0fd3434801c6378fdb12167bbfc61614" kindref="member">sz</ref>;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vector_1a5ec0d126a6e0719e8aba43f7bb63788e" kindref="member">end</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><ref refid="class_short_iterator_1a40ae249b29a01c173bc2654f7a7bb066" kindref="member">ShortIterator&lt;T&gt;::ptr</ref><sp/>=<sp/><ref refid="class_vector_1a087d2c56a7259a3d6d75573809769a51" kindref="member">begin</ref>;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>realloc</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/>Replaces<sp/>existing<sp/>Vector<sp/>with<sp/>one<sp/>of<sp/>given<sp/>size<sp/>(or<sp/>adjusted</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/>to<sp/>accomodate<sp/>existing<sp/>data).<sp/>All<sp/>data<sp/>are<sp/>copied<sp/>from<sp/>the<sp/>old<sp/>vector</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/><sp/>to<sp/>the<sp/>new<sp/>one<sp/>and<sp/>memory<sp/>from<sp/>the<sp/>old<sp/>one<sp/>is<sp/>released.<sp/>Safegurded</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/>against<sp/>allocating<sp/>too<sp/>small<sp/>vector<sp/>to<sp/>avoid<sp/>possible<sp/>loss<sp/>of<sp/>data.</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Vector&lt;T&gt;::realloc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newsize)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>self<sp/>NewVector(<ref refid="lite2_8h_1a94d786927b0409afc505ac352d4acd46" kindref="member">sl_max</ref>(count(),<sp/>newsize));<sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>new<sp/>Vector<sp/>of<sp/>given<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1acfc62f638d7f256178130be948c921f6" kindref="member">Copy</ref>(NewVector,<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>contents<sp/>of<sp/>existing<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>destroy();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>release<sp/>memory<sp/>from<sp/>the<sp/>old<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>NewVector;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>new<sp/>one<sp/>replaces<sp/>the<sp/>old<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>NewVector=<sp/>self(NULL);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>&apos;nullify&apos;<sp/>the<sp/>temporary<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HeapSort</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/><sp/><sp/>Sorts<sp/>vector<sp/>in<sp/>the<sp/>ascending<sp/>order,<sp/>using<sp/>HeapSort.</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/><sp/><sp/>Assumes<sp/>operator<sp/>&lt;<sp/>is<sp/>defined.</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/><sp/><sp/>For<sp/>basic<sp/>idea<sp/>see<sp/>Numerical<sp/>Recipes<sp/>in<sp/>C.,<sp/>p.247.</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="497" refid="lite2_8h_1a296bbd8b511d9d0ec7e41b6203569c0d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a296bbd8b511d9d0ec7e41b6203569c0d" kindref="member">HeapSort</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>half<sp/>=<sp/>v.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>()<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(half<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>to<sp/>sort;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*start<sp/>=<sp/>v.<ref refid="class_iterator_1a6e5276437e645efc8da75c4609fdff5b" kindref="member">first</ref>();</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*hire<sp/>=<sp/>start<sp/>+<sp/>half,<sp/>*boss,<sp/>*empl;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>hire<sp/>will<sp/>be<sp/>decremented<sp/>down<sp/>to<sp/>begin<sp/>during<sp/>the<sp/>&apos;hiring&apos;<sp/>(heap<sp/>creation).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>*ir<sp/>=<sp/>v.<ref refid="class_iterator_1a6aee1057c202f255a23a0b841ab16e44" kindref="member">last</ref>();</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>rra;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ir<sp/>&gt;<sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hire<sp/>&gt;<sp/>start)</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rra<sp/>=<sp/>*(--hire);<sp/><sp/></highlight><highlight class="comment">//<sp/>still<sp/>hiring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>retirement<sp/>and<sp/>promotion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rra<sp/>=<sp/>*ir;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>space<sp/>at<sp/>end<sp/>of<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ir--<sp/>=<sp/>*start;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>retire<sp/>the<sp/>top<sp/>of<sp/>the<sp/>heap<sp/>into<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>boss<sp/>=<sp/>hire;<sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>up<sp/>to<sp/>sift<sp/>down<sp/>rra<sp/>to<sp/>its<sp/>proper<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>empl<sp/>=<sp/>boss<sp/>+<sp/>(boss<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(++empl<sp/>&lt;=<sp/>ir)<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(empl<sp/>&lt;<sp/>ir<sp/>&amp;&amp;<sp/>*empl<sp/>&lt;<sp/>*(empl<sp/>+<sp/>1))<sp/>++empl;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rra<sp/>&lt;<sp/>*empl)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>demote<sp/>rra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*boss<sp/>=<sp/>*empl;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boss<sp/>=<sp/>empl;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>empl<sp/>=<sp/>boss<sp/>+<sp/>(boss<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>empl<sp/>=<sp/>ir;<sp/><sp/></highlight><highlight class="comment">//<sp/>rra<sp/>is<sp/>already<sp/>in<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>*boss<sp/>=<sp/>rra;<sp/><sp/></highlight><highlight class="comment">//<sp/>i<sp/>is<sp/>right<sp/>place<sp/>for<sp/>rra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accumulator<sp/>-<sp/>for<sp/>iterator</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/><sp/><sp/>Generic<sp/>function<sp/>of<sp/>two<sp/>arguments,<sp/>first<sp/>is<sp/>a<sp/>container</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/><sp/><sp/>over<sp/>which<sp/>the<sp/>iterative<sp/>accumulation<sp/>procedure<sp/>is<sp/>performed,</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/><sp/><sp/>the<sp/>second<sp/>is<sp/>a<sp/>valid<sp/>expression<sp/>that<sp/>can<sp/>be<sp/>interpreted</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/><sp/><sp/>as<sp/>a<sp/>function<sp/>of<sp/>one<sp/>argument.<sp/>Accumulator<sp/>computes<sp/>the</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/><sp/><sp/>sum<sp/>of<sp/>results<sp/>derived<sp/>by<sp/>applying<sp/>function<sp/>f()<sp/>to<sp/>each</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/><sp/><sp/>element<sp/>of<sp/>the<sp/>container.<sp/>The<sp/>total<sp/>is<sp/>returned<sp/>as<sp/>result.</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/><sp/><sp/>The<sp/>type<sp/>of<sp/>result<sp/>is<sp/>the<sp/>same<sp/>as<sp/>type<sp/>of<sp/>elements<sp/>of<sp/>a</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/><sp/><sp/>container.</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="540" refid="lite2_8h_1a93ec93381fc1f75057b7f45937ff55dc" refkind="member"><highlight class="normal">D<sp/><ref refid="lite2_8h_1a93ec93381fc1f75057b7f45937ff55dc" kindref="member">accumulator</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;D&gt;</ref><sp/>v,<sp/>F<sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>D<sp/>acc(0);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(v)<sp/>acc<sp/>+=<sp/>f(*v++);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>acc;</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Destroy</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/><sp/>Template<sp/>function<sp/>to<sp/>destroy<sp/>all<sp/>elements<sp/>of<sp/>a<sp/>vector.</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="551" refid="lite2_8h_1ae23d69c5116873b5abc88978a129d1ff" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ae23d69c5116873b5abc88978a129d1ff" kindref="member">Destroy</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>more<sp/>elements<sp/>in<sp/>the<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>(*it).destroy();<sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>a<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;</highlight></codeline>
<codeline lineno="560" refid="lite2_8h_1a31fbc4cff08b760d1ffc26e6b395e7e5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a31fbc4cff08b760d1ffc26e6b395e7e5" kindref="member">CopyInput</ref>(<ref refid="class_vector" kindref="compound">Vector&lt;X&gt;</ref><sp/>&amp;dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>int&gt;<sp/>&amp;nbl,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>X<sp/>v;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>nbl[i];</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>dest<sp/>&lt;&lt;<sp/>v;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;</highlight></codeline>
<codeline lineno="569" refid="lite2_8h_1a068bdac0bd10887d43c8495d1511aade" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a31fbc4cff08b760d1ffc26e6b395e7e5" kindref="member">CopyInput</ref>(<ref refid="class_vector" kindref="compound">Vector&lt;X&gt;</ref><sp/>&amp;dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>int&gt;<sp/>&amp;nbl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/>&amp;wtl,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>X<sp/>v;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/><ref refid="structpairstruct" kindref="compound">pairstruct&lt;INDEX, VALUE&gt;</ref>(nbl[i],<sp/>wtl[i]);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>dest<sp/>&lt;&lt;<sp/>v;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Y&gt;</highlight></codeline>
<codeline lineno="580" refid="lite2_8h_1acfc62f638d7f256178130be948c921f6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1acfc62f638d7f256178130be948c921f6" kindref="member">Copy</ref>(X<sp/>&amp;dest,<sp/>Y<sp/>src)<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(src)<sp/>dest<sp/>&lt;&lt;<sp/>*src++;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="583"><highlight class="normal">};</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="588" refid="lite2_8h_1a31c3e1107de675a688243b89d96b40ba" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a31c3e1107de675a688243b89d96b40ba" kindref="member">Values</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/>it,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>threshold)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it;<sp/>++it)</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*it<sp/>&gt;<sp/>threshold)<sp/>++Cnt;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Cnt;</highlight></codeline>
<codeline lineno="593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__SC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAP(K,<sp/>T)<sp/>Vector&lt;pairstruct&lt;K,<sp/>T&gt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="599" refid="struct_map__types" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_map__types" kindref="compound">Map_types</ref><sp/>{</highlight></codeline>
<codeline lineno="600" refid="struct_map__types_1afe5fcc27efd29caef1f87b1ff07668bf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structpairstruct" kindref="compound">pairstruct&lt;K, T&gt;</ref><sp/><ref refid="struct_map__types_1afe5fcc27efd29caef1f87b1ff07668bf" kindref="member">map_data</ref>;</highlight></codeline>
<codeline lineno="601" refid="struct_map__types_1a2275788219f306f9e4af37bc350e01a7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector&lt;map_data&gt;</ref><sp/><ref refid="struct_map__types_1a2275788219f306f9e4af37bc350e01a7" kindref="member">map_container</ref>;</highlight></codeline>
<codeline lineno="602"><highlight class="normal">};</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604" refid="lite2_8h_1af130a8cc637c0980d7d2e9d85e336ffb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAP(K,<sp/>T)<sp/>Map_types&lt;K,<sp/>T&gt;::map_container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607" refid="lite2_8h_1aa5cc9c44184affabe7dbac94d90f2854" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structpairstruct" kindref="compound">pairstruct&lt;INDEX, VALUE&gt;</ref><sp/><ref refid="lite2_8h_1aa5cc9c44184affabe7dbac94d90f2854" kindref="member">WPair</ref>;</highlight></codeline>
<codeline lineno="608" refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector&lt;WPair&gt;</ref><sp/><ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref>;</highlight></codeline>
<codeline lineno="609" refid="lite2_8h_1a4c7688b643a08fd9b048deecbb9376b5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector&lt;WMap&gt;</ref><sp/><ref refid="lite2_8h_1a4c7688b643a08fd9b048deecbb9376b5" kindref="member">GWT</ref>;</highlight></codeline>
<codeline lineno="610" refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector&lt;VALUE&gt;</ref><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref>;</highlight></codeline>
<codeline lineno="611" refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;VALUE&gt;</ref><sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref>;</highlight></codeline>
<codeline lineno="612" refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector&lt;WVector&gt;</ref><sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref>;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614" refid="lite2_8h_1a7dd6ec971b6f46098cb10e81b3fb0e9c" refkind="member"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a7dd6ec971b6f46098cb10e81b3fb0e9c" kindref="member">Product</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;VALUE&gt;</ref><sp/>it1,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;VALUE&gt;</ref><sp/>it2)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref>(0);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it1;<sp/>++it1,<sp/>++it2)<sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref><sp/>+=<sp/>*it1<sp/>*<sp/>*it2;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref>;</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="621" refid="lite2_8h_1aa1370876f2c781f443356f2a7b4d4b9c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/><ref refid="lite2_8h_1aa1370876f2c781f443356f2a7b4d4b9c" kindref="member">Sum</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref>(0);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it;<sp/>++it)<sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref><sp/>+=<sp/>*it;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref>;</highlight></codeline>
<codeline lineno="625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627" refid="lite2_8h_1a1741d3eff97d95cc971de2b1fea89cd2" refkind="member"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a7dd6ec971b6f46098cb10e81b3fb0e9c" kindref="member">Product</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WPair&gt;</ref><sp/>it1,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;VALUE&gt;</ref><sp/>it2)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref>(0);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it1;<sp/>++it1)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref><sp/>+=<sp/>(*it1).second<sp/>*<sp/>it2[(*it1).first];</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref>;</highlight></codeline>
<codeline lineno="633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="636" refid="lite2_8h_1a839cd9f66fbef0921b0d1b18bc9b7aaa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector&lt;T&gt;</ref><sp/>&amp;<ref refid="lite2_8h_1aa3573f8fe9ec3c4e1dab0877beaeb5f4" kindref="member">operator-=</ref>(<ref refid="class_vector" kindref="compound">Vector&lt;T&gt;</ref><sp/>&amp;v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector&lt;T&gt;</ref><sp/>&amp;v2)<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/>it1<sp/>=<sp/>v1(),<sp/>it2<sp/>=<sp/>v2();</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it1;<sp/>++it1,<sp/>++it2)<sp/>*it1<sp/>-=<sp/>*it2;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1;</highlight></codeline>
<codeline lineno="640"><highlight class="normal">}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="643" refid="lite2_8h_1a8d3f811d884aa29aea7ac90b301e180f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector&lt;T&gt;</ref><sp/>&amp;<ref refid="lite2_8h_1a8d3f811d884aa29aea7ac90b301e180f" kindref="member">operator+=</ref>(<ref refid="class_vector" kindref="compound">Vector&lt;T&gt;</ref><sp/>&amp;v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector&lt;T&gt;</ref><sp/>&amp;v2)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/>it1<sp/>=<sp/>v1(),<sp/>it2<sp/>=<sp/>v2();</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it1;<sp/>++it1,<sp/>++it2)<sp/>*it1<sp/>+=<sp/>*it2;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1;</highlight></codeline>
<codeline lineno="647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="650" refid="lite2_8h_1a51c1244e34e1dc616228075c5f9cfcc2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="class_vector" kindref="compound">Vector&lt;T&gt;</ref><sp/>&amp;<ref refid="lite2_8h_1a51c1244e34e1dc616228075c5f9cfcc2" kindref="member">operator*=</ref>(<ref refid="class_vector" kindref="compound">Vector&lt;T&gt;</ref><sp/>&amp;v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="smile2_8cpp_1a7f4206808832737986bb37074e92cba9" kindref="member">T</ref><sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/>it1<sp/>=<sp/>v1();</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it1;<sp/>++it1)<sp/>*it1<sp/>*=<sp/>v2;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1;</highlight></codeline>
<codeline lineno="654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Find</highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/><sp/><sp/>Finds<sp/>an<sp/>element<sp/>with<sp/>a<sp/>given<sp/>key.<sp/>Performs<sp/>binary</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/><sp/><sp/>search.<sp/>Assumes<sp/>the<sp/>vector<sp/>has<sp/>been<sp/>previously<sp/>sorted.</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/><sp/><sp/>Returns<sp/>NULL<sp/>if<sp/>not<sp/>found.</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Pair,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Key&gt;</highlight></codeline>
<codeline lineno="663" refid="lite2_8h_1a194ef7f2fe4817fac79a07166697bb7a" refkind="member"><highlight class="normal">Pair<sp/>*<ref refid="lite2_8h_1a194ef7f2fe4817fac79a07166697bb7a" kindref="member">Find</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;Pair&gt;</ref><sp/>it,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key<sp/>What)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>Pair<sp/>*Sta<sp/>=<sp/>it(),<sp/>*Sto<sp/>=<sp/>it.<ref refid="class_iterator_1a6aee1057c202f255a23a0b841ab16e44" kindref="member">last</ref>(),<sp/>*Median;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>Median<sp/>=<sp/>Sta<sp/>+<sp/>(Sto<sp/>-<sp/>Sta)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Median-&gt;first<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)What)</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Sta<sp/>=<sp/>Median<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Median-&gt;first<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)What)</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Sto<sp/>=<sp/>Median<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Sta<sp/>=<sp/>Sto<sp/>=<sp/>Median;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Sta<sp/>&lt;<sp/>Sto);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Sto-&gt;first<sp/>==<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)What)<sp/>?<sp/>Sto<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Pair,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Key&gt;</highlight></codeline>
<codeline lineno="678" refid="lite2_8h_1aeb88d60e36e6908449b26209f7928c76" refkind="member"><highlight class="normal">Pair<sp/>*<ref refid="lite2_8h_1aeb88d60e36e6908449b26209f7928c76" kindref="member">FindW</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;Pair&gt;</ref><sp/>it,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key<sp/>What)<sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>Pair<sp/>*Sta<sp/>=<sp/>it(),<sp/>*Sto<sp/>=<sp/>it.<ref refid="class_iterator_1a6aee1057c202f255a23a0b841ab16e44" kindref="member">last</ref>(),<sp/>*Median;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>Median<sp/>=<sp/>Sta<sp/>+<sp/>(Sto<sp/>-<sp/>Sta)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Median-&gt;first<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)What.first)</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Sta<sp/>=<sp/>Median<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Median-&gt;first<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)What.first)</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Sto<sp/>=<sp/>Median<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Sta<sp/>=<sp/>Sto<sp/>=<sp/>Median;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Sta<sp/>&lt;<sp/>Sto);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Sto-&gt;first<sp/>==<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)What.first)<sp/>?<sp/>Sto<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ColumnMultiply</highlight></codeline>
<codeline lineno="694"><highlight class="comment">product<sp/>is<sp/>a<sp/>column-vector,<sp/>that<sp/>results<sp/>from<sp/>matrix<sp/>(mt)</highlight></codeline>
<codeline lineno="695"><highlight class="comment">and<sp/>vector<sp/>(column)<sp/>multiplication.</highlight></codeline>
<codeline lineno="696"><highlight class="comment">Assumes<sp/>all<sp/>objects<sp/>already<sp/>exist.</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>&lt;class<sp/>R&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699" refid="lite2_8h_1af2d4a6e9c58b3995943f051b2b709bb1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1af2d4a6e9c58b3995943f051b2b709bb1" kindref="member">ColumnMultiply</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;VALUE&gt;</ref><sp/>column,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt,<sp/><ref refid="class_vector" kindref="compound">Vector&lt;VALUE&gt;</ref><sp/>&amp;<ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref>)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref>.reset();</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>mt;<sp/>++mt)<sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>TmpResult<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WPair&gt;</ref><sp/>it<sp/>=<sp/>(*mt)();</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it;<sp/>++it)<sp/>TmpResult<sp/>+=<sp/>column[(*it).first]<sp/>*<sp/>(*it).second;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="mix_8cpp_1aa298203c6e86eac70ac4a07936ae425b" kindref="member">product</ref><sp/>&lt;&lt;<sp/>TmpResult;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710" refid="lite2_8h_1acc3471b999ba92174faec94199ed7aec" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1acc3471b999ba92174faec94199ed7aec" kindref="member">NeighborId</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WPair&gt;</ref><sp/>it)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(it)<sp/>?<sp/>(*it).first<sp/>:<sp/>INT_MAX;<sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/xun/github/geoda-lib/src/cpp/regression/lite2.h"/>
  </compounddef>
</doxygen>
