<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_sparse_matrix_8cpp" kind="file" language="C++">
    <compoundname>SparseMatrix.cpp</compoundname>
    <includes refid="_sparse_matrix_8h" local="yes">SparseMatrix.h</includes>
    <includes refid="mix_8h" local="yes">mix.h</includes>
    <includes refid="gal_8h" local="yes">weights/gal.h</includes>
    <incdepgraph>
      <node id="20">
        <label>geometry/geometry.h</label>
        <link refid="geometry_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Link.h</label>
        <link refid="_link_8h"/>
      </node>
      <node id="1">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/SparseMatrix.cpp</label>
        <link refid="_sparse_matrix_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>SparseMatrix.h</label>
        <link refid="_sparse_matrix_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>regression/SparseRow.h</label>
        <link refid="_sparse_row_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>SparseVector.h</label>
        <link refid="_sparse_vector_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>regression/dense-vector.h</label>
        <link refid="dense-vector_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>regression/mix.h</label>
        <link refid="mix_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>weights/gal.h</label>
        <link refid="gal_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>weights/weights.h</label>
        <link refid="weights_2_weights_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>algorithm</label>
      </node>
      <node id="21">
        <label>boost/geometry.hpp</label>
      </node>
      <node id="14">
        <label>fstream</label>
      </node>
      <node id="17">
        <label>functional</label>
      </node>
      <node id="15">
        <label>iostream</label>
      </node>
      <node id="22">
        <label>limits</label>
      </node>
      <node id="3">
        <label>list</label>
      </node>
      <node id="18">
        <label>map</label>
      </node>
      <node id="13">
        <label>math.h</label>
      </node>
      <node id="4">
        <label>set</label>
      </node>
      <node id="23">
        <label>string</label>
      </node>
      <node id="5">
        <label>utility</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_sparse_matrix_8h" kindref="compound">SparseMatrix.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mix_8h" kindref="compound">mix.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gal_8h" kindref="compound">weights/gal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SparseMatrix::init(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz)<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/>size<sp/>=<sp/>sz;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/>row<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SparseRow[size];</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>scale<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[size];</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>col<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>DenseVector;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>col-&gt;alloc(size);</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><ref refid="class_sparse_matrix_1a5d93890df585cae1602c07b2cbcce923" kindref="member">SparseMatrix::~SparseMatrix</ref>()<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(row)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>size;<sp/>++r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>release(<sp/>&amp;row[r]<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><ref refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" kindref="member">release</ref>(&amp;row);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><ref refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" kindref="member">release</ref>(&amp;scale);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><ref refid="class_sparse_matrix_1adf922141f434808c1e040d2898a8b2e1" kindref="member">SparseMatrix::SparseMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref><sp/>*my_gal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>obs)<sp/>{<sp/>createGAL(my_gal,<sp/>obs);<sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SparseMatrix::createGAL(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgeoda_1_1_gal_element" kindref="compound">geoda::GalElement</ref><sp/>*my_gal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>obs)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>weights<sp/>from<sp/>GAL<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix_1a6b574e9d1019686f425283b29e4aa257" kindref="member">dim</ref><sp/>=<sp/>obs;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;int,<sp/>int&gt;<sp/>Map;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>Map<sp/>*key<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Map[<ref refid="class_sparse_matrix_1a6b574e9d1019686f425283b29e4aa257" kindref="member">dim</ref>];</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>this-&gt;init(<ref refid="class_sparse_matrix_1a6b574e9d1019686f425283b29e4aa257" kindref="member">dim</ref>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/><ref refid="class_sparse_matrix_1a6b574e9d1019686f425283b29e4aa257" kindref="member">dim</ref>;<sp/>++cnt)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>row<sp/>in<sp/>the<sp/>matrix<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row,<sp/>nbs;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>row<sp/>=<sp/>cnt;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>nbs<sp/>=<sp/>my_gal[cnt].<ref refid="classgeoda_1_1_gal_element_1a9e32d1e75feb41f219804cbef680c2a1" kindref="member">Size</ref>();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>key[cnt]<sp/>=<sp/>Map(row,<sp/>cnt);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;row[cnt].alloc(nbs);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nb<sp/>=<sp/>0;<sp/>nb<sp/>&lt;<sp/>nbs;<sp/>nb++)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>each<sp/>neighbor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;row[cnt].setNb(nb,<sp/>my_gal[cnt][nb],<sp/>1.0);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1a296bbd8b511d9d0ec7e41b6203569c0d" kindref="member">HeapSort</ref>(key,<sp/><ref refid="class_sparse_matrix_1a6b574e9d1019686f425283b29e4aa257" kindref="member">dim</ref>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>szi<sp/>=<sp/>key[<ref refid="class_sparse_matrix_1a6b574e9d1019686f425283b29e4aa257" kindref="member">dim</ref><sp/>-<sp/>1].first<sp/>-<sp/>key[0].first<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ik<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[szi];</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>szi;<sp/>++cnt)<sp/>ik[cnt]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/><ref refid="class_sparse_matrix_1a6b574e9d1019686f425283b29e4aa257" kindref="member">dim</ref>;<sp/>++cnt)<sp/>ik[key[cnt].first<sp/>-<sp/>key[0].first]<sp/>=<sp/>key[cnt].second;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/><ref refid="class_sparse_matrix_1a6b574e9d1019686f425283b29e4aa257" kindref="member">dim</ref>;<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>row[r].getSize();<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oix<sp/>=<sp/>row[r].getIx(cnt);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oix<sp/>&lt;<sp/>key[0].first<sp/>||<sp/>oix<sp/>&gt;<sp/>key[<ref refid="class_sparse_matrix_1a6b574e9d1019686f425283b29e4aa257" kindref="member">dim</ref><sp/>-<sp/>1].first)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mix_8cpp_1a1f896110d76c45bdb438bf7a8af67163" kindref="member">error</ref>(</highlight><highlight class="stringliteral">&quot;Error:<sp/>value<sp/>does<sp/>not<sp/>exist<sp/>in<sp/>the<sp/>weights<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lx<sp/>=<sp/>ik[oix<sp/>-<sp/>key[0].first];</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lx<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="mix_8cpp_1a1f896110d76c45bdb438bf7a8af67163" kindref="member">error</ref>(</highlight><highlight class="stringliteral">&quot;Error:<sp/>value<sp/>does<sp/>not<sp/>exist<sp/>in<sp/>the<sp/>weights<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;row[r].setIx(cnt,<sp/>lx);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" kindref="member">release</ref>(&amp;ik);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="mix_8h_1a5ea642f00e337ed9f13f393e21ca2ce9" kindref="member">release</ref>(&amp;key);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>compute<sp/>row-matrix<sp/>product:<sp/>r<sp/>=<sp/>b<sp/>A.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/><sp/>implemented<sp/>as<sp/>the<sp/>sum<sp/>of<sp/>sparse<sp/>rows:<sp/>r<sp/>=<sp/>sum(bi<sp/>*<sp/>ai),<sp/>where</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>bi<sp/>is<sp/>i-th<sp/>component<sp/>of<sp/>the<sp/>row;<sp/>ai<sp/>is<sp/>i-th<sp/>row<sp/>of<sp/>matrix<sp/>A.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix_1a13e4bc731bac5f1c3c4ff0abf123af99" kindref="member">SparseMatrix::rowMatrix</ref>(<ref refid="class_sparse_vector" kindref="compound">SparseVector</ref><sp/>&amp;row1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sparse_vector" kindref="compound">SparseVector</ref><sp/>&amp;row2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>row1.<ref refid="class_sparse_vector_1ab144815479ee95f102ee3c15ea1e825b" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>row2.<ref refid="class_sparse_vector_1a56d0a0b1ad231ce13216f483c3f2bdf1" kindref="member">getNzEntries</ref>();<sp/>cnt++)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loc<sp/>=<sp/>row2.<ref refid="class_sparse_vector_1a3eaf794e7aceb9055f42b69b7e219b2d" kindref="member">getIx</ref>(cnt);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>row[loc].rowPlusSRow(row1,<sp/>row2.<ref refid="class_sparse_vector_1a39b8aab5bb3957b644e4b32b51277259" kindref="member">getValue</ref>(loc));</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix_1a760e784d0fd1fa38694e9cda78e389a6" kindref="member">SparseMatrix::matrixColumn</ref>(<ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;c1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;c2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>0;<sp/>cnt<sp/>&lt;<sp/>size;<sp/>cnt++)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>c1.<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(cnt,<sp/>row[cnt].timesColumn(c2));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix_1ac0be6b83481087a0ca05db3a8063e118" kindref="member">SparseMatrix::rowIminusRhoThis</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho,<sp/><ref refid="class_sparse_vector" kindref="compound">SparseVector</ref><sp/>&amp;row1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_sparse_vector" kindref="compound">SparseVector</ref><sp/>&amp;row2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>accomplish<sp/>row1<sp/>=<sp/>row2<sp/>*<sp/>(I-rhoThis)<sp/>in<sp/><sp/>two<sp/>steps:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><ref refid="class_sparse_matrix_1a13e4bc731bac5f1c3c4ff0abf123af99" kindref="member">rowMatrix</ref>(row1,<sp/>row2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>row1<sp/>=<sp/>row2<sp/>*<sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>row1.<ref refid="class_sparse_vector_1a954ba850f0cb9d357f4df94d5c45ea12" kindref="member">timesPlus</ref>(row2,<sp/>-rho);<sp/><sp/></highlight><highlight class="comment">//<sp/>row1<sp/>=<sp/>row2<sp/>-<sp/>rho<sp/>*<sp/>row1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rowsatndardization<sp/>--<sp/>initial<sp/>operation<sp/>with<sp/>a<sp/>symmetric<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>performed<sp/>only<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix_1a094158f24145751d4ce10d6a07c13171" kindref="member">SparseMatrix::rowStandardize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>size;<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref><sp/>=<sp/>row[r].sum();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>row[r].multiply(1.0<sp/>/<sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>scale[r]<sp/>=<sp/>sqrt(<ref refid="_m_l__im_8cpp_1ab0f1c1a71d99a758429781c77aede6f7" kindref="member">sum</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>square<sp/>root<sp/>of<sp/>the<sp/>sum<sp/>of<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>symmetric<sp/>matrix<sp/>(from<sp/>a<sp/>row-standardized<sp/>one)<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>has<sp/>the<sp/>same<sp/>eigenvalues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix_1a1a4603623617a8ed6a05066b849f504e" kindref="member">SparseMatrix::makeStdSymmetric</ref>()<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>size;<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>row[r].mRowDivColumn(scale,<sp/>r);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reverse<sp/>the<sp/>changes<sp/>of<sp/>the<sp/>previos<sp/>step<sp/>--<sp/>makes<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>row-standardized<sp/>matrix<sp/>from<sp/>a<sp/>symmetric<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix_1af8cc0b9595b10c75b8f6f4077c1d762d" kindref="member">SparseMatrix::makeRowStd</ref>()<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>size;<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>row[r].mColumnDivRow(scale,<sp/>r);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix_1a28e5b50a5a3621501928dc14884262c0" kindref="member">SparseMatrix::IminusRhoThis</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;column,<sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;result)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>size;<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>row[r].timesColumn(column);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(r,<sp/>column.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(r)<sp/>-<sp/>rho<sp/>*<sp/>p);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>SparseMatrix::WtTimesColumn(DenseVector<sp/>&amp;wtx,<sp/>const<sp/>DenseVector<sp/>&amp;x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>for<sp/>(int<sp/>i<sp/>=0;i<sp/>&lt;<sp/>size;<sp/>i++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>DenseVector*<sp/>w<sp/>=<sp/>GetCol(i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>wtx.setAt(i,w-&gt;product(x));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Incorrect<sp/>for<sp/>non-symmetric<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>SparseMatrix::WtTimesColumn(DenseVector<sp/>&amp;wtx,<sp/>const<sp/>DenseVector<sp/>&amp;x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>for<sp/>(int<sp/>i=0;<sp/>i&lt;size;<sp/>i++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Link*<sp/>L<sp/>=<sp/>getRow(i).getNb();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>s<sp/>=<sp/>0.0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>j=0,<sp/>jsz=getRow(i).getSize();<sp/>j&lt;jsz;<sp/>j++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>n<sp/>=<sp/>getRow(L[j].getIx()).getSize();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>const<sp/>w<sp/>=<sp/>1.0<sp/>/<sp/>n;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>x.getValue(L[j].getIx())<sp/>*<sp/>w;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>wtx.setAt(i,s);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sparse_matrix_1acf7c1b943734d77c5803c11cf8a99bb0" kindref="member">SparseMatrix::WtTimesColumn</ref>(<ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;wtx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_dense_vector" kindref="compound">DenseVector</ref><sp/>&amp;x)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>MakeTranspose();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::list&lt;std::pair&lt;int,<sp/>double&gt;<sp/>&gt;::iterator<sp/>l_itr_t;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(l_itr_t<sp/>itr<sp/>=<sp/>transpose[i].begin();<sp/>itr<sp/>!=<sp/>transpose[i].end();<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>itr-&gt;first;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w<sp/>=<sp/>itr-&gt;second;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>x.<ref refid="class_dense_vector_1a53c25746757ef64ce3c9fae84731d3a7" kindref="member">getValue</ref>(j)<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>wtx.<ref refid="class_dense_vector_1a0ebe880f97938eab1c0d4f8241ca40a9" kindref="member">setAt</ref>(i,<sp/>s);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Transpose<sp/>is<sp/>the<sp/>transpose<sp/>of<sp/>SparseMatrix<sp/>including<sp/>weights.</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>transpose<sp/>data<sp/>structure<sp/>is<sp/>a<sp/>vector<sp/>of<sp/>lists<sp/>of<sp/>pairs<sp/>where<sp/>each<sp/>pair<sp/>is</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>the<sp/>index<sp/>of<sp/>the<sp/>non-zero<sp/>element<sp/>and<sp/>the<sp/>value<sp/>(weight)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SparseMatrix::MakeTranspose()<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transpose.size()<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>transpose.resize(size);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>Link<sp/>*L<sp/>=<sp/><ref refid="class_sparse_matrix_1aa95314357abb485e134f750252317115" kindref="member">getRow</ref>(i).<ref refid="class_sparse_row_1aa30735076e1d6d8eaaf0fa14730f3536" kindref="member">getNb</ref>();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nz_cnt<sp/>=<sp/>0,<sp/>nz_sz<sp/>=<sp/><ref refid="class_sparse_matrix_1aa95314357abb485e134f750252317115" kindref="member">getRow</ref>(i).getSize();<sp/>nz_cnt<sp/>&lt;<sp/>nz_sz;<sp/>nz_cnt++)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>L[nz_cnt].<ref refid="class_link_1a4906d954e9177dcdf1b427ce82dc5625" kindref="member">getIx</ref>();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w_ij<sp/>=<sp/>L[nz_cnt].<ref refid="class_link_1a42c7a68b36c8f5391673b0e4c16191fc" kindref="member">getWeight</ref>();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>transpose[j].push_back(std::make_pair(i,<sp/>w_ij));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/xun/github/geoda-lib/src/cpp/regression/SparseMatrix.cpp"/>
  </compounddef>
</doxygen>
