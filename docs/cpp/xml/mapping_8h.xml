<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="mapping_8h" kind="file" language="C++">
    <compoundname>mapping.h</compoundname>
    <includes local="no">limits</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includedby refid="box-breaks_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/mapping/box-breaks.cpp</includedby>
    <includedby refid="equal-interval-breaks_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/mapping/equal-interval-breaks.cpp</includedby>
    <includedby refid="natural-breaks_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/mapping/natural-breaks.cpp</includedby>
    <includedby refid="percentile-breaks_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/mapping/percentile-breaks.cpp</includedby>
    <includedby refid="quantile-breaks_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/mapping/quantile-breaks.cpp</includedby>
    <includedby refid="stddev-breaks_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/mapping/stddev-breaks.cpp</includedby>
    <includedby refid="quantile-lisa_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/sa/quantile-lisa.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/Users/xun/github/geoda-lib/src/cpp/mapping/mapping.h</label>
        <link refid="mapping_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>limits</label>
      </node>
      <node id="3">
        <label>utility</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/Users/xun/github/geoda-lib/src/cpp/mapping/box-breaks.cpp</label>
        <link refid="box-breaks_8cpp"/>
      </node>
      <node id="3">
        <label>/Users/xun/github/geoda-lib/src/cpp/mapping/equal-interval-breaks.cpp</label>
        <link refid="equal-interval-breaks_8cpp"/>
      </node>
      <node id="1">
        <label>/Users/xun/github/geoda-lib/src/cpp/mapping/mapping.h</label>
        <link refid="mapping_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/Users/xun/github/geoda-lib/src/cpp/mapping/natural-breaks.cpp</label>
        <link refid="natural-breaks_8cpp"/>
      </node>
      <node id="5">
        <label>/Users/xun/github/geoda-lib/src/cpp/mapping/percentile-breaks.cpp</label>
        <link refid="percentile-breaks_8cpp"/>
      </node>
      <node id="6">
        <label>/Users/xun/github/geoda-lib/src/cpp/mapping/quantile-breaks.cpp</label>
        <link refid="quantile-breaks_8cpp"/>
      </node>
      <node id="7">
        <label>/Users/xun/github/geoda-lib/src/cpp/mapping/stddev-breaks.cpp</label>
        <link refid="stddev-breaks_8cpp"/>
      </node>
      <node id="8">
        <label>/Users/xun/github/geoda-lib/src/cpp/sa/quantile-lisa.cpp</label>
        <link refid="quantile-lisa_8cpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacegeoda">geoda</innernamespace>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="mapping_8h_1aa9ab4acaec4dd3baaa7e1e31ec448caf" prot="public" static="no">
        <type>std::pair&lt; double, int &gt;</type>
        <definition>typedef std::pair&lt;double, int&gt; dbl_int_pair_type</definition>
        <argsstring></argsstring>
        <name>dbl_int_pair_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/mapping/mapping.h" line="7" column="19" bodyfile="/Users/xun/github/geoda-lib/src/cpp/mapping/mapping.h" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="mapping_8h_1a3435859a52d3b07aea492f663f1cbc18" prot="public" static="no">
        <type>std::vector&lt; <ref refid="mapping_8h_1aa9ab4acaec4dd3baaa7e1e31ec448caf" kindref="member">dbl_int_pair_type</ref> &gt;</type>
        <definition>typedef std::vector&lt;dbl_int_pair_type&gt; dbl_int_pair_vec_type</definition>
        <argsstring></argsstring>
        <name>dbl_int_pair_vec_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/mapping/mapping.h" line="8" column="21" bodyfile="/Users/xun/github/geoda-lib/src/cpp/mapping/mapping.h" bodystart="8" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>GEODA_MAPPING_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GEODA_MAPPING_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="mapping_8h_1aa9ab4acaec4dd3baaa7e1e31ec448caf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;double,<sp/>int&gt;<sp/><ref refid="mapping_8h_1aa9ab4acaec4dd3baaa7e1e31ec448caf" kindref="member">dbl_int_pair_type</ref>;</highlight></codeline>
<codeline lineno="8" refid="mapping_8h_1a3435859a52d3b07aea492f663f1cbc18" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;dbl_int_pair_type&gt;<sp/><ref refid="mapping_8h_1a3435859a52d3b07aea492f663f1cbc18" kindref="member">dbl_int_pair_vec_type</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegeoda" kindref="compound">geoda</ref><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>define<sp/>a<sp/>static<sp/>constant<sp/>of<sp/>random<sp/>seed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>USER_SEED<sp/>=<sp/>123456789;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacegeoda_1a893cc84a86ec4e9ef3dd2c2c1b8dfec6" kindref="member">dbl_int_pair_cmp_less</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="mapping_8h_1aa9ab4acaec4dd3baaa7e1e31ec448caf" kindref="member">dbl_int_pair_type</ref>&amp;<sp/>ind1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="mapping_8h_1aa9ab4acaec4dd3baaa7e1e31ec448caf" kindref="member">dbl_int_pair_type</ref>&amp;<sp/>ind2);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacegeoda_1a71ea13dd549661abde0b04a7a5af2a5b" kindref="member">percentile</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="mapping_8h_1a3435859a52d3b07aea492f663f1cbc18" kindref="member">dbl_int_pair_vec_type</ref>&amp;<sp/>v);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::vector&lt;std::vector&lt;double&gt;<sp/>&gt;<sp/>demean(const<sp/>std::vector&lt;std::vector&lt;double&gt;<sp/>&gt;&amp;<sp/>data);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::vector&lt;std::vector&lt;double&gt;<sp/>&gt;<sp/>standardize(const<sp/>std::vector&lt;std::vector&lt;double&gt;<sp/>&gt;&amp;<sp/>data);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::vector&lt;std::vector&lt;double&gt;<sp/>&gt;<sp/>standardize_mad(const<sp/>std::vector&lt;std::vector&lt;double&gt;<sp/>&gt;&amp;<sp/>data);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="namespacegeoda_1a1ad44a733a65babc804992d3f23d302b" kindref="member">natural_breaks</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/>undefs);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="namespacegeoda_1a429e3de946d7d92fe4327091449d6911" kindref="member">quantile_breaks</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>int&gt;&amp;<sp/>undefs);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="namespacegeoda_1aabbfae876ffd3128e34eff31b328f781" kindref="member">box_breaks</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/>undefs,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>iqr_factor<sp/>=<sp/>1.5);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="namespacegeoda_1a7f5baf554ab5a18ddf3341a0ebfdf366" kindref="member">percentile_breaks</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/>undefs);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="namespacegeoda_1a3456e8bc0515f5be88c5136dc8d175db" kindref="member">equal_interval_breaks</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/>undefs);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="namespacegeoda_1aa17cf78273494d55a8c8c8194a95af50" kindref="member">std_dev_breaks</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/>undefs);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>transform_inplace(std::vector&lt;double&gt;&amp;<sp/>vals,<sp/>const<sp/>std::string&amp;<sp/>method);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bool<sp/>rateStandardizeEB(const<sp/>std::vector&lt;double&gt;&amp;<sp/>P,<sp/>const<sp/>std::vector&lt;double&gt;&amp;<sp/>E,<sp/>std::vector&lt;double&gt;&amp;<sp/>results,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;bool&gt;&amp;<sp/>undefined);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>geoda</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>GEODA_MAPPING_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/xun/github/geoda-lib/src/cpp/mapping/mapping.h"/>
  </compounddef>
</doxygen>
