<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_l_i_s_a_8cpp" kind="file" language="C++">
    <compoundname>LISA.cpp</compoundname>
    <includes refid="_l_i_s_a_8h" local="yes">LISA.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">boost/algorithm/string.hpp</includes>
    <includes local="no">iostream</includes>
    <includes local="no">vector</includes>
    <includes refid="_geo_da_set_8h" local="yes">lisa/GeoDaSet.h</includes>
    <includes refid="data_8h" local="yes">utils/data.h</includes>
    <includes refid="geoda-weight_8h" local="yes">weights/geoda-weight.h</includes>
    <includes local="no">boost/bind.hpp</includes>
    <includes local="no">boost/system/config.hpp</includes>
    <includes local="no">boost/thread.hpp</includes>
    <incdepgraph>
      <node id="13">
        <label>lisa/GeoDaSet.h</label>
        <link refid="_geo_da_set_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/xun/github/geoda-lib/src/cpp/lisa/LISA.cpp</label>
        <link refid="_l_i_s_a_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>LISA.h</label>
        <link refid="_l_i_s_a_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>utils/data.h</label>
        <link refid="data_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>weights/geoda-weight.h</label>
        <link refid="geoda-weight_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>algorithm</label>
      </node>
      <node id="11">
        <label>boost/algorithm/string.hpp</label>
      </node>
      <node id="17">
        <label>boost/bind.hpp</label>
      </node>
      <node id="18">
        <label>boost/system/config.hpp</label>
      </node>
      <node id="19">
        <label>boost/thread.hpp</label>
      </node>
      <node id="3">
        <label>cstdint</label>
      </node>
      <node id="12">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>list</label>
      </node>
      <node id="5">
        <label>map</label>
      </node>
      <node id="8">
        <label>math.h</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="14">
        <label>string.h</label>
      </node>
      <node id="9">
        <label>time.h</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>Xun<sp/>Li<sp/>on<sp/>2019-06-05.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_l_i_s_a_8h" kindref="compound">LISA.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_geo_da_set_8h" kindref="compound">lisa/GeoDaSet.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="data_8h" kindref="compound">utils/data.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="geoda-weight_8h" kindref="compound">weights/geoda-weight.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__NO_THREAD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__USE_PTHREAD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/bind.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/system/config.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/thread.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">lisa_thread_args<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>LISA*<sp/>lisa;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>uint64_t<sp/>seed_start;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>lisa_thread_helper(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>voidArgs)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>lisa_thread_args*<sp/>args<sp/>=<sp/>(lisa_thread_args*)voidArgs;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>args-&gt;lisa-&gt;CalcPseudoP_range(args-&gt;start,<sp/>args-&gt;end,<sp/>args-&gt;seed_start);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">perm_thread_args<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>LISA*<sp/>lisa;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_neighbors;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>uint64_t<sp/>seed_start;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>perm_thread_helper(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>voidArgs)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>perm_thread_args*<sp/>args<sp/>=<sp/>(perm_thread_args*)voidArgs;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>args-&gt;lisa-&gt;PermCreateRange(args-&gt;start,<sp/>args-&gt;end,<sp/>args-&gt;max_neighbors,<sp/>args-&gt;seed_start);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">perm_lisa_thread_args<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>LISA*<sp/>lisa;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>uint64_t<sp/>seed_start;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>perm_lisa_thread_helper(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>voidArgs)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>perm_lisa_thread_args*<sp/>args<sp/>=<sp/>(perm_lisa_thread_args*)voidArgs;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>args-&gt;lisa-&gt;PermCalcPseudoP_range(args-&gt;start,<sp/>args-&gt;end,<sp/>args-&gt;seed_start);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><ref refid="class_l_i_s_a_1ab514ca51acdb895cd05464eae461fcf0" kindref="member">LISA::LISA</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_obs,<sp/><ref refid="class_geo_da_weight" kindref="compound">GeoDaWeight</ref>*<sp/>w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;bool&gt;&amp;<sp/>_undefs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_significance_cutoff,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_nCPUs,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_perm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>_permutation_method,<sp/>uint64_t<sp/>_last_seed)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>nCPUs(_nCPUs),</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_obs(num_obs),</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>row_standardize(true),</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>permutations(_perm),</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>significance_cutoff(_significance_cutoff),</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>user_sig_cutoff(0),</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>has_undefined(false),</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>has_isolates(w-&gt;HasIsolates()),</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calc_significances(true),</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_seed_used(_last_seed),</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reuse_last_seed(true),</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>weights(w),</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>undefs(_undefs),</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perm_table(0),</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>permutation_method(_permutation_method)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SetSignificanceFilter(1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><ref refid="class_l_i_s_a_1ab514ca51acdb895cd05464eae461fcf0" kindref="member">LISA::LISA</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_obs,<sp/><ref refid="class_geo_da_weight" kindref="compound">GeoDaWeight</ref>*<sp/>w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;bool&gt;<sp/>&gt;&amp;<sp/>_undefs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_significance_cutoff,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_nCPUs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_perm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>_permutation_method,<sp/>uint64_t<sp/>_last_seed)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>nCPUs(_nCPUs),</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_obs(num_obs),</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>row_standardize(true),</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>permutations(_perm),</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>significance_cutoff(_significance_cutoff),</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>user_sig_cutoff(0),</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>has_undefined(false),</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>has_isolates(w-&gt;HasIsolates()),</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>calc_significances(true),</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_seed_used(_last_seed),</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reuse_last_seed(true),</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>weights(w),</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perm_table(0),</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>permutation_method(_permutation_method)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>undefs.resize(num_obs,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_undefs.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>_undefs[i].size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&lt;<sp/>num_obs)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>undefs[j]<sp/>=<sp/>undefs[j]<sp/>||<sp/>_undefs[i][j];</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SetSignificanceFilter(1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><ref refid="class_l_i_s_a_1ad0e5bc71ddb28e30b7f9e4895a561d15" kindref="member">LISA::~LISA</ref>()<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_l_i_s_a_1a4e4104294cae67b667c3ef8a435027cf" kindref="member">perm_table</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_l_i_s_a_1a4e4104294cae67b667c3ef8a435027cf" kindref="member">perm_table</ref>[i];</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_l_i_s_a_1a4e4104294cae67b667c3ef8a435027cf" kindref="member">perm_table</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a4ffb64846007d1d7ff443f57112b28f9" kindref="member">LISA::Run</ref>()<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><ref refid="class_l_i_s_a_1a4cebb360265b00834131007f766f8888" kindref="member">sig_local_vec</ref>.resize(<ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><ref refid="class_l_i_s_a_1af8622086c88d0ade80130613a2a0209d" kindref="member">sig_cat_vec</ref>.resize(<ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><ref refid="class_l_i_s_a_1aafcd78acbda90794728597a5262bf4f5" kindref="member">cluster_vec</ref>.resize(<ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><ref refid="class_l_i_s_a_1a1842b85ffe20032c9fc14bb7734d946c" kindref="member">lag_vec</ref>.resize(<ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><ref refid="class_l_i_s_a_1a6a3eb34950154b54aa38cdb06e035bd5" kindref="member">lisa_vec</ref>.resize(<ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><ref refid="class_l_i_s_a_1adc7cdba864b9a1e1dd32cc0172649f7d" kindref="member">nn_vec</ref>.resize(<ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1adc7cdba864b9a1e1dd32cc0172649f7d" kindref="member">nn_vec</ref>[i]<sp/>=<sp/><ref refid="class_l_i_s_a_1a3f6524f9d4aa8e8a5d92bccc5a10a46f" kindref="member">weights</ref>-&gt;GetNbrSize(i);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="class_l_i_s_a_1a3fd503729531ec0b38baab2bea13ac87" kindref="member">ComputeLoalSA</ref>();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_l_i_s_a_1af33206fcbd8c59afc201a8a0454f065f" kindref="member">calc_significances</ref>)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1ac6f4566109b14ef3dc9122563319f1d4" kindref="member">CalcPseudoP</ref>();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a1b1e7eb75014f6580998b7ef12b65ade" kindref="member">LISA::SetSignificanceFilter</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filter_id)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter_id<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>user<sp/>input<sp/>cutoff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1ae93f12d73f48a9fbe7c21e8ba17fa9ee" kindref="member">significance_filter</ref><sp/>=<sp/>filter_id;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>0:<sp/>&gt;0.05<sp/>1:<sp/>0.05,<sp/>2:<sp/>0.01,<sp/>3:<sp/>0.001,<sp/>4:<sp/>0.0001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter_id<sp/>&lt;<sp/>1<sp/>||<sp/>filter_id<sp/>&gt;<sp/>4)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><ref refid="class_l_i_s_a_1ae93f12d73f48a9fbe7c21e8ba17fa9ee" kindref="member">significance_filter</ref><sp/>=<sp/>filter_id;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter_id<sp/>==<sp/>1)<sp/><ref refid="class_l_i_s_a_1aefaa3485a0023c7ee635a0b2874417e7" kindref="member">significance_cutoff</ref><sp/>=<sp/>0.05;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter_id<sp/>==<sp/>2)<sp/><ref refid="class_l_i_s_a_1aefaa3485a0023c7ee635a0b2874417e7" kindref="member">significance_cutoff</ref><sp/>=<sp/>0.01;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter_id<sp/>==<sp/>3)<sp/><ref refid="class_l_i_s_a_1aefaa3485a0023c7ee635a0b2874417e7" kindref="member">significance_cutoff</ref><sp/>=<sp/>0.001;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filter_id<sp/>==<sp/>4)<sp/><ref refid="class_l_i_s_a_1aefaa3485a0023c7ee635a0b2874417e7" kindref="member">significance_cutoff</ref><sp/>=<sp/>0.0001;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a69bdf540d32663d3676e6c00864750b6" kindref="member">LISA::GetSignificanceFilter</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1ae93f12d73f48a9fbe7c21e8ba17fa9ee" kindref="member">significance_filter</ref>;<sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a4a4972b885f39d697d4c3b21c617bde6" kindref="member">LISA::GetSignificanceCutoff</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1aefaa3485a0023c7ee635a0b2874417e7" kindref="member">significance_cutoff</ref>;<sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a11c8e8fd52bbc1bb34c4a7738992d923" kindref="member">LISA::SetSignificanceCutoff</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>{<sp/><ref refid="class_l_i_s_a_1aefaa3485a0023c7ee635a0b2874417e7" kindref="member">significance_cutoff</ref><sp/>=<sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1adc89c613b14bdac81501365a4cc71134" kindref="member">LISA::GetUserCutoff</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1af82c5848fd8c9c03720b6768b7a55376" kindref="member">user_sig_cutoff</ref>;<sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a42efe3f048fc3152fa4b1bddc520462a" kindref="member">LISA::SetUserCutoff</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>{<sp/><ref refid="class_l_i_s_a_1af82c5848fd8c9c03720b6768b7a55376" kindref="member">user_sig_cutoff</ref><sp/>=<sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a2bfab81b9e42615e66158a7865f83fbd" kindref="member">LISA::GetFDR</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_p)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>pvals<sp/>=<sp/><ref refid="class_l_i_s_a_1a4cebb360265b00834131007f766f8888" kindref="member">sig_local_vec</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FDR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>all<sp/>p-values<sp/>from<sp/>smallest<sp/>to<sp/>largets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>std::sort(pvals.begin(),<sp/>pvals.end());</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fdr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>(i<sp/>+<sp/>1)<sp/>*<sp/>current_p<sp/>/<sp/><ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)<sp/>fdr<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pvals[i]<sp/>&gt;=<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>fdr<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fdr;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a66abedb503f8f675b04423213027325d" kindref="member">LISA::GetBO</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_p)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>bo;<sp/>//Bonferroni<sp/>bound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bonferroni_bound<sp/>=<sp/>current_p<sp/>/<sp/><ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bonferroni_bound;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a87e3e04dc5cc1f56634a036ef38bc050" kindref="member">LISA::GetNumPermutations</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref>;<sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a1537cd949a614e041239529d48b6ac49" kindref="member">LISA::SetNumPermutations</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val)<sp/>{<sp/><ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref><sp/>=<sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">uint64_t<sp/><ref refid="class_l_i_s_a_1a9b43164d4e09625fee42e4bd3b5c7e43" kindref="member">LISA::GetLastUsedSeed</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a0b6a2466791bca1b75369737337fca2d" kindref="member">last_seed_used</ref>;<sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a38bbdb73e71ae1a74825d4ca5a93d871" kindref="member">LISA::IsReuseLastSeed</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a1831c01ee530b038e5e7356a86a20c2b" kindref="member">reuse_last_seed</ref>;<sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a19ceb54628931d11d39e343f63d3f890" kindref="member">LISA::SetReuseLastSeed</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reuse)<sp/>{<sp/><ref refid="class_l_i_s_a_1a1831c01ee530b038e5e7356a86a20c2b" kindref="member">reuse_last_seed</ref><sp/>=<sp/>reuse;<sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a73dec0f73c8494bdbde6e1063c2a903b" kindref="member">LISA::SetLastUsedSeed</ref>(uint64_t<sp/>seed)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><ref refid="class_l_i_s_a_1a1831c01ee530b038e5e7356a86a20c2b" kindref="member">reuse_last_seed</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><ref refid="class_l_i_s_a_1a0b6a2466791bca1b75369737337fca2d" kindref="member">last_seed_used</ref><sp/>=<sp/>seed;</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1ac8a5fc8c591762f9c6ac3b4ad3ccdd45" kindref="member">LISA::GetHasIsolates</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1ac4cb795aa0c036bd2f0721a6402bfca4" kindref="member">has_isolates</ref>;<sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1aec64be30b626394c5662a4bb14e680c3" kindref="member">LISA::GetHasUndefined</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a2ff9fc974573d91f65acb7486f8a9cef" kindref="member">has_undefined</ref>;<sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1ac6f4566109b14ef3dc9122563319f1d4" kindref="member">LISA::CalcPseudoP</ref>()<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_l_i_s_a_1af33206fcbd8c59afc201a8a0454f065f" kindref="member">calc_significances</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__NO_THREAD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boost::iequals(<ref refid="class_l_i_s_a_1adb5baf0ecda6023779bab868d9c45af5" kindref="member">permutation_method</ref>,<sp/></highlight><highlight class="stringliteral">&quot;complete&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1aefcdfbe128df11c625ee6f496c78f40f" kindref="member">CalcPseudoP_range</ref>(0,<sp/><ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref><sp/>-<sp/>1,<sp/><ref refid="class_l_i_s_a_1a0b6a2466791bca1b75369737337fca2d" kindref="member">last_seed_used</ref>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>permutation<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_l_i_s_a_1a4e4104294cae67b667c3ef8a435027cf" kindref="member">perm_table</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_l_i_s_a_1a4e4104294cae67b667c3ef8a435027cf" kindref="member">perm_table</ref>[i];</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_l_i_s_a_1a4e4104294cae67b667c3ef8a435027cf" kindref="member">perm_table</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_neighbors<sp/>=<sp/><ref refid="class_l_i_s_a_1a3f6524f9d4aa8e8a5d92bccc5a10a46f" kindref="member">weights</ref>-&gt;GetMaxNbrs();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1a4e4104294cae67b667c3ef8a435027cf" kindref="member">perm_table</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*[<ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref>];</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1a4e4104294cae67b667c3ef8a435027cf" kindref="member">perm_table</ref>[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[max_neighbors];</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1a654237b553a88279721ffc71f70e14ec" kindref="member">PermCreateRange</ref>(0,<sp/><ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref><sp/>-<sp/>1,<sp/>max_neighbors,<sp/><ref refid="class_l_i_s_a_1a0b6a2466791bca1b75369737337fca2d" kindref="member">last_seed_used</ref>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1a85cb4aff3217976d448b734d5a61a4fb" kindref="member">PermCalcPseudoP_range</ref>(0,<sp/><ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref><sp/>-<sp/>1,<sp/><ref refid="class_l_i_s_a_1a0b6a2466791bca1b75369737337fca2d" kindref="member">last_seed_used</ref>);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boost::iequals(<ref refid="class_l_i_s_a_1adb5baf0ecda6023779bab868d9c45af5" kindref="member">permutation_method</ref>,<sp/></highlight><highlight class="stringliteral">&quot;complete&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1a84f64caa8e28914746d3a9495f8bf489" kindref="member">CalcPseudoP_threaded</ref>();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>permutation<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_l_i_s_a_1a4e4104294cae67b667c3ef8a435027cf" kindref="member">perm_table</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_l_i_s_a_1a4e4104294cae67b667c3ef8a435027cf" kindref="member">perm_table</ref>[i];</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="class_l_i_s_a_1a4e4104294cae67b667c3ef8a435027cf" kindref="member">perm_table</ref>;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_neighbors<sp/>=<sp/><ref refid="class_l_i_s_a_1a3f6524f9d4aa8e8a5d92bccc5a10a46f" kindref="member">weights</ref>-&gt;GetMaxNbrs();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1a4e4104294cae67b667c3ef8a435027cf" kindref="member">perm_table</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*[<ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref>];</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1a4e4104294cae67b667c3ef8a435027cf" kindref="member">perm_table</ref>[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[max_neighbors];</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1a2653719a7510f5f1be923bde638ddcef" kindref="member">PermCreateTable_threaded</ref>();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PermCreateRange(0,<sp/>permutations-1,<sp/>max_neighbors,<sp/>last_seed_used);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1a0ef933de0a4cdcf9e3caba6771d7d079" kindref="member">PermCalcPseudoP_threaded</ref>();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PermCalcPseudoP_range(0,<sp/>num_obs-1,<sp/>last_seed_used);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a2653719a7510f5f1be923bde638ddcef" kindref="member">LISA::PermCreateTable_threaded</ref>()<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__NO_THREAD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__USE_PTHREAD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref><sp/>&lt;=<sp/>0)<sp/><ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref><sp/>=<sp/>boost::thread::hardware_concurrency();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>boost::thread_group<sp/>threadPool;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>pthread_t*<sp/>threadPool<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>pthread_t[<ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref>];</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">perm_thread_args*<sp/>args<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>perm_thread_args[<ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref>];</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>create<sp/>a<sp/>permutation<sp/>table:<sp/>permutations<sp/>x<sp/>max_neighbors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_neighbors<sp/>=<sp/><ref refid="class_l_i_s_a_1a3f6524f9d4aa8e8a5d92bccc5a10a46f" kindref="member">weights</ref>-&gt;GetMaxNbrs();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>work_chunk<sp/>=<sp/><ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref><sp/>/<sp/><ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref>;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(work_chunk<sp/>==<sp/>0)<sp/>work_chunk<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quotient<sp/>=<sp/><ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref><sp/>/<sp/><ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remainder<sp/>=<sp/><ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref><sp/>%<sp/><ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tot_threads<sp/>=<sp/>(quotient<sp/>&gt;<sp/>0)<sp/>?<sp/><ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref><sp/>:<sp/>remainder;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tot_threads;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>remainder)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>i<sp/>*<sp/>(quotient<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>a<sp/>+<sp/>quotient;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>remainder<sp/>*<sp/>(quotient<sp/>+<sp/>1)<sp/>+<sp/>(i<sp/>-<sp/>remainder)<sp/>*<sp/>quotient;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>a<sp/>+<sp/>quotient<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>seed_start<sp/>=<sp/><ref refid="class_l_i_s_a_1a0b6a2466791bca1b75369737337fca2d" kindref="member">last_seed_used</ref><sp/>+<sp/>a<sp/>*<sp/>(<ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref><sp/></highlight><highlight class="comment">/*larger<sp/>enougth<sp/>to<sp/>avoid<sp/>reoccurence*/</highlight><highlight class="normal"><sp/>*<sp/>max_neighbors);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__USE_PTHREAD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::thread*<sp/>worker<sp/>=</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>boost::thread(boost::bind(&amp;<ref refid="class_l_i_s_a_1a654237b553a88279721ffc71f70e14ec" kindref="member">LISA::PermCreateRange</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>a,<sp/>b,<sp/>max_neighbors,<sp/>seed_start));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>threadPool.add_thread(worker);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>args[i].lisa<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>args[i].start<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>args[i].end<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>args[i].max_neighbors<sp/>=<sp/>max_neighbors;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>args[i].seed_start<sp/>=<sp/>seed_start;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pthread_create(&amp;threadPool[i],<sp/>NULL,<sp/>&amp;perm_thread_helper,<sp/>&amp;args[i]))<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Thread<sp/>create<sp/>failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__USE_PTHREAD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>threadPool.join_all();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_join(threadPool[j],<sp/>NULL);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>args;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>threadPool;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a654237b553a88279721ffc71f70e14ec" kindref="member">LISA::PermCreateRange</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>perm_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>perm_end,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_neighbors,<sp/>uint64_t<sp/>seed_start)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>GeoDaSet*<sp/>workPermutation<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>GeoDaSet(<ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_rand<sp/>=<sp/><ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref><sp/>-<sp/>2;<sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>one<sp/>observation<sp/>is<sp/>always<sp/>removed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rng_val;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>perm_start;<sp/>cnt<sp/>&lt;=<sp/>perm_end;<sp/>cnt++)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rand<sp/>=<sp/>0,<sp/>newRandom;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(rand<sp/>&lt;<sp/>max_neighbors)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>computing<sp/>&apos;perfect&apos;<sp/>permutation<sp/>of<sp/>given<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rng_val<sp/>=<sp/>geoda::ThomasWangHashDouble(seed_start++)<sp/>*<sp/>max_rand;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>is<sp/>needed<sp/>to<sp/>fix<sp/>issue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://github.com/GeoDaCenter/geoda/issues/488</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newRandom<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rng_val<sp/>&lt;<sp/>0.0<sp/>?<sp/>ceil(rng_val<sp/>-<sp/>0.5)<sp/>:<sp/>floor(rng_val<sp/>+<sp/>0.5));</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!workPermutation-&gt;<ref refid="class_geo_da_set_1a03559ba95e780ab459eba17f4cf22f75" kindref="member">Belongs</ref>(newRandom)<sp/>&amp;&amp;<sp/>newRandom<sp/>&lt;<sp/><ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref>)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>workPermutation-&gt;Push(newRandom);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rand++;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>max_neighbors;<sp/>cp++)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1a4e4104294cae67b667c3ef8a435027cf" kindref="member">perm_table</ref>[cnt][cp]<sp/>=<sp/>workPermutation-&gt;<ref refid="class_geo_da_set_1a5e17a095103fac3576869c440e21ea4e" kindref="member">Pop</ref>();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>workPermutation;</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a0ef933de0a4cdcf9e3caba6771d7d079" kindref="member">LISA::PermCalcPseudoP_threaded</ref>()<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__NO_THREAD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__USE_PTHREAD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref><sp/>&lt;=<sp/>0)<sp/><ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref><sp/>=<sp/>boost::thread::hardware_concurrency();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>boost::thread_group<sp/>threadPool;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>pthread_t*<sp/>threadPool<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>pthread_t[<ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref>];</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">perm_lisa_thread_args*<sp/>args<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>perm_lisa_thread_args[<ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref>];</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>work_chunk<sp/>=<sp/><ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref><sp/>/<sp/><ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref>;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(work_chunk<sp/>==<sp/>0)<sp/>work_chunk<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quotient<sp/>=<sp/><ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref><sp/>/<sp/><ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref>;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remainder<sp/>=<sp/><ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref><sp/>%<sp/><ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref>;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tot_threads<sp/>=<sp/>(quotient<sp/>&gt;<sp/>0)<sp/>?<sp/><ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref><sp/>:<sp/>remainder;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tot_threads;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>remainder)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>i<sp/>*<sp/>(quotient<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>a<sp/>+<sp/>quotient;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>remainder<sp/>*<sp/>(quotient<sp/>+<sp/>1)<sp/>+<sp/>(i<sp/>-<sp/>remainder)<sp/>*<sp/>quotient;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>a<sp/>+<sp/>quotient<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>seed_start<sp/>=<sp/><ref refid="class_l_i_s_a_1a0b6a2466791bca1b75369737337fca2d" kindref="member">last_seed_used</ref><sp/>+<sp/>a;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__USE_PTHREAD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::thread*<sp/>worker<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>boost::thread(boost::bind(&amp;<ref refid="class_l_i_s_a_1a85cb4aff3217976d448b734d5a61a4fb" kindref="member">LISA::PermCalcPseudoP_range</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>a,<sp/>b,<sp/>seed_start));</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>threadPool.add_thread(worker);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>args[i].lisa<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>args[i].start<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>args[i].end<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>args[i].seed_start<sp/>=<sp/>seed_start;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pthread_create(&amp;threadPool[i],<sp/>NULL,<sp/>&amp;perm_lisa_thread_helper,<sp/>&amp;args[i]))<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Thread<sp/>create<sp/>failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__USE_PTHREAD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>threadPool.join_all();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_join(threadPool[j],<sp/>NULL);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>args;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>threadPool;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a85cb4aff3217976d448b734d5a61a4fb" kindref="member">LISA::PermCalcPseudoP_range</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>obs_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>obs_end,<sp/>uint64_t<sp/>seed_start)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>obs_start;<sp/>cnt<sp/>&lt;=<sp/>obs_end;<sp/>cnt++)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_l_i_s_a_1af36658ec6c5e572b2c131d897220a81e" kindref="member">undefs</ref>[cnt]<sp/>||<sp/><ref refid="class_l_i_s_a_1a3f6524f9d4aa8e8a5d92bccc5a10a46f" kindref="member">weights</ref>-&gt;IsMasked(cnt)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1af8622086c88d0ade80130613a2a0209d" kindref="member">sig_cat_vec</ref>[cnt]<sp/>=<sp/>6;<sp/><sp/></highlight><highlight class="comment">//<sp/>undefined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>full<sp/>neighbors<sp/>even<sp/>if<sp/>has<sp/>undefined<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numNeighbors<sp/>=<sp/><ref refid="class_l_i_s_a_1a3f6524f9d4aa8e8a5d92bccc5a10a46f" kindref="member">weights</ref>-&gt;GetNbrSize(cnt);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numNeighbors<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1af8622086c88d0ade80130613a2a0209d" kindref="member">sig_cat_vec</ref>[cnt]<sp/>=<sp/>5;<sp/><sp/></highlight><highlight class="comment">//<sp/>neighborless<sp/>cat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>isolate:<sp/>don&apos;t<sp/>do<sp/>permutation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>permutedSA(<ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>perm<sp/>=<sp/>0;<sp/>perm<sp/>&lt;<sp/><ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref>;<sp/>perm++)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1aeefb4ec2ad6564008c6c63bdce46eccb" kindref="member">PermLocalSA</ref>(cnt,<sp/>perm,<sp/>numNeighbors,<sp/><ref refid="class_l_i_s_a_1a4e4104294cae67b667c3ef8a435027cf" kindref="member">perm_table</ref>[perm],<sp/>permutedSA);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>countLarger<sp/>=<sp/><ref refid="class_l_i_s_a_1a30943843a09198a2617625d5f02debf8" kindref="member">CountLargerSA</ref>(cnt,<sp/>permutedSA);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_sigLocal<sp/>=<sp/>(countLarger<sp/>+<sp/>1.0)<sp/>/<sp/>(<ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;significance&apos;<sp/>of<sp/>local<sp/>sa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_sigLocal<sp/>&lt;=<sp/>0.0001)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1af8622086c88d0ade80130613a2a0209d" kindref="member">sig_cat_vec</ref>[cnt]<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_sigLocal<sp/>&lt;=<sp/>0.001)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1af8622086c88d0ade80130613a2a0209d" kindref="member">sig_cat_vec</ref>[cnt]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_sigLocal<sp/>&lt;=<sp/>0.01)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1af8622086c88d0ade80130613a2a0209d" kindref="member">sig_cat_vec</ref>[cnt]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_sigLocal<sp/>&lt;=<sp/>0.05)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1af8622086c88d0ade80130613a2a0209d" kindref="member">sig_cat_vec</ref>[cnt]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1af8622086c88d0ade80130613a2a0209d" kindref="member">sig_cat_vec</ref>[cnt]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1a4cebb360265b00834131007f766f8888" kindref="member">sig_local_vec</ref>[cnt]<sp/>=<sp/>_sigLocal;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a84f64caa8e28914746d3a9495f8bf489" kindref="member">LISA::CalcPseudoP_threaded</ref>()<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__NO_THREAD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__USE_PTHREAD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref><sp/>&lt;=<sp/>0)<sp/><ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref><sp/>=<sp/>boost::thread::hardware_concurrency();</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>boost::thread_group<sp/>threadPool;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>pthread_t*<sp/>threadPool<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>pthread_t[<ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref>];</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">lisa_thread_args*<sp/>args<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>lisa_thread_args[<ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref>];</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>divide<sp/>up<sp/>work<sp/>according<sp/>to<sp/>number<sp/>of<sp/>observations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>number<sp/>of<sp/>CPUs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>work_chunk<sp/>=<sp/><ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref><sp/>/<sp/><ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref>;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(work_chunk<sp/>==<sp/>0)<sp/>work_chunk<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>obs_start<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>obs_end<sp/>=<sp/>obs_start<sp/>+<sp/>work_chunk;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quotient<sp/>=<sp/><ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref><sp/>/<sp/><ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref>;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remainder<sp/>=<sp/><ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref><sp/>%<sp/><ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref>;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tot_threads<sp/>=<sp/>(quotient<sp/>&gt;<sp/>0)<sp/>?<sp/><ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref><sp/>:<sp/>remainder;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_l_i_s_a_1a1831c01ee530b038e5e7356a86a20c2b" kindref="member">reuse_last_seed</ref>)<sp/><ref refid="class_l_i_s_a_1a0b6a2466791bca1b75369737337fca2d" kindref="member">last_seed_used</ref><sp/>=<sp/>time(0);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tot_threads;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>remainder)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>i<sp/>*<sp/>(quotient<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>a<sp/>+<sp/>quotient;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>remainder<sp/>*<sp/>(quotient<sp/>+<sp/>1)<sp/>+<sp/>(i<sp/>-<sp/>remainder)<sp/>*<sp/>quotient;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>a<sp/>+<sp/>quotient<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>seed_start<sp/>=<sp/><ref refid="class_l_i_s_a_1a0b6a2466791bca1b75369737337fca2d" kindref="member">last_seed_used</ref><sp/>+<sp/>a;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>uint64_t<sp/>seed_end<sp/>=<sp/>seed_start<sp/>+<sp/>((uint64_t)<sp/>(b-a));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>thread_id<sp/>=<sp/>i+1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__USE_PTHREAD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::thread*<sp/>worker<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>boost::thread(boost::bind(&amp;<ref refid="class_l_i_s_a_1aefcdfbe128df11c625ee6f496c78f40f" kindref="member">LISA::CalcPseudoP_range</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>a,<sp/>b,<sp/>seed_start));</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>threadPool.add_thread(worker);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>args[i].lisa<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>args[i].start<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>args[i].end<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>args[i].seed_start<sp/>=<sp/>seed_start;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pthread_create(&amp;threadPool[i],<sp/>NULL,<sp/>&amp;lisa_thread_helper,<sp/>&amp;args[i]))<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Thread<sp/>create<sp/>failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__USE_PTHREAD__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>threadPool.join_all();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_join(threadPool[j],<sp/>NULL);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>args;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>threadPool;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1aefcdfbe128df11c625ee6f496c78f40f" kindref="member">LISA::CalcPseudoP_range</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>obs_start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>obs_end,<sp/>uint64_t<sp/>seed_start)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>GeoDaSet<sp/>workPermutation(<ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref>);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_rand<sp/>=<sp/><ref refid="class_l_i_s_a_1a61a5128a4af4e294e8f59ddc2ac35854" kindref="member">num_obs</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>obs_start;<sp/>cnt<sp/>&lt;=<sp/>obs_end;<sp/>cnt++)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_l_i_s_a_1af36658ec6c5e572b2c131d897220a81e" kindref="member">undefs</ref>[cnt]<sp/>||<sp/><ref refid="class_l_i_s_a_1a3f6524f9d4aa8e8a5d92bccc5a10a46f" kindref="member">weights</ref>-&gt;IsMasked(cnt)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1af8622086c88d0ade80130613a2a0209d" kindref="member">sig_cat_vec</ref>[cnt]<sp/>=<sp/>6;<sp/><sp/></highlight><highlight class="comment">//<sp/>undefined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>full<sp/>neighbors<sp/>even<sp/>if<sp/>has<sp/>undefined<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numNeighbors<sp/>=<sp/><ref refid="class_l_i_s_a_1a3f6524f9d4aa8e8a5d92bccc5a10a46f" kindref="member">weights</ref>-&gt;GetNbrSize(cnt);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numNeighbors<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1af8622086c88d0ade80130613a2a0209d" kindref="member">sig_cat_vec</ref>[cnt]<sp/>=<sp/>5;<sp/><sp/></highlight><highlight class="comment">//<sp/>neighborless<sp/>cat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>isolate:<sp/>don&apos;t<sp/>do<sp/>permutation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>permutedSA(<ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__JSGEODA__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>perm<sp/>=<sp/>0;<sp/>perm<sp/>&lt;<sp/><ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref>;<sp/>perm++)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rand<sp/>=<sp/>0,<sp/>newRandom;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rng_val;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(rand<sp/>&lt;<sp/>numNeighbors)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>computing<sp/>&apos;perfect&apos;<sp/>permutation<sp/>of<sp/>given<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rng_val<sp/>=<sp/>geoda::ThomasWangHashDouble(seed_start++)<sp/>*<sp/>max_rand;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>is<sp/>needed<sp/>to<sp/>fix<sp/>issue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://github.com/GeoDaCenter/geoda/issues/488</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newRandom<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rng_val<sp/>&lt;<sp/>0.0<sp/>?<sp/>ceil(rng_val<sp/>-<sp/>0.5)<sp/>:<sp/>floor(rng_val<sp/>+<sp/>0.5));</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newRandom<sp/>!=<sp/>cnt<sp/>&amp;&amp;<sp/>!workPermutation.<ref refid="class_geo_da_set_1a03559ba95e780ab459eba17f4cf22f75" kindref="member">Belongs</ref>(newRandom)<sp/>&amp;&amp;<sp/><ref refid="class_l_i_s_a_1a3f6524f9d4aa8e8a5d92bccc5a10a46f" kindref="member">weights</ref>-&gt;GetNbrSize(newRandom)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>workPermutation.Push(newRandom);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rand++;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>permNeighbors(numNeighbors);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>numNeighbors;<sp/>cp++)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>permNeighbors[cp]<sp/>=<sp/>workPermutation.<ref refid="class_geo_da_set_1a5e17a095103fac3576869c440e21ea4e" kindref="member">Pop</ref>();</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1aeefb4ec2ad6564008c6c63bdce46eccb" kindref="member">PermLocalSA</ref>(cnt,<sp/>perm,<sp/>permNeighbors,<sp/>permutedSA);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>perm<sp/>=<sp/>0;<sp/>perm<sp/>&lt;<sp/><ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref>;<sp/>perm++)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rand<sp/>=<sp/>0,<sp/>newRandom;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rng_val;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(rand<sp/>&lt;<sp/>numNeighbors)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>computing<sp/>&apos;perfect&apos;<sp/>permutation<sp/>of<sp/>given<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rng_val<sp/>=<sp/>geoda::ThomasWangHashDouble(seed_start++)<sp/>*<sp/>max_rand;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>round<sp/>is<sp/>needed<sp/>to<sp/>fix<sp/>issue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://github.com/GeoDaCenter/geoda/issues/488</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newRandom<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rng_val<sp/>&lt;<sp/>0.0<sp/>?<sp/>ceil(rng_val<sp/>-<sp/>0.5)<sp/>:<sp/>floor(rng_val<sp/>+<sp/>0.5));</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newRandom<sp/>!=<sp/>cnt<sp/>&amp;&amp;<sp/>!workPermutation.<ref refid="class_geo_da_set_1a03559ba95e780ab459eba17f4cf22f75" kindref="member">Belongs</ref>(newRandom)<sp/>&amp;&amp;<sp/><ref refid="class_l_i_s_a_1a3f6524f9d4aa8e8a5d92bccc5a10a46f" kindref="member">weights</ref>-&gt;GetNbrSize(newRandom)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>workPermutation.Push(newRandom);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rand++;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>permNeighbors(numNeighbors);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cp<sp/>=<sp/>0;<sp/>cp<sp/>&lt;<sp/>numNeighbors;<sp/>cp++)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>permNeighbors[cp]<sp/>=<sp/>workPermutation.<ref refid="class_geo_da_set_1a5e17a095103fac3576869c440e21ea4e" kindref="member">Pop</ref>();</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1aeefb4ec2ad6564008c6c63bdce46eccb" kindref="member">PermLocalSA</ref>(cnt,<sp/>perm,<sp/>permNeighbors,<sp/>permutedSA);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>countLarger<sp/>=<sp/><ref refid="class_l_i_s_a_1a30943843a09198a2617625d5f02debf8" kindref="member">CountLargerSA</ref>(cnt,<sp/>permutedSA);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_sigLocal<sp/>=<sp/>(countLarger<sp/>+<sp/>1.0)<sp/>/<sp/>(<ref refid="class_l_i_s_a_1aa1b448ba82487d84f7d34b5a48687ca7" kindref="member">permutations</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;significance&apos;<sp/>of<sp/>local<sp/>sa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_sigLocal<sp/>&lt;=<sp/>0.0001)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1af8622086c88d0ade80130613a2a0209d" kindref="member">sig_cat_vec</ref>[cnt]<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_sigLocal<sp/>&lt;=<sp/>0.001)</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1af8622086c88d0ade80130613a2a0209d" kindref="member">sig_cat_vec</ref>[cnt]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_sigLocal<sp/>&lt;=<sp/>0.01)</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1af8622086c88d0ade80130613a2a0209d" kindref="member">sig_cat_vec</ref>[cnt]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_sigLocal<sp/>&lt;=<sp/>0.05)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1af8622086c88d0ade80130613a2a0209d" kindref="member">sig_cat_vec</ref>[cnt]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1af8622086c88d0ade80130613a2a0209d" kindref="member">sig_cat_vec</ref>[cnt]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_l_i_s_a_1a4cebb360265b00834131007f766f8888" kindref="member">sig_local_vec</ref>[cnt]<sp/>=<sp/>_sigLocal;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>observations<sp/>with<sp/>no<sp/>neighbors<sp/>get<sp/>marked<sp/>as<sp/>isolates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>undefined<sp/>should<sp/>be<sp/>marked<sp/>as<sp/>well,<sp/>however,<sp/>since<sp/>undefined_cat<sp/>has<sp/>covered<sp/>undefined<sp/>category,<sp/>we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>handle<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="class_l_i_s_a_1a2730bb134ce7faa62ee1a984417ad0a1" kindref="member">LISA::GetDefaultCategories</ref>()<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>cats;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>cats.push_back(</highlight><highlight class="stringliteral">&quot;p<sp/>=<sp/>0.05&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>cats.push_back(</highlight><highlight class="stringliteral">&quot;p<sp/>=<sp/>0.01&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>cats.push_back(</highlight><highlight class="stringliteral">&quot;p<sp/>=<sp/>0.001&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>cats.push_back(</highlight><highlight class="stringliteral">&quot;p<sp/>=<sp/>0.0001&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cats;</highlight></codeline>
<codeline lineno="588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="class_l_i_s_a_1a13defe2359b83ee5a988e99a6e5af2bb" kindref="member">LISA::GetDefaultCutoffs</ref>()<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>cutoffs;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>cutoffs.push_back(0.05);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>cutoffs.push_back(0.01);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>cutoffs.push_back(0.001);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>cutoffs.push_back(0.0001);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cutoffs;</highlight></codeline>
<codeline lineno="597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="class_l_i_s_a_1a9ffdfbc23351d06ef8c58a288a65e6dc" kindref="member">LISA::GetLocalSignificanceValues</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a4cebb360265b00834131007f766f8888" kindref="member">sig_local_vec</ref>;<sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="class_l_i_s_a_1a1dfd91e4c229c87fe81d6f8859bd0e0a" kindref="member">LISA::GetClusterIndicators</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1aafcd78acbda90794728597a5262bf4f5" kindref="member">cluster_vec</ref>;<sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="class_l_i_s_a_1a708cad7d006b534782afbfd2122f4083" kindref="member">LISA::GetSigCatIndicators</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1af8622086c88d0ade80130613a2a0209d" kindref="member">sig_cat_vec</ref>;<sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="class_l_i_s_a_1a2298353561cf8bc8a046a75e0a6101c9" kindref="member">LISA::GetNumNeighbors</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1adc7cdba864b9a1e1dd32cc0172649f7d" kindref="member">nn_vec</ref>;<sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="class_l_i_s_a_1ac661ede940895d9fe8fe08c3895c10af" kindref="member">LISA::GetSpatialLagValues</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a1842b85ffe20032c9fc14bb7734d946c" kindref="member">lag_vec</ref>;<sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="class_l_i_s_a_1a66a7a277ed1b0d774f0e1881a17e6fbe" kindref="member">LISA::GetLISAValues</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a6a3eb34950154b54aa38cdb06e035bd5" kindref="member">lisa_vec</ref>;<sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a5354756caf59cd4ef55eb2b93b83677a" kindref="member">LISA::IsRowStandardize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1ad0d3a85084f836c14ac292dd783cc617" kindref="member">row_standardize</ref>;<sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1af9dcade8f79090a594fe950ad8fa16fa" kindref="member">LISA::SetRowStandardize</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rowStandardize)<sp/>{<sp/><ref refid="class_l_i_s_a_1ad0d3a85084f836c14ac292dd783cc617" kindref="member">row_standardize</ref><sp/>=<sp/>rowStandardize;<sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1aea988ecda20ea77bfe806fd082bbf3f8" kindref="member">LISA::GetNumThreads</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref>;<sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1aa7e54243723d4ae3af341d43236c4a17" kindref="member">LISA::SetNumThreads</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_threads)<sp/>{<sp/><ref refid="class_l_i_s_a_1a93dbaa5b02fbd6b2fef270888b9711b6" kindref="member">nCPUs</ref><sp/>=<sp/>n_threads;<sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="class_l_i_s_a_1af7c025f7b5dbfacfcd1068aea0bc3a16" kindref="member">LISA::GetLabels</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a49e01da3d8c104a895fb09be22931f20" kindref="member">labels</ref>;<sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="class_l_i_s_a_1aa7ccbefcd8fb8543e791485916270cb0" kindref="member">LISA::GetColors</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_l_i_s_a_1a3879ae2936f23e8301ef35200c71d5cd" kindref="member">colors</ref>;<sp/>}</highlight></codeline>
    </programlisting>
    <location file="/Users/xun/github/geoda-lib/src/cpp/lisa/LISA.cpp"/>
  </compounddef>
</doxygen>
