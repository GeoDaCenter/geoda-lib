<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="quantile-breaks_8cpp" kind="file" language="C++">
    <compoundname>quantile-breaks.cpp</compoundname>
    <includes local="no">algorithm</includes>
    <includes refid="mapping_8h" local="yes">mapping/mapping.h</includes>
    <incdepgraph>
      <node id="3">
        <label>mapping/mapping.h</label>
        <link refid="mapping_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/xun/github/geoda-lib/src/cpp/mapping/quantile-breaks.cpp</label>
        <link refid="quantile-breaks_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="4">
        <label>limits</label>
      </node>
      <node id="5">
        <label>utility</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mapping_8h" kindref="compound">mapping/mapping.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacegeoda_1a893cc84a86ec4e9ef3dd2c2c1b8dfec6" kindref="member">geoda::dbl_int_pair_cmp_less</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="mapping_8h_1aa9ab4acaec4dd3baaa7e1e31ec448caf" kindref="member">dbl_int_pair_type</ref>&amp;<sp/>ind1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="mapping_8h_1aa9ab4acaec4dd3baaa7e1e31ec448caf" kindref="member">dbl_int_pair_type</ref>&amp;<sp/>ind2)<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ind1.first<sp/>&lt;<sp/>ind2.first;</highlight></codeline>
<codeline lineno="8"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Same<sp/>assumptions<sp/>as<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacegeoda_1a71ea13dd549661abde0b04a7a5af2a5b" kindref="member">geoda::percentile</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="mapping_8h_1a3435859a52d3b07aea492f663f1cbc18" kindref="member">dbl_int_pair_vec_type</ref>&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>v.size();</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Nd<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(N);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p_0<sp/>=<sp/>(100.0<sp/>/<sp/>Nd)<sp/>*<sp/>(1.0<sp/>-<sp/>0.5);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p_Nm1<sp/>=<sp/>(100.0<sp/>/<sp/>Nd)<sp/>*<sp/>(Nd<sp/>-<sp/>0.5);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;=<sp/>p_0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v[0].first;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>p_Nm1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v[N<sp/>-<sp/>1].first;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p_i<sp/>=<sp/>(100.0<sp/>/<sp/>Nd)<sp/>*<sp/>((i<sp/>+<sp/>1.0)<sp/>-<sp/>0.5);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>p_i)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v[i].first;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>p_i)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p_im1<sp/>=<sp/>(100.0<sp/>/<sp/>Nd)<sp/>*<sp/>(i<sp/>-<sp/>0.5);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v[i<sp/>-<sp/>1].first<sp/>+<sp/>Nd<sp/>*<sp/>((x<sp/>-<sp/>p_im1)<sp/>/<sp/>100.0)<sp/>*<sp/>(v[i].first<sp/>-<sp/>v[i<sp/>-<sp/>1].first);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v[N<sp/>-<sp/>1].first;<sp/><sp/></highlight><highlight class="comment">//<sp/>execution<sp/>should<sp/>never<sp/>get<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implmentation<sp/>of<sp/>quantile<sp/>breaks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="namespacegeoda_1a429e3de946d7d92fe4327091449d6911" kindref="member">geoda::quantile_breaks</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_cats,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>data,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>int&gt;&amp;<sp/>_undef)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_obs<sp/>=<sp/>data.size();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>std::vector&lt;bool&gt;<sp/>undef(num_obs,<sp/>0);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_undef.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_undef.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>undef[i]<sp/>=<sp/>_undef[i]<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>std::vector&lt;std::pair&lt;double,<sp/>int&gt;<sp/>&gt;<sp/>var;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_obs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>var.push_back(std::make_pair(data[i],<sp/>i));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>std::sort(var.begin(),<sp/>var.end(),<sp/><ref refid="namespacegeoda_1a893cc84a86ec4e9ef3dd2c2c1b8dfec6" kindref="member">geoda::dbl_int_pair_cmp_less</ref>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>breaks(num_cats<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>iend<sp/>=<sp/>breaks.size();<sp/>i<sp/>&lt;<sp/>iend;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>breaks[i]<sp/>=<sp/><ref refid="namespacegeoda_1a71ea13dd549661abde0b04a7a5af2a5b" kindref="member">geoda::percentile</ref>(((i<sp/>+<sp/>1.0)<sp/>*<sp/>100.0)<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(num_cats),<sp/>var);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>breaks;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/xun/github/geoda-lib/src/cpp/mapping/quantile-breaks.cpp"/>
  </compounddef>
</doxygen>
