<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="polym_8h" kind="file" language="C++">
    <compoundname>polym.h</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">cmath</includes>
    <includes refid="_power_sym_lag_8h" local="yes">regression/PowerSymLag.h</includes>
    <includedby refid="_m_l__im_8cpp" local="yes">/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp</includedby>
    <incdepgraph>
      <node id="8">
        <label>PowerLag.h</label>
        <link refid="_power_lag_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>regression/PowerSymLag.h</label>
        <link refid="_power_sym_lag_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>lite2.h</label>
        <link refid="lite2_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/polym.h</label>
        <link refid="polym_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>cmath</label>
      </node>
      <node id="6">
        <label>ostream</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/ML_im.cpp</label>
        <link refid="_m_l__im_8cpp"/>
      </node>
      <node id="1">
        <label>/Users/xun/github/geoda-lib/src/cpp/regression/polym.h</label>
        <link refid="polym_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="polym_8h_1a089c2e12eb41c55e339649240bb94c51" prot="public" static="no">
        <name>SL_SMALL_MATRIX</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="11" column="9" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="polym_8h_1aa691a57b0fb8374b072a02825d89a31e" prot="public" static="no">
        <name>SL_SMALL</name>
        <initializer>1e-14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="12" column="9" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="polym_8h_1ac9308e85a1e9abba7f247485552bb3ef" prot="public" static="no">
        <name>geoda_sqr</name>
        <param><defname>x</defname></param>
        <initializer>((x) * (x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="15" column="9" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="15" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="polym_8h_1a5b5a395141319c5c13666a272aa1f645" prot="public" static="no" mutable="no">
        <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
        <definition>INDEX SL_Max_Precision</definition>
        <argsstring></argsstring>
        <name>SL_Max_Precision</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="19" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="polym_8h_1adaf590cd5aa3e5808843ac00d9e26d1e" prot="public" static="no" mutable="no">
        <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
        <definition>INDEX Max_Dense</definition>
        <argsstring></argsstring>
        <name>Max_Dense</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="20" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="polym_8h_1af612757c1d1352066bd1b8773453e5d2" prot="public" static="no" mutable="no">
        <type><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref></type>
        <definition>WMatrix Poly</definition>
        <argsstring></argsstring>
        <name>Poly</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="24" column="9" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="polym_8h_1a00729cbf099b7095d2af82e297fb2206" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool symmetric</definition>
        <argsstring></argsstring>
        <name>symmetric</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="25" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="polym_8h_1a2f3fd9411da34dd4faa1988983fb1545" prot="public" static="no" mutable="no">
        <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
        <definition>const INDEX kDenseMax</definition>
        <argsstring></argsstring>
        <name>kDenseMax</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="444" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="polym_8h_1aca9b6ff613d988cc22b061d312c6ab34" prot="public" static="no" mutable="no">
        <type><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref></type>
        <definition>WMatrix BufferDense</definition>
        <argsstring></argsstring>
        <name>BufferDense</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="447" column="9" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="447" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="polym_8h_1ac00d641cff83a1cfaf4c477c5e645a43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void InitPoly</definition>
        <argsstring>(int precis, const int dim)</argsstring>
        <name>InitPoly</name>
        <param>
          <type>int</type>
          <declname>precis</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="33" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="33" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1a87f716874abb180365d6bf75211e6b35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void PermuteMatrix</definition>
        <argsstring>(Iterator&lt; WVector &gt; mt, const INDEX i, const INDEX j)</argsstring>
        <name>PermuteMatrix</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="50" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="50" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1aaf7ad0bef23a96c5645d722c41349b63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DanilevskyPostMultiply</definition>
        <argsstring>(Iterator&lt; WVector &gt; mt, const INDEX r1, WIterator its)</argsstring>
        <name>DanilevskyPostMultiply</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>r1</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref></type>
          <declname>its</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="64" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="64" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1a8b8dd531fc557cdb257d21b688f964bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DanilevskyPreMultiply</definition>
        <argsstring>(Iterator&lt; WVector &gt; mt, const INDEX r1, WIterator its)</argsstring>
        <name>DanilevskyPreMultiply</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>r1</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref></type>
          <declname>its</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="85" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="85" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1abaab16ef4c9c80a1f8ebb2b96a75dbb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RemoveColumns</definition>
        <argsstring>(Iterator&lt; WVector &gt; mt, const INDEX num)</argsstring>
        <name>RemoveColumns</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="103" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1ac1050cf28402f4b026fa097f83d71dcc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void DanilevskyIteration</definition>
        <argsstring>(Iterator&lt; WVector &gt; mt, const INDEX r1, const INDEX Remove)</argsstring>
        <name>DanilevskyIteration</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>Remove</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="111" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="111" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1ad9ba6ebe14958c3efb4c2b996508f97f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class R</type>
          </param>
        </templateparamlist>
        <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
        <definition>INDEX FindAbsLargest</definition>
        <argsstring>(Iterator&lt; R &gt; vt, INDEX ro)</argsstring>
        <name>FindAbsLargest</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; R &gt;</type>
          <declname>vt</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>ro</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="124" column="14" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="124" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1a0550030e6569c967036f184a62cac73b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PolyMultiply</definition>
        <argsstring>(WVector &amp;a, WIterator b, WVector &amp;c)</argsstring>
        <name>PolyMultiply</name>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="143" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="143" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1abfd9cf31ddb10022112d36489207fab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DanilevskyMethod</definition>
        <argsstring>(Iterator&lt; WVector &gt; mt, WVector &amp;poly)</argsstring>
        <name>DanilevskyMethod</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &amp;</type>
          <declname>poly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="160" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="160" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1a622cc3d52b0eb88a1045e15a4d0ae04a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
        <definition>INDEX LevelStructure</definition>
        <argsstring>(Iterator&lt; WMap &gt; mt, INDEX &amp;start, INDEX &amp;Contig, const Iterator&lt; INDEX &gt; perm, INDEX *order)</argsstring>
        <name>LevelStructure</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref> &amp;</type>
          <declname>Contig</declname>
        </param>
        <param>
          <type>const <ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref> &gt;</type>
          <declname>perm</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref> *</type>
          <declname>order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="199" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="199" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1a1d686219b28c3765fec487a853f105a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class P</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void PolyProduct</definition>
        <argsstring>(Vector&lt; P &gt; &amp;v1, Iterator&lt; P &gt; v2)</argsstring>
        <name>PolyProduct</name>
        <param>
          <type><ref refid="class_vector" kindref="compound">Vector</ref>&lt; P &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; P &gt;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="246" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="246" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1a32c764c7c1a9272f0bdbc0a730225ba2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SparseSubMatrix</definition>
        <argsstring>(Iterator&lt; WMap &gt; mt, Iterator&lt; INDEX &gt; perm, INDEX *flag, Vector&lt; WMap &gt; &amp;v)</argsstring>
        <name>SparseSubMatrix</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref> &gt;</type>
          <declname>perm</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref> *</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="class_vector" kindref="compound">Vector</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="281" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="281" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1a4d2ea91dbbf3520a912c32eeb411c68d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IR</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void SavePerm</definition>
        <argsstring>(Iterator&lt; IR &gt; it, INDEX *perm)</argsstring>
        <name>SavePerm</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; IR &gt;</type>
          <declname>it</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref> *</type>
          <declname>perm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="300" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="300" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1aeb5dc3aae4617b1ecd855c54d6d10565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class R</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Rename</definition>
        <argsstring>(Iterator&lt; R &gt; mt, INDEX *Perm)</argsstring>
        <name>Rename</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; R &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref> *</type>
          <declname>Perm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="308" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="308" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1a783f3ad2f22a8ea86604fae069d4f28a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SelectMatrix</definition>
        <argsstring>(Iterator&lt; WMap &gt; mt, const INDEX start, const INDEX stop, Vector&lt; WMap &gt; &amp;v)</argsstring>
        <name>SelectMatrix</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>stop</declname>
        </param>
        <param>
          <type><ref refid="class_vector" kindref="compound">Vector</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="327" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="327" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1ab41c635f92197ad9d125952a4ae94090" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void RemoveTheBelt</definition>
        <argsstring>(Iterator&lt; WMap &gt; it, INDEX InTheBelt)</argsstring>
        <name>RemoveTheBelt</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>it</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>InTheBelt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="345" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="345" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1a9dcb8129dd797bc11805632aa33f0d66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SparsePolyBordering</definition>
        <argsstring>(Iterator&lt; WMap &gt; mt, const INDEX BeltSize, WMatrix &amp;Poly)</argsstring>
        <name>SparsePolyBordering</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>BeltSize</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref> &amp;</type>
          <declname>Poly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="364" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="364" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1abf8445d3c21621b80fa766845706b935" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SparsePolyBorderingNE</definition>
        <argsstring>(Iterator&lt; WMap &gt; mt, const INDEX BeltSize, WMatrix &amp;Poly)</argsstring>
        <name>SparsePolyBorderingNE</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>BeltSize</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref> &amp;</type>
          <declname>Poly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="400" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="400" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1a76bea34d3f14396be8f647b7667fff04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DensePolySolving</definition>
        <argsstring>(Iterator&lt; WMap &gt; mt)</argsstring>
        <name>DensePolySolving</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="452" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="452" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1aa07e9b8661f4182f3beaf429619b695d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DensePolySolvingOld</definition>
        <argsstring>(Iterator&lt; WMap &gt; mt)</argsstring>
        <name>DensePolySolvingOld</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="485" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="485" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1a1369c7b447e333a1a3198034b1b7b355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PolyOrganize</definition>
        <argsstring>(const WVector *First, const INDEX Precision, Iterator&lt; WVector &gt; Border)</argsstring>
        <name>PolyOrganize</name>
        <param>
          <type>const <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> *</type>
          <declname>First</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>Precision</declname>
        </param>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>Border</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="509" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="509" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1a7a5c04884939f8a9c40e2e0cab172486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
        <definition>INDEX SplitSparse</definition>
        <argsstring>(Iterator&lt; WMap &gt; mt, INDEX Pseudo, INDEX &amp;Second, INDEX &amp;PseudoCount)</argsstring>
        <name>SplitSparse</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>Pseudo</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref> &amp;</type>
          <declname>Second</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref> &amp;</type>
          <declname>PseudoCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="539" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="539" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1aefa3295517e3c2de8b707231c86511b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
        <definition>INDEX SplitSparseOld</definition>
        <argsstring>(Iterator&lt; WMap &gt; mt, INDEX Pseudo, INDEX &amp;Level, INDEX &amp;Second)</argsstring>
        <name>SplitSparseOld</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>Pseudo</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref> &amp;</type>
          <declname>Level</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref> &amp;</type>
          <declname>Second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="619" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="619" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1af1c7749bc4934f25849032d35c8beed9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SparsePoly</definition>
        <argsstring>(Iterator&lt; WMap &gt; mt)</argsstring>
        <name>SparsePoly</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="733" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="733" bodyend="755" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" declline="662" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1a557ef056710cede1495d4c331cb31b1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SparseBlockPoly</definition>
        <argsstring>(Iterator&lt; WMap &gt; mt, INDEX Pseudo)</argsstring>
        <name>SparseBlockPoly</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>Pseudo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="703" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="703" bodyend="724" declfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" declline="663" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1abb49292e91ec68878ad6be06e0f73543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SelectBlockPolyNE</definition>
        <argsstring>(Iterator&lt; WMap &gt; mt, const INDEX StartBest, const INDEX PseudoCount)</argsstring>
        <name>SelectBlockPolyNE</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>StartBest</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>PseudoCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="665" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="665" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1a96dd1cdaa9b0000c0475ad715c3148e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PartialRename</definition>
        <argsstring>(Iterator&lt; WMap &gt; it, const INDEX Deduct)</argsstring>
        <name>PartialRename</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>it</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>Deduct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="685" column="6" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="685" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1aefe68e52b1679297acdda70b93f684dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void SelectPolyNE</definition>
        <argsstring>(Iterator&lt; WMap &gt; mt, const INDEX StartBest, const INDEX Stop)</argsstring>
        <name>SelectPolyNE</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1acfa58732882265b88a2da01b3a6cf948" kindref="member">WMap</ref> &gt;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>StartBest</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>Stop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="691" column="13" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="691" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1a50bd3effbed49185c43d5d1f6e5fd810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE OnePoly</definition>
        <argsstring>(Iterator&lt; WVector &gt; Poly, const VALUE Val, const INDEX Prec, INDEX Pr)</argsstring>
        <name>OnePoly</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>Poly</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>Val</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>Prec</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>Pr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="759" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="759" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="polym_8h_1a303bc3e7da1c5ac7b10ff52915ba50b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
        <definition>VALUE OnePrime</definition>
        <argsstring>(Iterator&lt; WVector &gt; Poly, const VALUE Val, const INDEX Prec, INDEX Pr)</argsstring>
        <name>OnePrime</name>
        <param>
          <type><ref refid="class_iterator" kindref="compound">Iterator</ref>&lt; <ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref> &gt;</type>
          <declname>Poly</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref></type>
          <declname>Val</declname>
        </param>
        <param>
          <type>const <ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>Prec</declname>
        </param>
        <param>
          <type><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref></type>
          <declname>Pr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" line="786" column="7" bodyfile="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h" bodystart="786" bodyend="811"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>Characteristic<sp/>polynomial<sp/>problem<sp/>solving.</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__GEODA_CENTER_POLYM_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__GEODA_CENTER_POLYM_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="polym_8h_1a089c2e12eb41c55e339649240bb94c51" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SL_SMALL_MATRIX<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="polym_8h_1aa691a57b0fb8374b072a02825d89a31e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SL_SMALL<sp/>1e-14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_power_sym_lag_8h" kindref="compound">regression/PowerSymLag.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="polym_8h_1ac9308e85a1e9abba7f247485552bb3ef" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>geoda_sqr(x)<sp/>((x)<sp/>*<sp/>(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//***<sp/>here<sp/>go<sp/>global<sp/>variables<sp/>for<sp/>the<sp/>characteristic<sp/>polynomial<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="polym_8h_1a5b5a395141319c5c13666a272aa1f645" refkind="member"><highlight class="normal"><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/><ref refid="polym_8h_1a5b5a395141319c5c13666a272aa1f645" kindref="member">SL_Max_Precision</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>precision<sp/>--<sp/>length<sp/>--<sp/>of<sp/>the<sp/>polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="polym_8h_1adaf590cd5aa3e5808843ac00d9e26d1e" refkind="member"><highlight class="normal"><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/><ref refid="polym_8h_1adaf590cd5aa3e5808843ac00d9e26d1e" kindref="member">Max_Dense</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>performance:<sp/>max<sp/>size<sp/>of<sp/>dense<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ofstream<sp/><sp/><sp/><sp/>output(&quot;poly.txt&quot;);<sp/><sp/><sp/><sp/><sp/>//<sp/>performance:<sp/>intermediate<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>static<sp/><sp/><sp/>WMatrix<sp/><sp/><sp/><sp/><sp/>Poly;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>the<sp/>container<sp/>for<sp/>the<sp/>characteristic<sp/>polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" refkind="member"><highlight class="normal"><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/><ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>container<sp/>for<sp/>the<sp/>characteristic<sp/>polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>symmetric;<sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>assume<sp/>symmetry<sp/>of<sp/>the<sp/>original<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>InitPoly</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>determines<sp/>the<sp/>size<sp/>of<sp/>the<sp/>polynomial<sp/>to<sp/>be<sp/>computed,<sp/>given<sp/>user&apos;s<sp/>requests:</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>precis<sp/>--<sp/>desired<sp/>length<sp/>of<sp/>the<sp/>characteristic<sp/>polynomial;</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>dim<sp/>--<sp/>dimension<sp/>of<sp/>the<sp/>spatial<sp/>weights<sp/>matrix.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>Initializes<sp/>static<sp/>variable<sp/>Poly<sp/>that<sp/>will<sp/>contain<sp/>computed<sp/>polynomial.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="polym_8h_1ac00d641cff83a1cfaf4c477c5e645a43" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1ac00d641cff83a1cfaf4c477c5e645a43" kindref="member">InitPoly</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precis,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precis<sp/>&lt;=<sp/><ref refid="polym_8h_1a089c2e12eb41c55e339649240bb94c51" kindref="member">SL_SMALL_MATRIX</ref>)<sp/>precis<sp/>=<sp/><ref refid="polym_8h_1a089c2e12eb41c55e339649240bb94c51" kindref="member">SL_SMALL_MATRIX</ref><sp/>+<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>smaller<sp/>precision<sp/>is<sp/>possible<sp/>but<sp/>who<sp/>needs<sp/>it?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precis<sp/>%<sp/>2<sp/>==<sp/>0)<sp/>--precis;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>odd<sp/>numbers<sp/>only,<sp/>because<sp/>last<sp/>power<sp/>stored<sp/>must<sp/>be<sp/>even</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>&lt;<sp/>precis)<sp/>precis<sp/>=<sp/>dim<sp/>+<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>complete<sp/>characteristic<sp/>polynomial<sp/>has<sp/>only<sp/>dim+1<sp/>coefficients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>results<sp/>in<sp/>static<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1a5b5a395141319c5c13666a272aa1f645" kindref="member">SL_Max_Precision</ref><sp/>=<sp/>precis;<sp/><sp/></highlight><highlight class="comment">//<sp/>precision<sp/>that<sp/>the<sp/>polynomials<sp/>will<sp/>be<sp/>truncated<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1adaf590cd5aa3e5808843ac00d9e26d1e" kindref="member">Max_Dense</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>.clear();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>symmetric<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>.alloc(dim);<sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PermuteMatrix</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>&lt;class<sp/>R&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="polym_8h_1a87f716874abb180365d6bf75211e6b35" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1a87f716874abb180365d6bf75211e6b35" kindref="member">PermuteMatrix</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>mt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>mt[i].Swap(mt[j]);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exchange<sp/>i<sp/>and<sp/>j<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>mt;<sp/>++mt)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap((*mt)[i],<sp/>(*mt)[j]);<sp/><sp/></highlight><highlight class="comment">//<sp/>exchange<sp/>i<sp/>and<sp/>j<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DanilevskyPostMultiply</highlight></codeline>
<codeline lineno="60"><highlight class="comment">Multiplies<sp/>matrix<sp/>mt<sp/>by<sp/>a<sp/>matrix<sp/>that<sp/>is<sp/>different<sp/>from<sp/>I</highlight></codeline>
<codeline lineno="61"><highlight class="comment">by<sp/>a<sp/>single<sp/>row<sp/>and<sp/>reduces<sp/>last<sp/>row<sp/>of<sp/>mt<sp/>to<sp/>that<sp/>of<sp/>Frobenius</highlight></codeline>
<codeline lineno="62"><highlight class="comment">form.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="polym_8h_1aaf7ad0bef23a96c5645d722c41349b63" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1aaf7ad0bef23a96c5645d722c41349b63" kindref="member">DanilevskyPostMultiply</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>mt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>r1,<sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>its)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>it,<sp/>itr;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>Row,<sp/>Pivot<sp/>=<sp/>its[r1];</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>mt;<sp/>++mt)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>it((*mt).first(),<sp/>r1);<sp/><sp/></highlight><highlight class="comment">//<sp/>limit<sp/>to<sp/>1st<sp/>r1<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>Row<sp/>=<sp/>it[r1]<sp/>/<sp/>Pivot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pivot<sp/>for<sp/>the<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Row<sp/>!=<sp/>0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>iteration<sp/>if<sp/>trivial<sp/>transform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itr<sp/>=<sp/>its;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>itr<sp/>is<sp/>modifying<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it;<sp/>++it)<sp/>(*it)<sp/>-=<sp/>Row<sp/>*<sp/>(*itr++);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*it++<sp/>=<sp/>Row;<sp/><sp/></highlight><highlight class="comment">//<sp/>(r1+1)th<sp/>will<sp/>be<sp/>the<sp/>Row<sp/>pivot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itr;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr;<sp/>++itr)<sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>the<sp/>rest<sp/>elements<sp/>of<sp/>the<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*it++)<sp/>-=<sp/>Row<sp/>*<sp/>(*itr);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DanilevskyPreMultiply</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="polym_8h_1a8b8dd531fc557cdb257d21b688f964bd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1a8b8dd531fc557cdb257d21b688f964bd" kindref="member">DanilevskyPreMultiply</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>mt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>r1,<sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>its)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>row1(its.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>(),<sp/>0);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>it,<sp/>itr;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>Row;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>mt;<sp/>++mt)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>Row<sp/>=<sp/>*its++;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Row<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>(*mt)(),<sp/>itr<sp/>=<sp/>row1();<sp/>it;<sp/>++it)<sp/>(*itr++)<sp/>+=<sp/>*it<sp/>*<sp/>Row;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itr<sp/>=<sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref>(row1.<ref refid="class_vector_1a53aad8ce8c9b993a8d4db1734a8f7cee" kindref="member">first</ref>()<sp/>+<sp/>r1);<sp/>its;<sp/>++its)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>(*itr++)<sp/>+=<sp/>*its;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>--mt;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>row1.<ref refid="class_vector_1a3cd35c20c654363bb9e0c3ea77f977e0" kindref="member">Swap</ref>(*mt);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="polym_8h_1abaab16ef4c9c80a1f8ebb2b96a75dbb4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1abaab16ef4c9c80a1f8ebb2b96a75dbb4" kindref="member">RemoveColumns</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>mt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>mt;<sp/>++mt)<sp/>(*mt)<sp/>-=<sp/>num;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Danilevsky<sp/>Iteration</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="polym_8h_1ac1050cf28402f4b026fa097f83d71dcc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1ac1050cf28402f4b026fa097f83d71dcc" kindref="member">DanilevskyIteration</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>mt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>r1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Remove)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Remove)<sp/><ref refid="polym_8h_1abaab16ef4c9c80a1f8ebb2b96a75dbb4" kindref="member">RemoveColumns</ref>(mt,<sp/>Remove);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>itsave(mt[r1<sp/>+<sp/>1]());</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>mt.<ref refid="class_iterator_1ac81b3dc4eacb59190c89be0b145bd1f3" kindref="member">deflate</ref>();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1aaf7ad0bef23a96c5645d722c41349b63" kindref="member">DanilevskyPostMultiply</ref>(mt,<sp/>r1,<sp/>itsave);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1a8b8dd531fc557cdb257d21b688f964bd" kindref="member">DanilevskyPreMultiply</ref>(mt,<sp/>r1,<sp/>itsave);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FindAbsLargest</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="124" refid="polym_8h_1ad9ba6ebe14958c3efb4c2b996508f97f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/><ref refid="polym_8h_1ad9ba6ebe14958c3efb4c2b996508f97f" kindref="member">FindAbsLargest</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;R&gt;</ref><sp/>vt,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>ro)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>R<sp/>init<sp/>=<sp/>*vt;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>initx(0),<sp/>ix(0);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(++ix<sp/>&lt;=<sp/>ro)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>++vt;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(*vt)<sp/>&gt;<sp/>init)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>init<sp/>=<sp/>fabs(*vt);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>initx<sp/>=<sp/>ix;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>initx;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PolyMultiply</highlight></codeline>
<codeline lineno="139"><highlight class="comment">c<sp/>is<sp/>a<sp/>product<sp/>of<sp/>two<sp/>polynomials,<sp/>determined<sp/>by<sp/>a<sp/>and<sp/>b.</highlight></codeline>
<codeline lineno="140"><highlight class="comment">a<sp/>is<sp/>a<sp/>polynomial<sp/>(including<sp/>leading<sp/>1);</highlight></codeline>
<codeline lineno="141"><highlight class="comment">The<sp/>second<sp/>polynomial<sp/>is<sp/>{1,<sp/>-b}.</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="polym_8h_1a0550030e6569c967036f184a62cac73b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1a0550030e6569c967036f184a62cac73b" kindref="member">PolyMultiply</ref>(<ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;a,<sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>b,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;c)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>c.<ref refid="class_vector_1a864d1f7b69f57a633f3b248fad3619ee" kindref="member">alloc</ref>(a.<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>()<sp/>+<sp/>b.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1acfc62f638d7f256178130be948c921f6" kindref="member">Copy</ref>(c,<sp/>a());</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>cp<sp/>=<sp/>b.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();<sp/>cp;<sp/>--cp)<sp/>c<sp/>&lt;&lt;<sp/>0;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>ita<sp/>=<sp/>a(),<sp/>itr<sp/>=<sp/>c(),<sp/>itr2,<sp/>itb;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>++itr;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>ita;<sp/>++ita,<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>vita<sp/>=<sp/>*ita;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vita<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itb<sp/>=<sp/>b,<sp/>itr2<sp/>=<sp/>itr;<sp/>itb;<sp/>++itb)<sp/>*itr2++<sp/>-=<sp/>vita<sp/>*<sp/>(*itb);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Danilevsky<sp/>Method</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="polym_8h_1abfd9cf31ddb10022112d36489207fab7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1abfd9cf31ddb10022112d36489207fab7" kindref="member">DanilevskyMethod</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>mt,<sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>&amp;poly)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>Dsmall<sp/>=<sp/>0.001;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>dim<sp/>=<sp/>mt.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>(),<sp/>col,<sp/>ro<sp/>=<sp/>dim,<sp/>C2Remove<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>tpoly(1,<sp/>1),<sp/>tp;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>PrintM(mt);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--ro)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(mt[ro][ro<sp/>-<sp/>1])<sp/>&gt;<sp/>Dsmall)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>regular<sp/>iteration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polym_8h_1ac1050cf28402f4b026fa097f83d71dcc" kindref="member">DanilevskyIteration</ref>(mt,<sp/>ro<sp/>-<sp/>1,<sp/>C2Remove);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>C2Remove<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>permute<sp/>&amp;<sp/>iterate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>=<sp/><ref refid="polym_8h_1ad9ba6ebe14958c3efb4c2b996508f97f" kindref="member">FindAbsLargest</ref>(mt[ro](),<sp/>ro<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mt[ro][col]<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polym_8h_1a87f716874abb180365d6bf75211e6b35" kindref="member">PermuteMatrix</ref>(mt,<sp/>col,<sp/>ro<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polym_8h_1ac1050cf28402f4b026fa097f83d71dcc" kindref="member">DanilevskyIteration</ref>(mt,<sp/>ro<sp/>-<sp/>1,<sp/>C2Remove);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C2Remove<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp<sp/>=<sp/>tpoly;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polym_8h_1a0550030e6569c967036f184a62cac73b" kindref="member">PolyMultiply</ref>(tp,<sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref>(&amp;mt[ro][ro],<sp/>dim<sp/>-<sp/>ro),<sp/>tpoly);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C2Remove<sp/>+=<sp/>dim<sp/>-<sp/>ro;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim<sp/>=<sp/>ro;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>mt.<ref refid="class_iterator_1ac81b3dc4eacb59190c89be0b145bd1f3" kindref="member">deflate</ref>();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1a0550030e6569c967036f184a62cac73b" kindref="member">PolyMultiply</ref>(tpoly,<sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref>(mt[0].first(),<sp/>dim),<sp/>poly);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LevelStructure</highlight></codeline>
<codeline lineno="190"><highlight class="comment">Assumes<sp/>order<sp/>has<sp/>dim(mt)+1<sp/>in<sp/>all<sp/>its<sp/>elements.</highlight></codeline>
<codeline lineno="191"><highlight class="comment">On<sp/>the<sp/>exit:<sp/>perm<sp/>--<sp/>contains<sp/>the<sp/>ordering,</highlight></codeline>
<codeline lineno="192"><highlight class="comment">order<sp/>--<sp/>contains<sp/>contiguity<sp/>order<sp/>(0,1,2,...)<sp/>for<sp/>each<sp/>block</highlight></codeline>
<codeline lineno="193"><highlight class="comment">sequence<sp/>is<sp/>determined<sp/>by<sp/>perm;</highlight></codeline>
<codeline lineno="194"><highlight class="comment">start<sp/>--<sp/>the<sp/>pseudoperipheral;</highlight></codeline>
<codeline lineno="195"><highlight class="comment">Contig<sp/>--<sp/>length<sp/>of<sp/>the<sp/>levelstructure<sp/>(if<sp/>single<sp/>block);</highlight></codeline>
<codeline lineno="196"><highlight class="comment">returns<sp/>the<sp/>number<sp/>of<sp/>blocks.</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>&lt;class<sp/>M&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="polym_8h_1a622cc3d52b0eb88a1045e15a4d0ae04a" refkind="member"><highlight class="normal"><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/><ref refid="polym_8h_1a622cc3d52b0eb88a1045e15a4d0ae04a" kindref="member">LevelStructure</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>&amp;start,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>&amp;Contig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;INDEX&gt;</ref><sp/>perm,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>*order)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_vector_1a12449554072b5e05998c3e5607dcc2e3" kindref="member">WMap::input_iterator</ref><sp/>iROW;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Dim1<sp/>=<sp/>mt.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>()<sp/>+<sp/>1,<sp/>conty(0),<sp/>pieces(0),<sp/>init(start);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>*first,<sp/>*last,<sp/>*current,<sp/>*next;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>next<sp/>=<sp/>perm();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>order[init]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>++pieces;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>last<sp/>=<sp/>next++;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>*last<sp/>=<sp/>init;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>last;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++conty;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(current<sp/>=<sp/>first;<sp/>current<sp/>&lt;<sp/>last;<sp/>++current)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iROW<sp/>r<sp/>=<sp/>mt[*current]();<sp/>r;<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>tid<sp/>=<sp/>(*r).first;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order[tid]<sp/>==<sp/>Dim1)<sp/>order[(*next++)<sp/>=<sp/>tid]<sp/>=<sp/>conty;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(last<sp/>!=<sp/>next);<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>new<sp/>elements<sp/>added<sp/>to<sp/>permutation<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next<sp/>&lt;=<sp/>perm.<ref refid="class_iterator_1a6aee1057c202f255a23a0b841ab16e44" kindref="member">last</ref>())</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(order[init]<sp/>&lt;<sp/>Dim1)<sp/>++init;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(next<sp/>&lt;=<sp/>perm.<ref refid="class_iterator_1a6aee1057c202f255a23a0b841ab16e44" kindref="member">last</ref>());</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>order[init]<sp/>=<sp/>0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mark<sp/>the<sp/>last<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pieces<sp/>==<sp/>1)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>element<sp/>with<sp/>min<sp/>degree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>init<sp/>=<sp/>Dim1;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;ordering<sp/>&quot;<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/>mt.count()<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>elts,<sp/><sp/>conty:<sp/>&quot;<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/>conty<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>has<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>&lt;&lt;<sp/>last-first<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(current<sp/>=<sp/>first;<sp/>current<sp/>&lt;<sp/>last;<sp/>++current)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>cnt<sp/>=<sp/>mt[*current].<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cnt<sp/>&lt;<sp/>init)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init<sp/>=<sp/>cnt;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>Contig<sp/>=<sp/>conty;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>start<sp/>=<sp/>next<sp/>-<sp/>perm();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pieces;</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PolyProduct</highlight></codeline>
<codeline lineno="243"><highlight class="comment"></highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>P&gt;</highlight></codeline>
<codeline lineno="246" refid="polym_8h_1a1d686219b28c3765fec487a853f105a0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1a1d686219b28c3765fec487a853f105a0" kindref="member">PolyProduct</ref>(<ref refid="class_vector" kindref="compound">Vector&lt;P&gt;</ref><sp/>&amp;v1,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;P&gt;</ref><sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;P&gt;</ref><sp/>it2;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><ref refid="class_short_iterator" kindref="compound">ShortIterator&lt;P&gt;</ref><sp/>it1(v1.<ref refid="class_vector_1ae5041c136faabeccd5ed9f519c9f4e80" kindref="member">last</ref>()),<sp/>First,<sp/>work;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>P<sp/>Current;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Restricted<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Add<sp/>=<sp/>v2.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>()<sp/>-<sp/>1,<sp/>AddRestricted<sp/>=<sp/>v1.<ref refid="class_vector_1a9b439586cd10cb45d002ca9d6e3db43c" kindref="member">size</ref>()<sp/>-<sp/>v1.<ref refid="class_vector_1af45f4326d063c568d21181d0d5738838" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Add<sp/>&gt;<sp/>AddRestricted)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>Restricted<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>Add<sp/>=<sp/>AddRestricted;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>AddIn<sp/>=<sp/>0;<sp/>AddIn<sp/>&lt;<sp/>Add;<sp/>++AddIn)<sp/><sp/></highlight><highlight class="comment">//<sp/>adds<sp/>Add<sp/>zeros<sp/>to<sp/>the<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>v1<sp/>&lt;&lt;<sp/>0;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Restricted)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>++Add;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>First<sp/>=<sp/><ref refid="class_short_iterator" kindref="compound">ShortIterator&lt;P&gt;</ref>(it1()<sp/>-<sp/>v2.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>()<sp/>+<sp/>Add);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>v2<sp/>=<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;P&gt;</ref>(v2.<ref refid="class_iterator_1a6e5276437e645efc8da75c4609fdff5b" kindref="member">first</ref>(),<sp/>Add);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>First<sp/>&lt;<sp/>it1;<sp/>--it1)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Current<sp/>=<sp/>*it1)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(*it1<sp/>=<sp/>0,<sp/>it2<sp/>=<sp/>v2,<sp/>work<sp/>=<sp/>it1;<sp/>it2;<sp/>++it2)<sp/>(*work++)<sp/>+=<sp/>*it2<sp/>*<sp/>Current;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v2.<ref refid="class_iterator_1afa5c45d65e59fc5c643d796997444071" kindref="member">inflate</ref>();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>First<sp/>=<sp/><ref refid="class_short_iterator" kindref="compound">ShortIterator&lt;P&gt;</ref>(v1.<ref refid="class_vector_1a53aad8ce8c9b993a8d4db1734a8f7cee" kindref="member">first</ref>());</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>!(it1<sp/>&lt;<sp/>First);<sp/>--it1)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Current<sp/>=<sp/>*it1,<sp/>*it1<sp/>=<sp/>0,<sp/>it2<sp/>=<sp/>v2,<sp/>work<sp/>=<sp/>it1;<sp/>it2;<sp/>++it2)<sp/>(*work++)<sp/>+=<sp/>*it2<sp/>*<sp/>Current;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SparseSubMatrix</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>&lt;class<sp/>R&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="polym_8h_1a32c764c7c1a9272f0bdbc0a730225ba2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1a32c764c7c1a9272f0bdbc0a730225ba2" kindref="member">SparseSubMatrix</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;INDEX&gt;</ref><sp/>perm,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>*flag,<sp/><ref refid="class_vector" kindref="compound">Vector&lt;WMap&gt;</ref><sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Length<sp/>=<sp/>0,<sp/>*IxPerm<sp/>=<sp/>perm(),<sp/>FlagId<sp/>=<sp/>flag[*perm];</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><ref refid="class_vector" kindref="compound">Vector&lt;INDEX&gt;</ref><sp/>InversePermute(mt.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(perm<sp/>&amp;&amp;<sp/>flag[*perm]<sp/>==<sp/>FlagId)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>InversePermute[*perm++]<sp/>=<sp/>Length;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>++Length;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>v.<ref refid="class_vector_1a864d1f7b69f57a633f3b248fad3619ee" kindref="member">alloc</ref>(Length);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>v;<sp/>++v)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vector_1a12449554072b5e05998c3e5607dcc2e3" kindref="member">WMap::input_iterator</ref><sp/>OneRow<sp/>=<sp/>mt[*IxPerm++]();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>(*v).alloc(OneRow.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>OneRow;<sp/>++OneRow)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag[(*OneRow).first]<sp/>==<sp/>FlagId)<sp/>*v<sp/>&lt;&lt;<sp/><ref refid="class_short_iterator_1a53ec66291ce2b7e582be864a5904be33" kindref="member">WMap::data</ref>(InversePermute[(*OneRow).first],<sp/>(*OneRow).second);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>IR&gt;</highlight></codeline>
<codeline lineno="300" refid="polym_8h_1a4d2ea91dbbf3520a912c32eeb411c68d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1a4d2ea91dbbf3520a912c32eeb411c68d" kindref="member">SavePerm</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;IR&gt;</ref><sp/>it,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>*perm)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it;<sp/>++it)<sp/>(*it).first<sp/>=<sp/>perm[(*it).first];</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rename</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="308" refid="polym_8h_1aeb5dc3aae4617b1ecd855c54d6d10565" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1aeb5dc3aae4617b1ecd855c54d6d10565" kindref="member">Rename</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;R&gt;</ref><sp/>mt,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>*Perm)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_iterator" kindref="compound">Iterator&lt;R&gt;</ref><sp/>it<sp/>=<sp/>mt;<sp/>it;<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="polym_8h_1a4d2ea91dbbf3520a912c32eeb411c68d" kindref="member">SavePerm</ref>((*it)(),<sp/>Perm);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1a296bbd8b511d9d0ec7e41b6203569c0d" kindref="member">HeapSort</ref>((*it)());</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Dim<sp/>=<sp/>mt.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>(),<sp/>IxOld,<sp/>IxNew;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(IxOld<sp/>=<sp/>0;<sp/>IxOld<sp/>&lt;<sp/>Dim;<sp/>++IxOld)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>IxNew<sp/>=<sp/>Perm[IxOld];</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(IxOld<sp/>!=<sp/>IxNew)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mt[IxNew].Swap(mt[IxOld]);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(IxNew,<sp/>Perm[IxNew]);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SelectMatrix</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="polym_8h_1a783f3ad2f22a8ea86604fae069d4f28a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1a783f3ad2f22a8ea86604fae069d4f28a" kindref="member">SelectMatrix</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>stop,<sp/><ref refid="class_vector" kindref="compound">Vector&lt;WMap&gt;</ref><sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>it(mt.<ref refid="class_iterator_1a6e5276437e645efc8da75c4609fdff5b" kindref="member">first</ref>()<sp/>+<sp/>start,<sp/>stop<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>v.<ref refid="class_vector_1a864d1f7b69f57a633f3b248fad3619ee" kindref="member">alloc</ref>(stop<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it;<sp/>++it,<sp/>++v)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WPair&gt;</ref><sp/>itr<sp/>=<sp/>(*it)();</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(itr<sp/>&amp;&amp;<sp/>(*itr).<ref refid="class_iterator_1a6e5276437e645efc8da75c4609fdff5b" kindref="member">first</ref><sp/>&lt;<sp/>start)<sp/>++itr;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>(*v).alloc(itr.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>());</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(itr<sp/>&amp;&amp;<sp/>(*itr).<ref refid="class_iterator_1a6e5276437e645efc8da75c4609fdff5b" kindref="member">first</ref><sp/>&lt;<sp/>stop)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*v<sp/>&lt;&lt;<sp/><ref refid="lite2_8h_1aa5cc9c44184affabe7dbac94d90f2854" kindref="member">WPair</ref>((*itr).first<sp/>-<sp/>start,<sp/>(*itr).second);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++itr;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RemoveTheBelt</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="polym_8h_1ab41c635f92197ad9d125952a4ae94090" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1ab41c635f92197ad9d125952a4ae94090" kindref="member">RemoveTheBelt</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>it,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>InTheBelt)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Limit<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it;<sp/>++it)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>truncate<sp/>the<sp/>belt<sp/>from<sp/>the<sp/>weights<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InTheBelt<sp/>&lt;<sp/>Limit)<sp/>++InTheBelt;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>++Limit;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(*it).empty())<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--(*it);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*(*it)).first<sp/>&lt;<sp/>InTheBelt)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++(*it);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SparsePolyBordering</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="polym_8h_1a9dcb8129dd797bc11805632aa33f0d66" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1a9dcb8129dd797bc11805632aa33f0d66" kindref="member">SparsePolyBordering</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>BeltSize,<sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>&amp;<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Dim<sp/>=<sp/>mt.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>(),<sp/>InTheBelt<sp/>=<sp/>Dim<sp/>-<sp/>BeltSize;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1ab41c635f92197ad9d125952a4ae94090" kindref="member">RemoveTheBelt</ref>(mt,<sp/>InTheBelt);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>it(mt.<ref refid="class_iterator_1a6e5276437e645efc8da75c4609fdff5b" kindref="member">first</ref>(),<sp/>InTheBelt);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>InTheBelt<sp/>&lt;<sp/>Dim;<sp/>++InTheBelt)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>(*Poly).alloc(<ref refid="lite2_8h_1ae57614aa49a6298bfcef92612873e04d" kindref="member">sl_min</ref>(InTheBelt<sp/>+<sp/>2,<sp/><ref refid="polym_8h_1a5b5a395141319c5c13666a272aa1f645" kindref="member">SL_Max_Precision</ref>));</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>Diag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mt[InTheBelt])</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*(mt[InTheBelt])).first<sp/>==<sp/>InTheBelt)<sp/>Diag<sp/>=<sp/>(*(mt[InTheBelt])).second;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(symmetric)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_power_sym_lag" kindref="compound">PowerSymLag</ref><sp/>SparseLag(it,<sp/>InTheBelt);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="smile2_8cpp_1a8c05e96c512e86c2fc507220e0b402b0" kindref="member">Lag</ref><sp/>=<sp/>SparseLag.<ref refid="class_power_sym_lag_1ac533476439cd9580fce54d85485810c1" kindref="member">Init</ref>();</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref><sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>-Diag<sp/>&lt;&lt;<sp/>-<ref refid="smile2_8cpp_1a8c05e96c512e86c2fc507220e0b402b0" kindref="member">Lag</ref>;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>)<sp/>*<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref><sp/>&lt;&lt;<sp/>-SparseLag.<ref refid="class_power_sym_lag_1a2ebb74609729a2784ae3abaa59e5c9b6" kindref="member">ComputeLag</ref>();</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>matrix<sp/>is<sp/>not<sp/>symmetric,<sp/>yet<sp/>has<sp/>symmetric<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_power_lag" kindref="compound">PowerLag</ref><sp/>SparseLag(it,<sp/>InTheBelt);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="smile2_8cpp_1a8c05e96c512e86c2fc507220e0b402b0" kindref="member">Lag</ref><sp/>=<sp/>SparseLag.<ref refid="class_power_lag_1aac78c8b85bf9e9b2cebe0101be5238e5" kindref="member">Init</ref>();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref><sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>-Diag<sp/>&lt;&lt;<sp/>-<ref refid="smile2_8cpp_1a8c05e96c512e86c2fc507220e0b402b0" kindref="member">Lag</ref>;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smile2_8cpp_1a8c05e96c512e86c2fc507220e0b402b0" kindref="member">Lag</ref><sp/>=<sp/>SparseLag.<ref refid="class_power_lag_1aba86f6228fe473b73c264c8dc92da290" kindref="member">ComputeLag</ref>();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref><sp/>&lt;&lt;<sp/>-<ref refid="smile2_8cpp_1a8c05e96c512e86c2fc507220e0b402b0" kindref="member">Lag</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>it.<ref refid="class_iterator_1afa5c45d65e59fc5c643d796997444071" kindref="member">inflate</ref>();</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WPair&gt;</ref><sp/>itr<sp/>=<sp/>(*it.<ref refid="class_iterator_1a6aee1057c202f255a23a0b841ab16e44" kindref="member">last</ref>())();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr;<sp/>++itr)<sp/>++it[(*itr).first];</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Diag)<sp/>++mt[InTheBelt];</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SparsePolyBordering</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="polym_8h_1abf8445d3c21621b80fa766845706b935" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1abf8445d3c21621b80fa766845706b935" kindref="member">SparsePolyBorderingNE</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>BeltSize,<sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>&amp;<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Dim<sp/>=<sp/>mt.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>InTheBelt;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>it<sp/>=<sp/>mt;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(InTheBelt<sp/>=<sp/>Dim<sp/>-<sp/>1;<sp/>InTheBelt<sp/>&gt;=<sp/>Dim<sp/>-<sp/>BeltSize;<sp/>--InTheBelt)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>it.<ref refid="class_iterator_1ac81b3dc4eacb59190c89be0b145bd1f3" kindref="member">deflate</ref>();</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WPair&gt;</ref><sp/>itr<sp/>=<sp/>it[InTheBelt]();<sp/><sp/></highlight><highlight class="comment">//<sp/>iterate<sp/>over<sp/>the<sp/>just<sp/>bordered<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr;<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--it[(*itr).first];<sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>these<sp/>elements<sp/>from<sp/>the<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(Diag)<sp/>--it[InTheBelt];<sp/><sp/><sp/>--<sp/>don&apos;t<sp/>need<sp/>,<sp/>since<sp/>the<sp/>whole<sp/>row<sp/>goes<sp/>away</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>it.deflate();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>remove<sp/>the<sp/>row<sp/>from<sp/>the<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>(*Poly).alloc(<ref refid="lite2_8h_1ae57614aa49a6298bfcef92612873e04d" kindref="member">sl_min</ref>(InTheBelt<sp/>+<sp/>2,<sp/><ref refid="polym_8h_1a5b5a395141319c5c13666a272aa1f645" kindref="member">SL_Max_Precision</ref>));</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>Diag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mt[InTheBelt])</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*(mt[InTheBelt])).first<sp/>==<sp/>InTheBelt)<sp/>Diag<sp/>=<sp/>(*(mt[InTheBelt])).second;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(symmetric)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_power_sym_lag" kindref="compound">PowerSymLag</ref><sp/>SparseLag(it,<sp/>InTheBelt);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="smile2_8cpp_1a8c05e96c512e86c2fc507220e0b402b0" kindref="member">Lag</ref><sp/>=<sp/>SparseLag.<ref refid="class_power_sym_lag_1ac533476439cd9580fce54d85485810c1" kindref="member">Init</ref>();</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref><sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>-Diag<sp/>&lt;&lt;<sp/>-<ref refid="smile2_8cpp_1a8c05e96c512e86c2fc507220e0b402b0" kindref="member">Lag</ref>;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>)<sp/>*<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref><sp/>&lt;&lt;<sp/>-SparseLag.<ref refid="class_power_sym_lag_1a2ebb74609729a2784ae3abaa59e5c9b6" kindref="member">ComputeLag</ref>();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>matrix<sp/>is<sp/>not<sp/>symmetric,<sp/>yet<sp/>has<sp/>symmetric<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_power_lag" kindref="compound">PowerLag</ref><sp/>SparseLag(it,<sp/>InTheBelt);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="smile2_8cpp_1a8c05e96c512e86c2fc507220e0b402b0" kindref="member">Lag</ref><sp/>=<sp/>SparseLag.<ref refid="class_power_lag_1aac78c8b85bf9e9b2cebe0101be5238e5" kindref="member">Init</ref>();</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref><sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>-Diag<sp/>&lt;&lt;<sp/>-<ref refid="smile2_8cpp_1a8c05e96c512e86c2fc507220e0b402b0" kindref="member">Lag</ref>;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smile2_8cpp_1a8c05e96c512e86c2fc507220e0b402b0" kindref="member">Lag</ref><sp/>=<sp/>SparseLag.<ref refid="class_power_lag_1aba86f6228fe473b73c264c8dc92da290" kindref="member">ComputeLag</ref>();</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref><sp/>&lt;&lt;<sp/>-<ref refid="smile2_8cpp_1a8c05e96c512e86c2fc507220e0b402b0" kindref="member">Lag</ref>;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ct<sp/>=<sp/><ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>.count()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cr<sp/>&lt;<sp/>ct)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>[cr].Swap(<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>[ct]);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>--ct;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>++cr;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444" refid="polym_8h_1a2f3fd9411da34dd4faa1988983fb1545" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/><ref refid="polym_8h_1a2f3fd9411da34dd4faa1988983fb1545" kindref="member">kDenseMax</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>static<sp/>WMatrix<sp/><sp/><sp/>BufferDense;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447" refid="polym_8h_1aca9b6ff613d988cc22b061d312c6ab34" refkind="member"><highlight class="normal"><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/><ref refid="polym_8h_1aca9b6ff613d988cc22b061d312c6ab34" kindref="member">BufferDense</ref>;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DensePolySolving</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="polym_8h_1a76bea34d3f14396be8f647b7667fff04" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1a76bea34d3f14396be8f647b7667fff04" kindref="member">DensePolySolving</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>dim<sp/>=<sp/>mt.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WPair&gt;</ref><sp/>itr;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="polym_8h_1adaf590cd5aa3e5808843ac00d9e26d1e" kindref="member">Max_Dense</ref><sp/>&lt;<sp/>dim)<sp/><ref refid="polym_8h_1adaf590cd5aa3e5808843ac00d9e26d1e" kindref="member">Max_Dense</ref><sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>val<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>(*Poly).alloc(2);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(*mt).empty())<sp/>val<sp/>=<sp/>(*(*mt)).second;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref><sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>-val;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>&lt;=<sp/><ref refid="polym_8h_1a2f3fd9411da34dd4faa1988983fb1545" kindref="member">kDenseMax</ref>)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="polym_8h_1aca9b6ff613d988cc22b061d312c6ab34" kindref="member">BufferDense</ref>.reset();</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>mt;<sp/>++mt,<sp/>++<ref refid="polym_8h_1aca9b6ff613d988cc22b061d312c6ab34" kindref="member">BufferDense</ref>)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*BufferDense).fill(dim,<sp/>0);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itr<sp/>=<sp/>(*mt)();<sp/>itr;<sp/>++itr)<sp/>(*<ref refid="polym_8h_1aca9b6ff613d988cc22b061d312c6ab34" kindref="member">BufferDense</ref>)[(*itr).first]<sp/>=<sp/>(*itr).second;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/><ref refid="polym_8h_1aca9b6ff613d988cc22b061d312c6ab34" kindref="member">BufferDense</ref>();</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="polym_8h_1abfd9cf31ddb10022112d36489207fab7" kindref="member">DanilevskyMethod</ref>(tmp,<sp/>*<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>Dense(dim);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>mt;<sp/>++mt,<sp/>++Dense)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*Dense).alloc(dim,<sp/>0);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itr<sp/>=<sp/>(*mt)();<sp/>itr;<sp/>++itr)<sp/>(*Dense)[(*itr).first]<sp/>=<sp/>(*itr).second;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="polym_8h_1abfd9cf31ddb10022112d36489207fab7" kindref="member">DanilevskyMethod</ref>(Dense(),<sp/>*<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>++<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="480"><highlight class="normal">};</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DensePolySolving<sp/>--<sp/>old</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485" refid="polym_8h_1aa07e9b8661f4182f3beaf429619b695d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1aa07e9b8661f4182f3beaf429619b695d" kindref="member">DensePolySolvingOld</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>dim<sp/>=<sp/>mt.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="polym_8h_1adaf590cd5aa3e5808843ac00d9e26d1e" kindref="member">Max_Dense</ref><sp/>&lt;<sp/>dim)<sp/><ref refid="polym_8h_1adaf590cd5aa3e5808843ac00d9e26d1e" kindref="member">Max_Dense</ref><sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1aa4c05e4e478804f6d0fe30b06abe0099" kindref="member">WMatrix</ref><sp/>Dense(dim);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WPair&gt;</ref><sp/>itr;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>mt;<sp/>++mt,<sp/>++Dense)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*Dense).alloc(dim,<sp/>0);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itr<sp/>=<sp/>(*mt)();<sp/>itr;<sp/>++itr)<sp/>(*Dense)[(*itr).first]<sp/>=<sp/>(*itr).second;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="polym_8h_1abfd9cf31ddb10022112d36489207fab7" kindref="member">DanilevskyMethod</ref>(Dense(),<sp/>*<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>val<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>(*Poly).alloc(2);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(*mt).empty())<sp/>val<sp/>=<sp/>(*(*mt)).second;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref><sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>-val;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>++<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal">};</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="comment">//**********************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PolyOrganize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment">//**********************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="polym_8h_1a1369c7b447e333a1a3198034b1b7b355" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1a1369c7b447e333a1a3198034b1b7b355" kindref="member">PolyOrganize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>*First,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Precision,<sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>Border)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Precision<sp/>&lt;<sp/><ref refid="polym_8h_1a5b5a395141319c5c13666a272aa1f645" kindref="member">SL_Max_Precision</ref>)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Cnt<sp/>=<sp/><ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>.last()<sp/>+<sp/>1<sp/>-<sp/>First;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Cnt<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>acc(Precision);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acc<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Cnt--<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polym_8h_1a1d686219b28c3765fec487a853f105a0" kindref="member">PolyProduct</ref>(acc,<sp/>(*<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>)());</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*Poly).clear();</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*Poly).<ref refid="class_vector_1a3cd35c20c654363bb9e0c3ea77f977e0" kindref="member">Swap</ref>(acc);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Border<sp/>&amp;&amp;<sp/>(*Border).<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>()<sp/>&lt;<sp/><ref refid="polym_8h_1a5b5a395141319c5c13666a272aa1f645" kindref="member">SL_Max_Precision</ref>)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>org:<sp/>&quot;<sp/>&lt;&lt;<sp/>(*Border).count()<sp/>&lt;&lt;<sp/>&quot;<sp/>+<sp/>&quot;<sp/>&lt;&lt;<sp/>(*Poly).count()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polym_8h_1a1d686219b28c3765fec487a853f105a0" kindref="member">PolyProduct</ref>(*Border,<sp/>(*<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>)());</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*Poly).destroy();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*Poly).Swap(*Border);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++Border;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>Border;<sp/>++Border,<sp/>++<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;<sp/>org,<sp/>copy:<sp/>&quot;<sp/>&lt;&lt;<sp/>(*Border).count()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref><sp/>=<sp/>*Border;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="537"><highlight class="normal">};</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539" refid="polym_8h_1a7a5c04884939f8a9c40e2e0cab172486" refkind="member"><highlight class="normal"><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/><ref refid="polym_8h_1a7a5c04884939f8a9c40e2e0cab172486" kindref="member">SplitSparse</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Pseudo,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>&amp;Second,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>&amp;PseudoCount)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>dim<sp/>=<sp/>mt.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>n1,<sp/>n2<sp/>=<sp/>1,<sp/>StartBest<sp/>=<sp/>0,<sp/>localLevel,<sp/>oldPseudo;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><ref refid="class_vector" kindref="compound">Vector&lt;INDEX&gt;</ref><sp/>perm(dim,<sp/>0),<sp/>order(dim);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>pseudoperipheral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;ps:<sp/>&quot;<sp/>&lt;&lt;<sp/>Pseudo<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>level:<sp/>&quot;<sp/>&lt;&lt;<sp/>Level;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n1<sp/>=<sp/>0;<sp/>n1<sp/>&lt;<sp/>dim;<sp/>++n1)<sp/>order[n1]<sp/>=<sp/>dim<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>oldPseudo<sp/>=<sp/>Pseudo;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="polym_8h_1a622cc3d52b0eb88a1045e15a4d0ae04a" kindref="member">LevelStructure</ref>(mt,<sp/>Pseudo,<sp/>localLevel,<sp/>perm(),<sp/>order.<ref refid="class_vector_1a53aad8ce8c9b993a8d4db1734a8f7cee" kindref="member">first</ref>());</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(oldPseudo<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>psF:<sp/>&quot;<sp/>&lt;&lt;<sp/>Pseudo<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>levelF:<sp/>&quot;<sp/>&lt;&lt;<sp/>Level<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>OpBest<sp/>=<sp/>dim<sp/>*<sp/><ref refid="polym_8h_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)dim),<sp/>OpLevel;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>lev<sp/>=<sp/>1;<sp/>lev<sp/>&lt;<sp/>localLevel<sp/>-<sp/>1;<sp/>++lev)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>n1<sp/>=<sp/>n2;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(order[perm[n2]]<sp/>==<sp/>lev)<sp/>++n2;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>OpLevel<sp/>=<sp/>(n2<sp/>-<sp/>n1)<sp/>*<sp/>dim;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>&lt;<sp/>300)<sp/>OpLevel<sp/>*=<sp/>2;<sp/><sp/></highlight><highlight class="comment">//<sp/>adjust<sp/>for<sp/>a<sp/>&apos;big&apos;<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>OpLevel<sp/>+=<sp/><ref refid="polym_8h_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)n1)<sp/>+<sp/><ref refid="polym_8h_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)dim<sp/>-<sp/>n2);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(OpLevel<sp/>&lt;<sp/>OpBest)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OpBest<sp/>=<sp/>OpLevel;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StartBest<sp/>=<sp/>n1;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(StartBest<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="polym_8h_1a76bea34d3f14396be8f647b7667fff04" kindref="member">DensePolySolving</ref>(mt);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>localLevel<sp/>=<sp/>order[perm[StartBest]];<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>level<sp/>of<sp/>the<sp/>belt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>find<sp/>the<sp/>new<sp/>Pseudo<sp/>for<sp/>the<sp/>1st<sp/>half</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>n2<sp/>=<sp/>StartBest;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(localLevel<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(order[perm[--n2]]<sp/>==<sp/>localLevel<sp/>-<sp/>1)<sp/>++count;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>find<sp/>the<sp/>start<sp/>of<sp/>the<sp/>second<sp/>half</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>n2<sp/>=<sp/>StartBest;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(order[perm[n2]]<sp/>==<sp/>localLevel)<sp/>++n2;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><ref refid="class_vector" kindref="compound">Vector&lt;INDEX&gt;</ref><sp/>InvPerm(dim);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n1<sp/>=<sp/>0;<sp/>n1<sp/>&lt;<sp/>dim;<sp/>++n1)<sp/>InvPerm[perm[n1]]<sp/>=<sp/>n1;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>n2<sp/>indicates<sp/>beginning<sp/>of<sp/>the<sp/>2nd<sp/>submatrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n1<sp/>=<sp/>StartBest;<sp/>n1<sp/>&lt;<sp/>n2;<sp/>++n1)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>elt<sp/>on<sp/>the<sp/>belt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WPair&gt;</ref><sp/>itr<sp/>=<sp/>mt[perm[n1]]();</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>NoNbrsInSecond<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr;<sp/>++itr)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InvPerm[(*itr).first]<sp/>&gt;=<sp/>n2)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NoNbrsInSecond<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NoNbrsInSecond)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>elt<sp/>on<sp/>the<sp/>belt<sp/>does<sp/>not<sp/>have<sp/>nbrs<sp/>in<sp/>the<sp/>second<sp/>submatrix<sp/>-&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>it<sp/>from<sp/>the<sp/>belt<sp/>to<sp/>the<sp/>first<sp/>submatrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1a6a4288add566c8d9c96f7cb0dc661c66" kindref="member">CNT</ref><sp/>tmp<sp/>=<sp/>perm[StartBest];</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perm[StartBest]<sp/>=<sp/>perm[n1];</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perm[n1]<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++StartBest;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++count;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n1<sp/>=<sp/>0;<sp/>n1<sp/>&lt;<sp/>StartBest;<sp/>++n1)<sp/>InvPerm[perm[n1]]<sp/>=<sp/>n1;<sp/><sp/></highlight><highlight class="comment">//<sp/>1st<sp/>half</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>n2<sp/>=<sp/>dim<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>order[perm[n1]]<sp/>==<sp/>localLevel;<sp/>++n1,<sp/>--n2)<sp/><sp/></highlight><highlight class="comment">//<sp/>place<sp/>the<sp/>belt<sp/>at<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>InvPerm[perm[n1]]<sp/>=<sp/>n2;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>n2<sp/>=<sp/>n1<sp/>-<sp/>StartBest;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>width<sp/>of<sp/>the<sp/>belt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>n1<sp/>&lt;<sp/>dim;<sp/>++n1)<sp/><sp/></highlight><highlight class="comment">//<sp/>2nd<sp/>half<sp/>between<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>InvPerm[perm[n1]]<sp/>=<sp/>n1<sp/>-<sp/>n2;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1aeb5dc3aae4617b1ecd855c54d6d10565" kindref="member">Rename</ref>(mt,<sp/>InvPerm.<ref refid="class_vector_1a53aad8ce8c9b993a8d4db1734a8f7cee" kindref="member">first</ref>());</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>Second<sp/>=<sp/>n2;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>PseudoCount<sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StartBest;</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619" refid="polym_8h_1aefa3295517e3c2de8b707231c86511b6" refkind="member"><highlight class="normal"><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/><ref refid="polym_8h_1aefa3295517e3c2de8b707231c86511b6" kindref="member">SplitSparseOld</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Pseudo,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>&amp;Level,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>&amp;Second)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>dim<sp/>=<sp/>mt.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>(),<sp/>OldLevel;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><ref refid="class_vector" kindref="compound">Vector&lt;INDEX&gt;</ref><sp/>perm(dim,<sp/>0),<sp/>order(dim);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>pseudoperipheral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_vector" kindref="compound">Vector&lt;INDEX&gt;</ref><sp/>InitOrder(dim,<sp/>dim<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>OldLevel<sp/>=<sp/>Level;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="polym_8h_1a622cc3d52b0eb88a1045e15a4d0ae04a" kindref="member">LevelStructure</ref>(mt,<sp/>Pseudo,<sp/>Level,<sp/>perm(),<sp/>InitOrder.<ref refid="class_vector_1a53aad8ce8c9b993a8d4db1734a8f7cee" kindref="member">first</ref>());</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>order.<ref refid="class_vector_1a3cd35c20c654363bb9e0c3ea77f977e0" kindref="member">Swap</ref>(InitOrder);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Level<sp/>&gt;<sp/>OldLevel);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>OldLevel<sp/>=<sp/>Level;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>n1,<sp/>n2<sp/>=<sp/>1,<sp/>StartBest<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>OpBest<sp/>=<sp/>dim<sp/>*<sp/><ref refid="polym_8h_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)dim),<sp/>OpLevel;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>lev<sp/>=<sp/>1;<sp/>lev<sp/>&lt;<sp/>OldLevel<sp/>-<sp/>1;<sp/>++lev)<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>n1<sp/>=<sp/>n2;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(order[perm[n2]]<sp/>==<sp/>lev)<sp/>++n2;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>OpLevel<sp/>=<sp/>(n2<sp/>-<sp/>n1)<sp/>*<sp/>dim;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>&lt;<sp/>300)<sp/>OpLevel<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>OpLevel<sp/>+=<sp/><ref refid="polym_8h_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)n1)<sp/>+<sp/><ref refid="polym_8h_1ac9308e85a1e9abba7f247485552bb3ef" kindref="member">geoda_sqr</ref>((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)dim<sp/>-<sp/>n2);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(OpLevel<sp/>&lt;<sp/>OpBest)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OpBest<sp/>=<sp/>OpLevel;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StartBest<sp/>=<sp/>n1;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(StartBest<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="polym_8h_1a76bea34d3f14396be8f647b7667fff04" kindref="member">DensePolySolving</ref>(mt);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>Level<sp/>=<sp/>order[perm[StartBest]];<sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>level<sp/>of<sp/>the<sp/>belt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><ref refid="class_vector" kindref="compound">Vector&lt;INDEX&gt;</ref><sp/>InvPerm(dim);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n1<sp/>=<sp/>0;<sp/>n1<sp/>&lt;<sp/>StartBest;<sp/>++n1)<sp/>InvPerm[perm[n1]]<sp/>=<sp/>n1;<sp/><sp/></highlight><highlight class="comment">//<sp/>1st<sp/>half</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>n2<sp/>=<sp/>dim<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>order[perm[n1]]<sp/>==<sp/>Level;<sp/>++n1,<sp/>--n2)<sp/><sp/></highlight><highlight class="comment">//<sp/>place<sp/>the<sp/>belt<sp/>at<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>InvPerm[perm[n1]]<sp/>=<sp/>n2;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>n2<sp/>=<sp/>n1<sp/>-<sp/>StartBest;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keep<sp/>width<sp/>of<sp/>the<sp/>belt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>n1<sp/>&lt;<sp/>dim;<sp/>++n1)<sp/><sp/></highlight><highlight class="comment">//<sp/>2nd<sp/>half<sp/>between<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>InvPerm[perm[n1]]<sp/>=<sp/>n1<sp/>-<sp/>n2;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1aeb5dc3aae4617b1ecd855c54d6d10565" kindref="member">Rename</ref>(mt,<sp/>InvPerm.<ref refid="class_vector_1a53aad8ce8c9b993a8d4db1734a8f7cee" kindref="member">first</ref>());</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>Second<sp/>=<sp/>n2;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StartBest;</highlight></codeline>
<codeline lineno="660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1af1c7749bc4934f25849032d35c8beed9" kindref="member">SparsePoly</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1a557ef056710cede1495d4c331cb31b1c" kindref="member">SparseBlockPoly</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Pseudo);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665" refid="polym_8h_1abb49292e91ec68878ad6be06e0f73543" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1abb49292e91ec68878ad6be06e0f73543" kindref="member">SelectBlockPolyNE</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>StartBest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>PseudoCount)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//***<sp/>this<sp/>routine<sp/>alters<sp/>the<sp/>sparse<sp/>matrix<sp/>-&gt;<sp/>does<sp/>not<sp/>require<sp/>extra<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>it(mt.<ref refid="class_iterator_1a6e5276437e645efc8da75c4609fdff5b" kindref="member">first</ref>(),<sp/>StartBest);<sp/><sp/></highlight><highlight class="comment">//<sp/>select<sp/>the<sp/>submatrix<sp/>to<sp/>work<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>count<sp/>=<sp/>StartBest,<sp/>Pseudo<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>cnt<sp/>=<sp/>1;<sp/>cnt<sp/>&lt;=<sp/>PseudoCount;<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>thisCount<sp/>=<sp/>mt[StartBest<sp/>-<sp/>cnt].<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thisCount<sp/>&lt;=<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>thisCount;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Pseudo<sp/>=<sp/>StartBest<sp/>-<sp/>cnt;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1a557ef056710cede1495d4c331cb31b1c" kindref="member">SparseBlockPoly</ref>(it,<sp/>Pseudo);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">//<sp/>procedure<sp/>to<sp/>rename<sp/>the<sp/>references<sp/>in<sp/>the<sp/>sparse<sp/>matrix<sp/>by<sp/>deducting<sp/>Deduct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(thus<sp/>taking<sp/>offset<sp/>out<sp/>from<sp/>the<sp/>submatrix)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685" refid="polym_8h_1a96dd1cdaa9b0000c0475ad715c3148e5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1a96dd1cdaa9b0000c0475ad715c3148e5" kindref="member">PartialRename</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>it,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Deduct)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it;<sp/>++it)</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WPair&gt;</ref><sp/>itr<sp/>=<sp/>(*it)();<sp/>itr;<sp/>++itr)<sp/>(*itr).first<sp/>-=<sp/>Deduct;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691" refid="polym_8h_1aefe68e52b1679297acdda70b93f684dd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1aefe68e52b1679297acdda70b93f684dd" kindref="member">SelectPolyNE</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>StartBest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Stop)<sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//***<sp/>this<sp/>routine<sp/>works<sp/>on<sp/>the<sp/>original<sp/>sparse<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>it(mt.<ref refid="class_iterator_1a6e5276437e645efc8da75c4609fdff5b" kindref="member">first</ref>()<sp/>+<sp/>StartBest,<sp/>Stop<sp/>-<sp/>StartBest);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1a96dd1cdaa9b0000c0475ad715c3148e5" kindref="member">PartialRename</ref>(it,<sp/>StartBest);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1af1c7749bc4934f25849032d35c8beed9" kindref="member">SparsePoly</ref>(it);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SparseBlockPoly</highlight></codeline>
<codeline lineno="701"><highlight class="comment">mt<sp/>-<sp/>sparse<sp/>matrix<sp/>of<sp/>connected<sp/>elements;</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703" refid="polym_8h_1a557ef056710cede1495d4c331cb31b1c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1a557ef056710cede1495d4c331cb31b1c" kindref="member">SparseBlockPoly</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Pseudo)<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>dim<sp/>=<sp/>mt.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>();</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim<sp/>&lt;=<sp/><ref refid="polym_8h_1a089c2e12eb41c55e339649240bb94c51" kindref="member">SL_SMALL_MATRIX</ref>)<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="polym_8h_1a76bea34d3f14396be8f647b7667fff04" kindref="member">DensePolySolving</ref>(mt);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>StartBest,<sp/>n2,<sp/>PseudoCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>StartBest<sp/>=<sp/><ref refid="polym_8h_1a7a5c04884939f8a9c40e2e0cab172486" kindref="member">SplitSparse</ref>(mt,<sp/>Pseudo,<sp/>n2,<sp/>PseudoCount);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(StartBest<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ae9d1896edbd59cd55628634470738d01" kindref="member">WVector</ref><sp/>*First<sp/>=<sp/><ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>.last()<sp/>+<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>poly<sp/>introduced<sp/>in<sp/>this<sp/>routine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><ref refid="class_vector" kindref="compound">Vector&lt;WVector&gt;</ref><sp/>Bordering(n2);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1abf8445d3c21621b80fa766845706b935" kindref="member">SparsePolyBorderingNE</ref>(mt,<sp/>n2,<sp/>Bordering);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1abb49292e91ec68878ad6be06e0f73543" kindref="member">SelectBlockPolyNE</ref>(mt,<sp/>StartBest,<sp/>PseudoCount);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1aefe68e52b1679297acdda70b93f684dd" kindref="member">SelectPolyNE</ref>(mt,<sp/>StartBest,<sp/>dim<sp/>-<sp/>n2);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><ref refid="polym_8h_1a1369c7b447e333a1a3198034b1b7b355" kindref="member">PolyOrganize</ref>(First,<sp/>dim<sp/>-<sp/>n2<sp/>+<sp/>1,<sp/>Bordering());</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SparsePoly</highlight></codeline>
<codeline lineno="728"><highlight class="comment">mt<sp/>-<sp/>sparse<sp/>matrix;</highlight></codeline>
<codeline lineno="729"><highlight class="comment">Precision<sp/>-<sp/>number<sp/>of<sp/>charactersitic<sp/>coeffs<sp/>required;</highlight></codeline>
<codeline lineno="730"><highlight class="comment">Poly<sp/>-<sp/><sp/>container<sp/>with<sp/>blocks<sp/>of<sp/>characteristic</highlight></codeline>
<codeline lineno="731"><highlight class="comment">polynomial<sp/>(should<sp/>be<sp/>previously<sp/>allocated);</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733" refid="polym_8h_1af1c7749bc4934f25849032d35c8beed9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="polym_8h_1af1c7749bc4934f25849032d35c8beed9" kindref="member">SparsePoly</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WMap&gt;</ref><sp/>mt)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>dim<sp/>=<sp/>mt.<ref refid="class_iterator_1afd338869f80ec5af59561f9aeae65b21" kindref="member">count</ref>(),<sp/>Level,<sp/>Blocks,<sp/>Pseudo(0);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><ref refid="class_vector" kindref="compound">Vector&lt;INDEX&gt;</ref><sp/>perm(dim,<sp/>0),<sp/>order(dim<sp/>+<sp/>1,<sp/>dim<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>Blocks<sp/>=<sp/><ref refid="polym_8h_1a622cc3d52b0eb88a1045e15a4d0ae04a" kindref="member">LevelStructure</ref>(mt,<sp/>Pseudo,<sp/>Level,<sp/>perm(),<sp/>order.<ref refid="class_vector_1a53aad8ce8c9b993a8d4db1734a8f7cee" kindref="member">first</ref>());</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Blocks<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;INDEX&gt;</ref><sp/>iperm<sp/>=<sp/>perm();</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Block<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>iperm;<sp/>++iperm)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(order[*iperm]<sp/>==<sp/>0)<sp/>++Block;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>order[*iperm]<sp/>=<sp/>Block;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>order[x]<sp/>shows<sp/>to<sp/>which<sp/>block<sp/>x<sp/>belongs<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Block<sp/>=<sp/>0,<sp/>iperm<sp/>=<sp/>perm();<sp/>Block<sp/>&lt;<sp/>Blocks;<sp/>++Block)<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(order[*iperm]<sp/>&lt;=<sp/>Block)<sp/>++iperm;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1a4c7688b643a08fd9b048deecbb9376b5" kindref="member">GWT</ref><sp/>SubMatrix;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polym_8h_1a32c764c7c1a9272f0bdbc0a730225ba2" kindref="member">SparseSubMatrix</ref>(mt,<sp/>iperm,<sp/>order.<ref refid="class_vector_1a53aad8ce8c9b993a8d4db1734a8f7cee" kindref="member">first</ref>(),<sp/>SubMatrix);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="polym_8h_1a557ef056710cede1495d4c331cb31b1c" kindref="member">SparseBlockPoly</ref>(SubMatrix(),<sp/>0);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>perm.destroy();</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>order.<ref refid="class_vector_1a557dae0338b7c4f08a58cae39a7df869" kindref="member">destroy</ref>();</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="polym_8h_1a557ef056710cede1495d4c331cb31b1c" kindref="member">SparseBlockPoly</ref>(mt,<sp/>Pseudo);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="comment">//<sp/>computes<sp/>log<sp/>of<sp/>the<sp/>polynomial<sp/>stored<sp/>in<sp/>Poly:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>a<sp/>sum<sp/>of<sp/>logs<sp/>of<sp/>each<sp/>polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759" refid="polym_8h_1a50bd3effbed49185c43d5d1f6e5fd810" refkind="member"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="polym_8h_1a50bd3effbed49185c43d5d1f6e5fd810" kindref="member">OnePoly</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/><ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>Val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Prec,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Pr)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>it;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><ref refid="class_vector" kindref="compound">Vector&lt;VALUE&gt;</ref><sp/>Power(Prec);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>S<sp/>=<sp/>1,<sp/>LogJ<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Power)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>Power<sp/>&lt;&lt;<sp/>S;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>S<sp/>*=<sp/>Val;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>Pr<sp/>&lt;<sp/>Prec;<sp/>++Pr)<sp/>Power[Pr]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/><ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>;<sp/>it;<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>itr<sp/>=<sp/>(*it)();</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;VALUE&gt;</ref><sp/>Po<sp/>=<sp/>Power();</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>S<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr;<sp/>++itr,<sp/>++Po)<sp/>S<sp/>+=<sp/>*itr<sp/>*<sp/>*Po;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(S<sp/>&lt;<sp/>1.0e-16)<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;<sp/>S<sp/>is<sp/>small=<sp/>&quot;<sp/>&lt;&lt;<sp/>S<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>val:<sp/>&quot;<sp/>&lt;&lt;<sp/>Val<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>=<sp/>1.0e-16;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>LogJ<sp/>+=<sp/>log(S);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LogJ;</highlight></codeline>
<codeline lineno="784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786" refid="polym_8h_1a303bc3e7da1c5ac7b10ff52915ba50b3" refkind="member"><highlight class="normal"><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/><ref refid="polym_8h_1a303bc3e7da1c5ac7b10ff52915ba50b3" kindref="member">OnePrime</ref>(<ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/><ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>Val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Prec,<sp/><ref refid="lite2_8h_1ac6885dbfb371c33e523c7fb046118b36" kindref="member">INDEX</ref><sp/>Pr)<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;WVector&gt;</ref><sp/>it;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><ref refid="class_vector" kindref="compound">Vector&lt;VALUE&gt;</ref><sp/>Power(Prec);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>S<sp/>=<sp/>1,<sp/><ref refid="lite2_8h_1aa1370876f2c781f443356f2a7b4d4b9c" kindref="member">Sum</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>cnt;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Power)<sp/>{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>Power<sp/>&lt;&lt;<sp/>S;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>S<sp/>*=<sp/>Val;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>Pr<sp/>&lt;<sp/>Prec;<sp/>++Pr)<sp/>Power[Pr]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/><ref refid="polym_8h_1af612757c1d1352066bd1b8773453e5d2" kindref="member">Poly</ref>;<sp/>it;<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1a3a00b1c836acf59360ffc84741af61c6" kindref="member">WIterator</ref><sp/>itr<sp/>=<sp/>(*it)();</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_iterator" kindref="compound">Iterator&lt;VALUE&gt;</ref><sp/>Po<sp/>=<sp/>Power();</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1aa0b03826c8f7cc324ac2db0ada2dce0a" kindref="member">VALUE</ref><sp/>S1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>S<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>cnt<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>++itr;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr;<sp/>++itr,<sp/>++cnt)<sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>S1<sp/>+=<sp/>*itr<sp/>*<sp/>cnt<sp/>*<sp/>*Po;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++Po;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>+=<sp/>*itr<sp/>*<sp/>*Po;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lite2_8h_1aa1370876f2c781f443356f2a7b4d4b9c" kindref="member">Sum</ref><sp/>+=<sp/>S1<sp/>/<sp/>S;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="lite2_8h_1aa1370876f2c781f443356f2a7b4d4b9c" kindref="member">Sum</ref>;</highlight></codeline>
<codeline lineno="811"><highlight class="normal">}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/xun/github/geoda-lib/src/cpp/regression/polym.h"/>
  </compounddef>
</doxygen>
