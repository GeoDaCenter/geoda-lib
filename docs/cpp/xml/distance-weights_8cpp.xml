<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="distance-weights_8cpp" kind="file" language="C++">
    <compoundname>distance-weights.cpp</compoundname>
    <includes local="no">limits</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="geometry_8h" local="yes">geometry/geometry.h</includes>
    <includes refid="weights_2_weights_8h" local="yes">weights/weights.h</includes>
    <incdepgraph>
      <node id="5">
        <label>geometry/geometry.h</label>
        <link refid="geometry_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/xun/github/geoda-lib/src/cpp/weights/distance-weights.cpp</label>
        <link refid="distance-weights_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>weights/weights.h</label>
        <link refid="weights_2_weights_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>boost/geometry.hpp</label>
      </node>
      <node id="2">
        <label>limits</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="3">
        <label>utility</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="distance-weights_8cpp_1a818a88eb77b06b1de105ee6544a17c5f" prot="public" static="no">
        <type>std::pair&lt; <ref refid="geometry_8h_1a4955b56f005be86f2d38486958dba53b" kindref="member">point_type</ref>, unsigned &gt;</type>
        <definition>typedef std::pair&lt;point_type, unsigned&gt; point_val</definition>
        <argsstring></argsstring>
        <name>point_val</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/weights/distance-weights.cpp" line="9" column="19" bodyfile="/Users/xun/github/geoda-lib/src/cpp/weights/distance-weights.cpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="distance-weights_8cpp_1a240f7a3ac47286cbdf3acfbb19f93ef8" prot="public" static="no">
        <type>bgi::rtree&lt; <ref refid="distance-weights_8cpp_1a818a88eb77b06b1de105ee6544a17c5f" kindref="member">point_val</ref>, bgi::quadratic&lt; 32 &gt; &gt;</type>
        <definition>typedef bgi::rtree&lt;point_val, bgi::quadratic&lt;32&gt; &gt; rtree_point_t</definition>
        <argsstring></argsstring>
        <name>rtree_point_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/xun/github/geoda-lib/src/cpp/weights/distance-weights.cpp" line="12" column="20" bodyfile="/Users/xun/github/geoda-lib/src/cpp/weights/distance-weights.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="geometry_8h" kindref="compound">geometry/geometry.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="weights_2_weights_8h" kindref="compound">weights/weights.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">bg<sp/>=<sp/>boost::geometry;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;point_type,<sp/>unsigned&gt;<sp/><ref refid="distance-weights_8cpp_1a818a88eb77b06b1de105ee6544a17c5f" kindref="member">point_val</ref>;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">bgi<sp/>=<sp/>boost::geometry::index;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>bgi::rtree&lt;point_val,<sp/>bgi::quadratic&lt;32&gt;&gt;<sp/><ref refid="distance-weights_8cpp_1a240f7a3ac47286cbdf3acfbb19f93ef8" kindref="member">rtree_point_t</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegeoda" kindref="compound">geoda</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">std::vector&lt;std::vector&lt;unsigned<sp/>int&gt;&gt;<sp/><ref refid="namespacegeoda_1a4808eed26b9dd4f4342e4144e4691e99" kindref="member">geoda::knearest_neighbors</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgeoda_1_1_geometry_collection" kindref="compound">GeometryCollection</ref>&amp;<sp/>geoms,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>rtree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>std::vector&lt;point_val&gt;<sp/>pts;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_geoms<sp/>=<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1ac84ddf06ab4559e822276f376a24f41f" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_geoms;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="geometry_8h_1a4955b56f005be86f2d38486958dba53b" kindref="member">point_type</ref><sp/>pt<sp/>=<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1ad1e00066be731ae77452566bd0214b56" kindref="member">get_centroid</ref>(i);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>pts.emplace_back(pt,<sp/>i);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><ref refid="distance-weights_8cpp_1a240f7a3ac47286cbdf3acfbb19f93ef8" kindref="member">rtree_point_t</ref><sp/>rtree(pts);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;unsigned<sp/>int&gt;&gt;<sp/>result(num_geoms);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>visit<sp/>all<sp/>element<sp/>in<sp/>rtree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(rtree_point_t::const_query_iterator<sp/>it<sp/>=<sp/>rtree.qbegin(bgi::intersects(rtree.bounds()));<sp/>it<sp/>!=<sp/>rtree.qend();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="distance-weights_8cpp_1a818a88eb77b06b1de105ee6544a17c5f" kindref="member">point_val</ref>&amp;<sp/>v<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>orig_idx<sp/>=<sp/>v.second;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>point<sp/>&quot;v&quot;<sp/>with<sp/>index<sp/>&quot;obs&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;point_val&gt;<sp/>q;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>rtree.query(bgi::nearest(v.first,<sp/>k<sp/>+<sp/>1),<sp/>std::back_inserter(q));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>nbr<sp/>:<sp/>q)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbr.second<sp/>==<sp/>v.second)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>double<sp/>d<sp/>=<sp/>bg::distance(v.first,<sp/>w.first);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result[orig_idx].push_back(nbr.second);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacegeoda_1aae99cbaa2a239c00d5a96586b4b6ac2d" kindref="member">geoda::haversine_distance</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lon1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lat1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lon2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lat2,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_mile)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sin_delta_phi<sp/>=<sp/>sin((lat2<sp/>-<sp/>lat1)<sp/>*<sp/><ref refid="namespacegeoda_1a01ceccbc23ee69f10a97f63663bcd9f9" kindref="member">pi_over_180</ref><sp/>/<sp/>2.0);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sin_delta_lambda<sp/>=<sp/>sin((lon2<sp/>-<sp/>lon1)<sp/>*<sp/><ref refid="namespacegeoda_1a01ceccbc23ee69f10a97f63663bcd9f9" kindref="member">pi_over_180</ref><sp/>/<sp/>2.0);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>sin_delta_phi<sp/>*<sp/>sin_delta_phi<sp/>+</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cos(lat1<sp/>*<sp/><ref refid="namespacegeoda_1a01ceccbc23ee69f10a97f63663bcd9f9" kindref="member">pi_over_180</ref>)<sp/>*<sp/>cos(lat2<sp/>*<sp/><ref refid="namespacegeoda_1a01ceccbc23ee69f10a97f63663bcd9f9" kindref="member">pi_over_180</ref>)<sp/>*<sp/>sin_delta_lambda<sp/>*<sp/>sin_delta_lambda;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>2.0<sp/>*<sp/>atan2(sqrt(a),<sp/>sqrt(1.0<sp/>-<sp/>a));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_mile<sp/>?<sp/><ref refid="namespacegeoda_1a41ebf7994c44307f5d65d936cc930b79" kindref="member">earth_radius_miles</ref><sp/>*<sp/>c<sp/>:<sp/><ref refid="namespacegeoda_1a24e199d421bd163374ac94c924479408" kindref="member">earth_radius_km</ref><sp/>*<sp/>c;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">std::vector&lt;std::vector&lt;double&gt;&gt;<sp/><ref refid="namespacegeoda_1aa8cdb09f0627ed6b7a39fb26ef99ab09" kindref="member">geoda::distance_weights</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgeoda_1_1_geometry_collection" kindref="compound">GeometryCollection</ref>&amp;<sp/>geoms,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>distance_threshold,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_mile)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>rtree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>std::vector&lt;point_val&gt;<sp/>pts;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_geoms<sp/>=<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1ac84ddf06ab4559e822276f376a24f41f" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_geoms;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="geometry_8h_1a4955b56f005be86f2d38486958dba53b" kindref="member">point_type</ref><sp/>pt<sp/>=<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1ad1e00066be731ae77452566bd0214b56" kindref="member">get_centroid</ref>(i);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>pts.emplace_back(pt,<sp/>i);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="distance-weights_8cpp_1a240f7a3ac47286cbdf3acfbb19f93ef8" kindref="member">rtree_point_t</ref><sp/>rtree(pts);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>result(num_geoms);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>visit<sp/>all<sp/>element<sp/>in<sp/>rtree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(rtree_point_t::const_query_iterator<sp/>it<sp/>=<sp/>rtree.qbegin(bgi::intersects(rtree.bounds()));<sp/>it<sp/>!=<sp/>rtree.qend();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="distance-weights_8cpp_1a818a88eb77b06b1de105ee6544a17c5f" kindref="member">point_val</ref>&amp;<sp/>v<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>orig_idx<sp/>=<sp/>v.second;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>distance_threshold<sp/>to<sp/>degree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>distance_threshold_deg<sp/>=<sp/>distance_threshold<sp/>/<sp/>(is_mile<sp/>?<sp/><ref refid="namespacegeoda_1a69601ca6ebe7caf244256296e8c1be3e" kindref="member">mile_per_degree</ref><sp/>:<sp/><ref refid="namespacegeoda_1adcfb18fa45bbfe7e54f65138330eaa6a" kindref="member">km_per_degree</ref>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>bbox<sp/>using<sp/>distance_threshold</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>v.first.get&lt;0&gt;();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>v.first.get&lt;1&gt;();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="geometry_8h_1a7d32eb4d5272ffdaf1a4c210691779fb" kindref="member">box_type</ref><sp/>b(<ref refid="geometry_8h_1a4955b56f005be86f2d38486958dba53b" kindref="member">point_type</ref>(x<sp/>-<sp/>distance_threshold_deg,<sp/>y<sp/>-<sp/>distance_threshold_deg),</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="geometry_8h_1a4955b56f005be86f2d38486958dba53b" kindref="member">point_type</ref>(x<sp/>+<sp/>distance_threshold_deg,<sp/>y<sp/>+<sp/>distance_threshold_deg));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>each<sp/>point<sp/>&quot;v&quot;<sp/>with<sp/>index<sp/>&quot;obs&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;point_val&gt;<sp/>q;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>rtree.query(bgi::intersects(b),<sp/>std::back_inserter(q));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>nbr<sp/>:<sp/>q)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbr.second<sp/>==<sp/>v.second)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1<sp/>=<sp/>nbr.first.get&lt;0&gt;();</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1<sp/>=<sp/>nbr.first.get&lt;1&gt;();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d<sp/>=<sp/><ref refid="namespacegeoda_1aae99cbaa2a239c00d5a96586b4b6ac2d" kindref="member">haversine_distance</ref>(x,<sp/>y,<sp/>x1,<sp/>y1,<sp/>is_mile);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&lt;=<sp/>distance_threshold)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[orig_idx].push_back(nbr.second);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[orig_idx].push_back(d);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="namespacegeoda_1ac401bfe6a3293f4ce3d300dd9ad7b724" kindref="member">geoda::get_distance_thresholds</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgeoda_1_1_geometry_collection" kindref="compound">GeometryCollection</ref>&amp;<sp/>geoms,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_mile)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>std::vector&lt;point_val&gt;<sp/>pts;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_geoms<sp/>=<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1ac84ddf06ab4559e822276f376a24f41f" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_geoms;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="geometry_8h_1a4955b56f005be86f2d38486958dba53b" kindref="member">point_type</ref><sp/>pt<sp/>=<sp/>geoms.<ref refid="classgeoda_1_1_geometry_collection_1ad1e00066be731ae77452566bd0214b56" kindref="member">get_centroid</ref>(i);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>pts.emplace_back(pt,<sp/>i);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><ref refid="distance-weights_8cpp_1a240f7a3ac47286cbdf3acfbb19f93ef8" kindref="member">rtree_point_t</ref><sp/>rtree(pts);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>min<sp/>and<sp/>max<sp/>distance<sp/>from<sp/>each<sp/>geometry<sp/>to<sp/>its<sp/>nearest<sp/>neighbor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_1nn_distance<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_1nn_distance<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>bg::model::box&lt;bg::model::point&lt;double,<sp/>2UL,<sp/>bg::cs::cartesian&gt;&gt;<sp/>bbox<sp/>=<sp/>rtree.bounds();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_pair_distance<sp/>=<sp/><ref refid="namespacegeoda_1aae99cbaa2a239c00d5a96586b4b6ac2d" kindref="member">haversine_distance</ref>(bbox.min_corner().get&lt;0&gt;(),<sp/>bbox.min_corner().get&lt;1&gt;(),</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bbox.max_corner().get&lt;0&gt;(),<sp/>bbox.max_corner().get&lt;1&gt;(),<sp/>is_mile);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>boost::nearest()<sp/>search<sp/>is<sp/>self-included</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(rtree_point_t::const_query_iterator<sp/>it<sp/>=<sp/>rtree.qbegin(bgi::intersects(bbox));<sp/>it<sp/>!=<sp/>rtree.qend();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="distance-weights_8cpp_1a818a88eb77b06b1de105ee6544a17c5f" kindref="member">point_val</ref>&amp;<sp/>v<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;point_val&gt;<sp/>q;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>rtree.query(bgi::nearest(v.first,<sp/>k),<sp/>std::back_inserter(q));</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>v.first.get&lt;0&gt;();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>v.first.get&lt;1&gt;();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>nbr<sp/>:<sp/>q)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nbr.second<sp/>==<sp/>v.second)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1<sp/>=<sp/>nbr.first.get&lt;0&gt;();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y1<sp/>=<sp/>nbr.first.get&lt;1&gt;();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d<sp/>=<sp/><ref refid="namespacegeoda_1aae99cbaa2a239c00d5a96586b4b6ac2d" kindref="member">haversine_distance</ref>(x,<sp/>y,<sp/>x1,<sp/>y1,<sp/>is_mile);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&lt;<sp/>min_1nn_distance)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_1nn_distance<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;<sp/>max_1nn_distance)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_1nn_distance<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_1nn_distance<sp/>==<sp/>std::numeric_limits&lt;double&gt;::max())<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>min_1nn_distance<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>max_pair_distance<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;{min_1nn_distance,<sp/>max_1nn_distance,<sp/>max_pair_distance};</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/xun/github/geoda-lib/src/cpp/weights/distance-weights.cpp"/>
  </compounddef>
</doxygen>
