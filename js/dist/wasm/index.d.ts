// generated by TSEMBIND

// define type aliases for various native number types
type Char = number;
type SignedChar = number;
type UnsignedChar = number;
type Short = number;
type UnsignedShort = number;
type Int = number;
type UnsignedInt = number;
type Long = number;
type UnsignedLong = number;
type Float = number;
type Double = number;

export enum SpatialJoinType {
  INTERSECTS = 0,
  WITHIN = 1,
  TOUCHES = 2,
  OVERLAPS = 3,
  CROSSES = 4,
  EQUALS = 5
}

export class GeometryCollection {
  delete(): void;
}

export class PolygonCollection extends GeometryCollection {
  constructor(
    arg0: VectorDouble,
    arg1: VectorDouble,
    arg2: VectorUInt,
    arg3: VectorUInt,
    arg4: VectorUInt,
    arg5: boolean,
    arg6: boolean
  );

  buffer(arg0: UnsignedLong, arg1: Double, arg2: Int): Polygon;
  delete(): void;
}

export class LineCollection extends GeometryCollection {
  constructor(
    arg0: VectorDouble,
    arg1: VectorDouble,
    arg2: VectorUInt,
    arg3: VectorUInt,
    arg4: boolean
  );

  buffer(arg0: UnsignedLong, arg1: Double, arg2: Int): Polygon;
  delete(): void;
}

export class PointCollection extends GeometryCollection {
  constructor(
    arg0: VectorDouble,
    arg1: VectorDouble,
    arg2: VectorUInt,
    arg3: VectorUInt,
    arg4: boolean
  );

  buffer(arg0: UnsignedLong, arg1: Double, arg2: Int): Polygon;
  delete(): void;
}

export class Polygon {
  constructor();

  getX(): VectorDouble;

  getY(): VectorDouble;

  getHoles(): VectorUInt;

  getParts(): VectorUInt;

  addPart(arg0: VectorDouble, arg1: VectorDouble, arg2: boolean): void;
  delete(): void;
}

export class VectorUInt {
  constructor();

  push_back(arg0: UnsignedInt): void;

  resize(arg0: UnsignedLong, arg1: UnsignedInt): void;

  size(): UnsignedLong;

  get(arg0: UnsignedLong): any;

  set(arg0: UnsignedLong, arg1: UnsignedInt): boolean;
  delete(): void;
}

export class VecVecUInt {
  constructor();

  push_back(arg0: VectorUInt): void;

  resize(arg0: UnsignedLong, arg1: VectorUInt): void;

  size(): UnsignedLong;

  get(arg0: UnsignedLong): any;

  set(arg0: UnsignedLong, arg1: VectorUInt): boolean;
  delete(): void;
}

export class VectorInt {
  constructor();

  push_back(arg0: Int): void;

  resize(arg0: UnsignedLong, arg1: Int): void;

  size(): UnsignedLong;

  get(arg0: UnsignedLong): any;

  set(arg0: UnsignedLong, arg1: Int): boolean;
  delete(): void;
}

export class VecVecInt {
  constructor();

  push_back(arg0: VectorInt): void;

  resize(arg0: UnsignedLong, arg1: VectorInt): void;

  size(): UnsignedLong;

  get(arg0: UnsignedLong): any;

  set(arg0: UnsignedLong, arg1: VectorInt): boolean;
  delete(): void;
}

export class VectorDouble {
  constructor();

  push_back(arg0: Double): void;

  resize(arg0: UnsignedLong, arg1: Double): void;

  size(): UnsignedLong;

  get(arg0: UnsignedLong): any;

  set(arg0: UnsignedLong, arg1: Double): boolean;
  delete(): void;
}

export class VecVecDouble {
  constructor();

  push_back(arg0: VectorDouble): void;

  resize(arg0: UnsignedLong, arg1: VectorDouble): void;

  size(): UnsignedLong;

  get(arg0: UnsignedLong): any;

  set(arg0: UnsignedLong, arg1: VectorDouble): boolean;
  delete(): void;
}

export class VectorPolygon {
  constructor();

  push_back(arg0: Polygon): void;

  resize(arg0: UnsignedLong, arg1: Polygon): void;

  size(): UnsignedLong;

  get(arg0: UnsignedLong): any;

  set(arg0: UnsignedLong, arg1: Polygon): boolean;
  delete(): void;
}

export class LisaResult {
  isValid(): boolean;

  getPValues(): VectorDouble;

  getClusters(): VectorUInt;

  getLagValues(): VectorDouble;

  getLisaValues(): VectorDouble;
  delete(): void;
}
export interface CustomEmbindModule {
  spatialCount(arg0: PolygonCollection, arg1: PointCollection): VectorUInt;

  spatialUnion(arg0: PolygonCollection): Polygon;

  spatialJoin(
    arg0: GeometryCollection,
    arg1: GeometryCollection,
    arg2: SpatialJoinType
  ): VecVecUInt;

  getCentroids(arg0: GeometryCollection): VecVecDouble;

  getNearestNeighbors(arg0: GeometryCollection, arg1: UnsignedInt): VecVecUInt;

  getDistanceWeights(arg0: GeometryCollection, arg1: Double, arg2: boolean): VecVecUInt;

  getDistanceThresholds(arg0: GeometryCollection, arg1: boolean): VectorDouble;

  quantileBreaks(arg0: number, arg1: VectorDouble, arg2?: UnsignedInt): VectorDouble;
  localMoran(arg0: VectorDouble, arg1: VecVecUInt, arg2: UnsignedInt): LisaResult;
  GeometryCollection: typeof GeometryCollection;
  PolygonCollection: typeof PolygonCollection;
  LineCollection: typeof LineCollection;
  PointCollection: typeof PointCollection;
  Polygon: typeof Polygon;
  VectorUInt: typeof VectorUInt;
  VecVecUInt: typeof VecVecUInt;
  VectorInt: typeof VectorInt;
  VecVecInt: typeof VecVecInt;
  VectorDouble: typeof VectorDouble;
  VecVecDouble: typeof VecVecDouble;
  VectorPolygon: typeof VectorPolygon;
  LisaResult: typeof LisaResult;
  SpatialJoinType: typeof SpatialJoinType;
}
declare function factory(): Promise<CustomEmbindModule>;
export default factory;
